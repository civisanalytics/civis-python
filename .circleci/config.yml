version: 2.1

orbs:
  win: circleci/windows@5.0

jobs:
  pre-build:
    description: A check that doesn't need every supported Python version (e.g., code style checks)
    parameters:
      command-run:
        type: string
    docker:
      # Pick the highest Python 3.x version that civis-python is known to support
      - image: cimg/python:3.13
    steps:
      - checkout
      - run:
          command: << parameters.command-run >>

  build-python:
    parameters:
      python-version:
        type: string
    docker:
      - image: cimg/python:<< parameters.python-version >>
    environment:
      CIVIS_API_KEY: FOOBAR
    steps:
      - checkout
      - run:
          # Intentionally not using CircleCI's "python/install-packages" step,
          # because we don't want to install packages from any requirements.txt/pyproject.toml
          # just yet.
          # Test that we can build a source distribution that can correctly
          # install from clean slate.
          # "python -m build" creates dist/civis-x.y.z-py3-none-any.whl
          name: Build source distribution and install package from it
          command: |
              pip install --progress-bar off --upgrade pip setuptools build && \
              python -m build && \
              pip install dist/`ls dist/ | grep .whl`
      - run:
          name: Install the full development requirements
          command: pip install --progress-bar off -e ".[dev-core,dev-civisml]"
      - run:
          name: Show installed Python packages
          command: pip list -v
      - run:
          name: Run python tests
          command: pytest --junitxml=/tmp/testxml/report.xml --durations=0
      - store_test_results:
          path: /tmp/testxml/

  build-python-win:
    executor:
      name: win/default
      shell: powershell.exe
    steps:
      - checkout
      - run: systeminfo
      - run:
          name: Run tests on Windows
          shell: bash.exe
          command: |
            python --version && \
            python.exe -m pip install --upgrade pip setuptools wheel && \
            python.exe -m pip install ".[dev-core,dev-civisml]" && \
            python.exe -m pip list && \
            CIVIS_API_KEY=foobar pytest

workflows:
  version: 2
  build-and-test:
    jobs:
      - pre-build:
          name: bandit
          command-run: |
            pip install --progress-bar off -e ".[dev-core]" && \
            bandit --version && \
            bandit -r src -x tests
      - pre-build:
          name: black
          command-run: |
            pip install --progress-bar off -e ".[dev-core]" && \
            black --check src tools tests docs/conf.py
      - pre-build:
          name: flake8
          command-run: |
            pip install --progress-bar off -e ".[dev-core]" && \
            flake8 src tools tests docs/conf.py
      - pre-build:
          name: pip-audit
          command-run: |
            pip install --progress-bar off -r docs/requirements.txt && \
            pip install --progress-bar off -e ".[dev-core,dev-civisml]" && \
            pip-audit --version && \
            pip-audit --skip-editable
      - pre-build:
          name: twine
          command-run: |
            pip install --progress-bar off -e ".[dev-core]" && \
            python -m build && \
            twine check dist/`ls dist/ | grep .tar.gz` && \
            twine check dist/`ls dist/ | grep .whl`
      - build-python:
          requires:
            - bandit
            - black
            - flake8
            - pip-audit
            - twine
          matrix:
            parameters:
              python-version: ["3.10", "3.11", "3.12", "3.13"]
      - build-python-win:
          requires:
            - bandit
            - black
            - flake8
            - pip-audit
            - twine
