#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Civis Client documentation build configuration file, created by
# sphinx-quickstart on Tue Sep 15 11:15:53 2015.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

import builtins
import datetime
import importlib.util
import importlib.machinery
import os
import sys
from pathlib import Path

# Set __sphinx_build__ before we import "civis", so that within the "civis" namespace,
# we can tell whether we're running the Sphinx doc build or not.
# https://stackoverflow.com/a/65147676
builtins.__sphinx_build__ = True

import civis  # noqa: E402
from civis.resources import API_SPEC_PATH, generate_classes_maybe_cached  # noqa: E402

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "numpydoc.numpydoc",
    "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx.ext.doctest",
    "sphinx.ext.intersphinx",
]

intersphinx_mapping = {
    "pandas": ("https://pandas.pydata.org/pandas-docs/stable", None),
    "python": ("https://docs.python.org/3", None),
    "requests": ("https://requests.readthedocs.io/en/latest/", None),
    "sklearn": ("https://scikit-learn.org/stable", None),
    "joblib": ("https://joblib.readthedocs.io/en/latest/", None),
    "tenacity": ("https://tenacity.readthedocs.io/en/latest/", None),
    "polars": ("https://docs.pola.rs/api/python/stable/", None),
}

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The encoding of source files.
# source_encoding = 'utf-8-sig'

# The master toctree document.
master_doc = "index"

# General information about the project.
current_year = datetime.datetime.now().year
project = "Civis API Python Client"
copyright = "2016-%d, Civis Analytics" % current_year
author = "Civis Analytics"

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
major_version, minor_version, _ = civis.__version__.split(".")
# The short X.Y version.
version = "%s.%s" % (major_version, minor_version)
# The full version, including alpha/beta/rc tags.
release = civis.__version__

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# There are two options for replacing |today|: either, you set today to some
# non-false value, then it is used:
# today = ''
# Else, today_fmt is used as the format for a strftime call.
# today_fmt = '%B %d, %Y'

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
exclude_patterns = []

# The reST default role (used for this markup: `text`) to use for all
# documents.
# default_role = None

# If true, '()' will be appended to :func: etc. cross-reference text.
# add_function_parentheses = True

# If true, the current module name will be prepended to all description
# unit titles (such as .. function::).
# add_module_names = True

# If true, sectionauthor and moduleauthor directives will be shown in the
# output. They are ignored by default.
# show_authors = False

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = "sphinx"

# A list of ignored prefixes for module index sorting.
# modindex_common_prefix = []

# If true, keep warnings as "system message" paragraphs in the built documents.
# keep_warnings = False

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False

# Suppress irrelevant warnings during doc builds.
numpydoc_class_members_toctree = False

# -- Options for HTML output ----------------------------------------------

html_theme = "sphinx_rtd_theme"

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
# html_theme_options = {}

# The name for this set of Sphinx documents.  If None, it defaults to
# "<project> v<release> documentation".
# html_title = None

# A shorter title for the navigation bar.  Default is the same as html_title.
# html_short_title = None

# The name of an image file (relative to this directory) to place at the top
# of the sidebar.
html_logo = "_static/civis.svg"

# The name of an image file (within the static path) to use as favicon of the
# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32
# pixels large.
html_favicon = "_static/civis.ico"

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]

# Add any extra paths that contain custom files (such as robots.txt or
# .htaccess) here, relative to this directory. These files are copied
# directly to the root of the documentation.
# html_extra_path = []

# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,
# using the given strftime format.
# html_last_updated_fmt = '%b %d, %Y'

# If true, SmartyPants will be used to convert quotes and dashes to
# typographically correct entities.
# html_use_smartypants = True

# Custom sidebar templates, maps document names to template names.
# html_sidebars = {}

# Additional templates that should be rendered to pages, maps page names to
# template names.
# html_additional_pages = {}

# If false, no module index is generated.
# html_domain_indices = True

# If false, no index is generated.
# html_use_index = True

# If true, the index is split into individual pages for each letter.
# html_split_index = False

# If true, links to the reST sources are added to the pages.
# html_show_sourcelink = True

# If true, "Created using Sphinx" is shown in the HTML footer. Default is True.
# html_show_sphinx = True

# If true, "(C) Copyright ..." is shown in the HTML footer. Default is True.
# html_show_copyright = True

# If true, an OpenSearch description file will be output, and all pages will
# contain a <link> tag referring to it.  The value of this option must be the
# base URL from which the finished HTML is served.
# html_use_opensearch = ''

# This is the file name suffix for HTML files (e.g. ".xhtml").
# html_file_suffix = None

# Language to be used for generating the HTML full-text search index.
# Sphinx supports the following languages:
#   'da', 'de', 'en', 'es', 'fi', 'fr', 'h', 'it', 'ja'
#   'nl', 'no', 'pt', 'ro', 'r', 'sv', 'tr'
# html_search_language = 'en'

# A dictionary with options for the search language support, empty by default.
# Now only 'ja' uses this config value
# html_search_options = {'type': 'default'}

# The name of a javascript file (relative to the configuration directory) that
# implements a search results scorer. If empty, the default will be used.
# html_search_scorer = 'scorer.js'

# Output file base name for HTML help builder.
htmlhelp_basename = "CivisClientdoc"

# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    # 'preamble': '',
    # Latex figure (float) alignment
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (
        master_doc,
        "CivisClient.tex",
        "Civis Client Documentation",
        "Civis Analytics",
        "manual",
    ),
]

# The name of an image file (relative to this directory) to place at the top of
# the title page.
# latex_logo = None

# For "manual" documents, if this is true, then toplevel headings are parts,
# not chapters.
# latex_use_parts = False

# If true, show page references after internal links.
# latex_show_pagerefs = False

# If true, show URL addresses after external links.
# latex_show_urls = False

# Documents to append as an appendix to all manuals.
# latex_appendices = []

# If false, no module index is generated.
# latex_domain_indices = True


# -- Options for manual page output ---------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "civisclient", "Civis Client Documentation", [author], 1)]

# If true, show URL addresses after external links.
# man_show_urls = False


# -- Options for Texinfo output -------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "CivisClient",
        "Civis Client Documentation",
        author,
        "CivisClient",
        "One line description of project.",
        "Miscellaneous",
    ),
]

# Documents to append as an appendix to all manuals.
# texinfo_appendices = []

# If false, no module index is generated.
# texinfo_domain_indices = True

# How to display URL addresses: 'footnote', 'no', or 'inline'.
# texinfo_show_urls = 'footnote'

# If true, do not generate a @detailmenu in the "Top" node's menu.
# texinfo_no_detailmenu = False

nitpick_ignore = [
    ("envvar", "CIVIS_API_KEY"),
    ("py:class", "concurrent.futures._base.Future"),
    ("py:class", "civis.base.CivisAsyncResultBase"),
]
# Show tables of functions for each Resource class.
numpydoc_show_class_members = True

_autodoc_fmt = ".. autoclass:: {}\n   :members:\n   :exclude-members: __init__\n\n"


def _write_resources_rst(class_names):
    with open("api_resources.rst", "w") as resources_rst_file:
        resources_rst_file.write(
            ".. _api_resources:\n\n"
            "API Resources\n"
            "=============\n\n"
            ".. note::\n\n"
            "   The API resources listed in this documentation are those for "
            "   a standard Civis Platform user. "
            "   Particular users may have access to resources and/or "
            "   methods that are featured-flagged or still under development and "
            "   therefore do not appear in this documentation. "
            "   For the exact API resources and methods available to a given "
            "   Civis Platform user, log on as that user and go to "
            "   https://api.civisanalytics.com.\n\n"
            ".. toctree::\n"
            "   :titlesonly:\n\n"
        )
        for class_name in class_names:
            endpoint_rst_filename_no_ext = f"api_{class_name.lower()}_endpoint"
            endpoint_rst_filename = f"{endpoint_rst_filename_no_ext}.rst"
            resources_rst_file.write(f"   {endpoint_rst_filename_no_ext}\n")
            with open(endpoint_rst_filename, "w") as endpoint_rst_file:
                endpoint_rst_file.write(f".. _{endpoint_rst_filename_no_ext}:\n\n")
                endpoint_name = class_name.title()
                full_path = f"civis.client._{endpoint_name}"
                endpoint_rst_file.write(
                    f"{endpoint_name.replace('Json', 'JSON').replace('_', ' ')}\n"
                    f"{'=' * len(endpoint_name)}\n\n"
                )
                endpoint_rst_file.write(_autodoc_fmt.format(full_path, full_path))


def _write_hide_endpoint_class_sig_css(class_names):
    css_path = os.path.join(
        os.path.dirname(__file__), "_static", "hide_endpoint_class_sig.css"
    )
    with open(css_path, "w") as css_file:
        for class_name in class_names:
            camel_case = class_name.title()
            css_file.write(
                f"dt#civis\\.client\\._{camel_case}.sig.sig-object.py {{\n"
                "    display: none;\n"
                "}\n"
            )


sorted_class_names = sorted(
    generate_classes_maybe_cached(
        API_SPEC_PATH, api_key="not_needed", api_version="1.0"
    ).keys()
)
_write_resources_rst(sorted_class_names)
_write_hide_endpoint_class_sig_css(sorted_class_names)


def import_from_path(module_name, file_path):
    # Based on Python docs:
    # https://docs.python.org/3/library/importlib.html#importing-a-source-file-directly
    spec = importlib.util.spec_from_file_location(
        module_name,
        file_path,
        # Set the loader to SourceFileLoader so that a .pyi file can be loaded.
        loader=importlib.machinery.SourceFileLoader(module_name, file_path),
    )
    module = importlib.util.module_from_spec(spec)
    sys.modules[module_name] = module
    spec.loader.exec_module(module)
    return module


# Because the stub file civis/client.pyi has the full spec for API endpoints and
# methods, we use it (instead of civis/client.py) to document the civis.client module.
# Drop the already-imported civis.client module from sys.modules and force Sphinx to
# re-import it from the civis/client.pyi stub file.
del sys.modules["civis.client"]
import_from_path(
    "civis.client", str(Path(__file__).parent.parent / "src" / "civis" / "client.pyi")
)


def setup(app):
    app.add_css_file("custom.css")
    app.add_css_file("hide_endpoint_class_sig.css")
