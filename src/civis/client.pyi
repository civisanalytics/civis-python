# This file is auto-generated by tools/update_civis_api_spec.py.
# Do not edit it by hand.

from collections import OrderedDict
from civis.response import Response, PaginatedResponse

class _Admin:
    def list_organizations(
        self,
        status: list[str] | None = ...,
        org_type: list[str] | None = ...,
    ) -> Response:
        """List organizations

        Parameters
        ----------
        status : list[str], optional
            The status of the organization (active/trial/inactive).
        org_type : list[str], optional
            The organization type (platform/ads/survey_vendor/other).

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this organization.
            - name : str
                The name of this organization.
            - slug : str
                The slug of this organization.
            - account_manager_id : int
                The user ID of the Account Manager.
            - cs_specialist_id : int
                The user ID of the Client Success Specialist.
            - status : str
                The status of the organization (active/trial/inactive).
            - org_type : str
                The organization type (platform/ads/survey_vendor/other).
            - custom_branding : str
                The custom branding settings.
            - contract_size : int
                The monthly contract size.
            - max_analyst_users : int
                The max number of full platform users for the org.
            - max_report_users : int
                The max number of report-only platform users for the org.
            - vertical : str
                The business vertical that the organization belongs to.
            - cs_metadata : str
                Additional metadata about the organization in JSON format.
            - remove_footer_in_emails : bool
                If true, emails sent by platform will not include Civis text.
            - salesforce_account_id : str
                The Salesforce Account ID for this organization.
            - tableau_site_id : str
                The Tableau Site ID for this organization.
            - fedramp_enabled : bool
                Flag denoting whether this organization is FedRAMP compliant.
            - created_by_id : int
                The ID of the user who created this organization
            - last_updated_by_id : int
                The ID of the user who last updated this organization
            - advanced_settings : dict
                - dedicated_dj_pool_enabled : bool
                    If true, the Organization has a dedicated delayed jobs pool.
                    Defaults to false.
            - tableau_refresh_history : list[dict]
                The number of tableau refreshes used this month.
        """
        ...

class _Aliases:
    def list_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def list(
        self,
        object_type: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Aliases

        Parameters
        ----------
        object_type : str, optional
            Filter results by object type. Pass multiple object types with a comma-
            separatedlist. Valid types include: cass_ncoa, container_script, geocode,
            identity_resolution, dbt_script, python_script, r_script,
            javascript_script, sql_script, project, notebook, workflow,
            template_script, template_report, service, report, tableau and
            service_report.
        limit : int, optional
            Number of results to return. Defaults to 50. Maximum allowed is 1000.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id, object_type.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to asc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The id of the Alias object.
            - object_id : int
                The id of the object
            - object_type : str
                The type of the object. Valid types include: cass_ncoa,
                container_script, geocode, identity_resolution, dbt_script,
                python_script, r_script, javascript_script, sql_script, project,
                notebook, workflow, template_script, template_report, service, report,
                tableau and service_report.
            - alias : str
                The alias of the object
            - user_id : int
                The id of the user who created the alias
            - display_name : str
                The display name of the Alias object. Defaults to object name if not
                provided.
        """
        ...

    def post(
        self,
        object_id: int,
        object_type: str,
        alias: str,
        display_name: str | None = ...,
    ) -> Response:
        """Create an Alias

        Parameters
        ----------
        object_id : int
            The id of the object
        object_type : str
            The type of the object. Valid types include: cass_ncoa, container_script,
            geocode, identity_resolution, dbt_script, python_script, r_script,
            javascript_script, sql_script, project, notebook, workflow,
            template_script, template_report, service, report, tableau and
            service_report.
        alias : str
            The alias of the object
        display_name : str, optional
            The display name of the Alias object. Defaults to object name if not
            provided.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The id of the Alias object.
            - object_id : int
                The id of the object
            - object_type : str
                The type of the object. Valid types include: cass_ncoa,
                container_script, geocode, identity_resolution, dbt_script,
                python_script, r_script, javascript_script, sql_script, project,
                notebook, workflow, template_script, template_report, service, report,
                tableau and service_report.
            - alias : str
                The alias of the object
            - user_id : int
                The id of the user who created the alias
            - display_name : str
                The display name of the Alias object. Defaults to object name if not
                provided.
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Get an Alias

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The id of the Alias object.
            - object_id : int
                The id of the object
            - object_type : str
                The type of the object. Valid types include: cass_ncoa,
                container_script, geocode, identity_resolution, dbt_script,
                python_script, r_script, javascript_script, sql_script, project,
                notebook, workflow, template_script, template_report, service, report,
                tableau and service_report.
            - alias : str
                The alias of the object
            - user_id : int
                The id of the user who created the alias
            - display_name : str
                The display name of the Alias object. Defaults to object name if not
                provided.
        """
        ...

    def put(
        self,
        id: int,
        object_id: int,
        object_type: str,
        alias: str,
        display_name: str | None = ...,
    ) -> Response:
        """Replace all attributes of this Alias

        Parameters
        ----------
        id : int
            The id of the Alias object.
        object_id : int
            The id of the object
        object_type : str
            The type of the object. Valid types include: cass_ncoa, container_script,
            geocode, identity_resolution, dbt_script, python_script, r_script,
            javascript_script, sql_script, project, notebook, workflow,
            template_script, template_report, service, report, tableau and
            service_report.
        alias : str
            The alias of the object
        display_name : str, optional
            The display name of the Alias object. Defaults to object name if not
            provided.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The id of the Alias object.
            - object_id : int
                The id of the object
            - object_type : str
                The type of the object. Valid types include: cass_ncoa,
                container_script, geocode, identity_resolution, dbt_script,
                python_script, r_script, javascript_script, sql_script, project,
                notebook, workflow, template_script, template_report, service, report,
                tableau and service_report.
            - alias : str
                The alias of the object
            - user_id : int
                The id of the user who created the alias
            - display_name : str
                The display name of the Alias object. Defaults to object name if not
                provided.
        """
        ...

    def patch(
        self,
        id: int,
        object_id: int | None = ...,
        object_type: str | None = ...,
        alias: str | None = ...,
        display_name: str | None = ...,
    ) -> Response:
        """Update some attributes of this Alias

        Parameters
        ----------
        id : int
            The id of the Alias object.
        object_id : int, optional
            The id of the object
        object_type : str, optional
            The type of the object. Valid types include: cass_ncoa, container_script,
            geocode, identity_resolution, dbt_script, python_script, r_script,
            javascript_script, sql_script, project, notebook, workflow,
            template_script, template_report, service, report, tableau and
            service_report.
        alias : str, optional
            The alias of the object
        display_name : str, optional
            The display name of the Alias object. Defaults to object name if not
            provided.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The id of the Alias object.
            - object_id : int
                The id of the object
            - object_type : str
                The type of the object. Valid types include: cass_ncoa,
                container_script, geocode, identity_resolution, dbt_script,
                python_script, r_script, javascript_script, sql_script, project,
                notebook, workflow, template_script, template_report, service, report,
                tableau and service_report.
            - alias : str
                The alias of the object
            - user_id : int
                The id of the user who created the alias
            - display_name : str
                The display name of the Alias object. Defaults to object name if not
                provided.
        """
        ...

    def delete(
        self,
        id: int,
    ) -> Response:
        """Delete an alias

        Parameters
        ----------
        id : int
            The id of the Alias object.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def get_object_type(
        self,
        object_type: str,
        alias: str,
    ) -> Response:
        """Get details about an alias within an FCO type

        Parameters
        ----------
        object_type : str
            The type of the object. Valid types include: cass_ncoa, container_script,
            geocode, identity_resolution, dbt_script, python_script, r_script,
            javascript_script, sql_script, project, notebook, workflow,
            template_script, template_report, service, report, tableau and
            service_report.
        alias : str
            The alias of the object

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The id of the Alias object.
            - object_id : int
                The id of the object
            - object_type : str
                The type of the object. Valid types include: cass_ncoa,
                container_script, geocode, identity_resolution, dbt_script,
                python_script, r_script, javascript_script, sql_script, project,
                notebook, workflow, template_script, template_report, service, report,
                tableau and service_report.
            - alias : str
                The alias of the object
            - user_id : int
                The id of the user who created the alias
            - display_name : str
                The display name of the Alias object. Defaults to object name if not
                provided.
        """
        ...

class _Announcements:
    def list(
        self,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List announcements

        Parameters
        ----------
        limit : int, optional
            Number of results to return. Defaults to 10. Maximum allowed is 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to released_at. Must
            be one of: released_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of this announcement
            - subject : str
                The subject of this announcement.
            - body : str
                The body of this announcement.
            - released_at : str (date-time)
                The date and time this announcement was released.
            - created_at : str (date-time)
            - updated_at : str (date-time)
        """
        ...

class _Clusters:
    def list_kubernetes(
        self,
        organization_id: int | None = ...,
        organization_slug: str | None = ...,
        raw_cluster_slug: str | None = ...,
        exclude_inactive_orgs: bool | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Kubernetes Clusters

        Parameters
        ----------
        organization_id : int, optional
            The ID of this cluster's organization. Cannot be used along with the
            organization slug.
        organization_slug : str, optional
            The slug of this cluster's organization. Cannot be used along with the
            organization ID.
        raw_cluster_slug : str, optional
            The slug of this cluster's raw configuration.
        exclude_inactive_orgs : bool, optional
            When true, excludes KubeClusters associated with inactive orgs. Defaults to
            false.
        limit : int, optional
            Number of results to return. Defaults to its maximum of 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to organization_id.
            Must be one of: organization_id, created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to asc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of this cluster.
            - organization_id : str
                The id of this cluster's organization.
            - organization_name : str
                The name of this cluster's organization.
            - organization_slug : str
                The slug of this cluster's organization.
            - raw_cluster_slug : str
                The slug of this cluster's raw configuration.
            - custom_partitions : bool
                Whether this cluster has a custom partition configuration.
            - cluster_partitions : list[dict]
                List of cluster partitions associated with this cluster.

                - cluster_partition_id : int
                    The ID of this cluster partition.
                - name : str
                    The name of the cluster partition.
                - labels : list[str]
                    Labels associated with this partition.
                - instance_configs : list[dict]
                    The instances configured for this cluster partition.

                    - instance_config_id : int
                        The ID of this InstanceConfig.
                    - instance_type : str
                        An EC2 instance type. Possible values include t2.large,
                        m4.xlarge, m4.2xlarge, m4.4xlarge, m5.12xlarge, and
                        c5.18xlarge.
                    - min_instances : int
                        The minimum number of instances of that type in this cluster.
                    - max_instances : int
                        The maximum number of instances of that type in this cluster.
                    - instance_max_memory : int
                        The amount of memory (RAM) available to a single instance of
                        that type in megabytes.
                    - instance_max_cpu : int
                        The number of processor shares available to a single instance
                        of that type in millicores.
                    - instance_max_disk : int
                        The amount of disk available to a single instance of that type
                        in gigabytes.
                    - usage_stats : dict
                        - pending_memory_requested : int
                            The sum of memory requests (in MB) for pending deployments
                            in this instance config.
                        - pending_cpu_requested : int
                            The sum of cpu requests (in millicores) for pending
                            deployments in this instance config.
                        - running_memory_requested : int
                            The sum of memory requests (in MB) for running deployments
                            in this instance config.
                        - running_cpu_requested : int
                            The sum of cpu requests (in millicores) for running
                            deployments in this instance config.
                        - pending_deployments : int
                            The number of pending deployments in this instance config.
                        - running_deployments : int
                            The number of running deployments in this instance config.
                - default_instance_config_id : int
                    The id of the InstanceConfig that is the default for this
                    partition.
            - is_nat_enabled : bool
                Whether this cluster needs a NAT gateway or not.
        """
        ...

    def get_kubernetes(
        self,
        id: int,
        include_usage_stats: bool | None = ...,
    ) -> Response:
        """Describe a Kubernetes Cluster

        Parameters
        ----------
        id : int
        include_usage_stats : bool, optional
            When true, usage stats are returned in instance config objects. Defaults to
            false.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this cluster.
            - organization_id : str
                The id of this cluster's organization.
            - organization_name : str
                The name of this cluster's organization.
            - organization_slug : str
                The slug of this cluster's organization.
            - raw_cluster_slug : str
                The slug of this cluster's raw configuration.
            - custom_partitions : bool
                Whether this cluster has a custom partition configuration.
            - cluster_partitions : list[dict]
                List of cluster partitions associated with this cluster.

                - cluster_partition_id : int
                    The ID of this cluster partition.
                - name : str
                    The name of the cluster partition.
                - labels : list[str]
                    Labels associated with this partition.
                - instance_configs : list[dict]
                    The instances configured for this cluster partition.

                    - instance_config_id : int
                        The ID of this InstanceConfig.
                    - instance_type : str
                        An EC2 instance type. Possible values include t2.large,
                        m4.xlarge, m4.2xlarge, m4.4xlarge, m5.12xlarge, and
                        c5.18xlarge.
                    - min_instances : int
                        The minimum number of instances of that type in this cluster.
                    - max_instances : int
                        The maximum number of instances of that type in this cluster.
                    - instance_max_memory : int
                        The amount of memory (RAM) available to a single instance of
                        that type in megabytes.
                    - instance_max_cpu : int
                        The number of processor shares available to a single instance
                        of that type in millicores.
                    - instance_max_disk : int
                        The amount of disk available to a single instance of that type
                        in gigabytes.
                    - usage_stats : dict
                        - pending_memory_requested : int
                            The sum of memory requests (in MB) for pending deployments
                            in this instance config.
                        - pending_cpu_requested : int
                            The sum of cpu requests (in millicores) for pending
                            deployments in this instance config.
                        - running_memory_requested : int
                            The sum of memory requests (in MB) for running deployments
                            in this instance config.
                        - running_cpu_requested : int
                            The sum of cpu requests (in millicores) for running
                            deployments in this instance config.
                        - pending_deployments : int
                            The number of pending deployments in this instance config.
                        - running_deployments : int
                            The number of running deployments in this instance config.
                - default_instance_config_id : int
                    The id of the InstanceConfig that is the default for this
                    partition.
            - is_nat_enabled : bool
                Whether this cluster needs a NAT gateway or not.
            - hours : float (float)
                The number of hours used this month for this cluster.
        """
        ...

    def list_kubernetes_compute_hours(
        self,
        id: int,
        include_usage_stats: bool | None = ...,
    ) -> Response:
        """List compute hours for a Kubernetes Cluster

        Parameters
        ----------
        id : int
        include_usage_stats : bool, optional
            When true, usage stats are returned in instance config objects. Defaults to
            false.

        Returns
        -------
        :class:`civis.response.Response`
            - total_normalized_hours : int
                The total number of normalized hours used by this cluster.
            - normalized_hours_by_instance_type : str
                Denotes the instance type the normalized hours are attributed to.
            - updated_at : str (time)
            - month_and_year : str
                The month and year the normalized hours are attributed to.
        """
        ...

    def list_kubernetes_deployments(
        self,
        id: int,
        base_type: str | None = ...,
        state: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List the deployments associated with a Kubernetes Cluster

        Parameters
        ----------
        id : int
            The id of the cluster.
        base_type : str, optional
            If specified, return deployments of these base types. It accepts a comma-
            separated list, possible values are 'Notebook', 'Service', 'Run'.
        state : str, optional
            If specified, return deployments in these states. It accepts a comma-
            separated list, possible values are pending, running, terminated, sleeping
        limit : int, optional
            Number of results to return. Defaults to its maximum of 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to created_at. Must be
            one of: created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to asc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The id of this deployment.
            - name : str
                The name of the deployment.
            - base_id : int
                The id of the base object associated with the deployment.
            - base_type : str
                The base type of this deployment.
            - state : str
                The state of the deployment.
            - cpu : int
                The CPU in millicores required by the deployment.
            - memory : int
                The memory in MB required by the deployment.
            - disk_space : int
                The disk space in GB required by the deployment.
            - instance_type : str
                The EC2 instance type requested for the deployment.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - max_memory_usage : float (float)
                If the deployment has finished, the maximum amount of memory used
                during the deployment, in MB.
            - max_cpu_usage : float (float)
                If the deployment has finished, the maximum amount of cpu used during
                the deployment, in millicores.
            - created_at : str (time)
            - updated_at : str (time)
        """
        ...

    def list_kubernetes_deployment_stats(
        self,
        id: int,
    ) -> Response:
        """Get stats about deployments associated with a Kubernetes Cluster

        Parameters
        ----------
        id : int
            The ID of this cluster.

        Returns
        -------
        :class:`civis.response.Response`
            - base_type : str
                The base type of this deployment
            - state : str
                State of the deployment
            - count : int
                Number of deployments of base type and state
            - total_cpu : int
                Total amount of CPU in millicores for deployments of base type and
                state
            - total_memory : int
                Total amount of Memory in megabytes for deployments of base type and
                state
        """
        ...

    def list_kubernetes_partitions(
        self,
        id: int,
        include_usage_stats: bool | None = ...,
    ) -> Response:
        """List Cluster Partitions for given cluster

        Parameters
        ----------
        id : int
        include_usage_stats : bool, optional
            When true, usage stats are returned in instance config objects. Defaults to
            false.

        Returns
        -------
        :class:`civis.response.Response`
            - cluster_partition_id : int
                The ID of this cluster partition.
            - name : str
                The name of the cluster partition.
            - labels : list[str]
                Labels associated with this partition.
            - instance_configs : list[dict]
                The instances configured for this cluster partition.

                - instance_config_id : int
                    The ID of this InstanceConfig.
                - instance_type : str
                    An EC2 instance type. Possible values include t2.large, m4.xlarge,
                    m4.2xlarge, m4.4xlarge, m5.12xlarge, and c5.18xlarge.
                - min_instances : int
                    The minimum number of instances of that type in this cluster.
                - max_instances : int
                    The maximum number of instances of that type in this cluster.
                - instance_max_memory : int
                    The amount of memory (RAM) available to a single instance of that
                    type in megabytes.
                - instance_max_cpu : int
                    The number of processor shares available to a single instance of
                    that type in millicores.
                - instance_max_disk : int
                    The amount of disk available to a single instance of that type in
                    gigabytes.
                - usage_stats : dict
                    - pending_memory_requested : int
                        The sum of memory requests (in MB) for pending deployments in
                        this instance config.
                    - pending_cpu_requested : int
                        The sum of cpu requests (in millicores) for pending deployments
                        in this instance config.
                    - running_memory_requested : int
                        The sum of memory requests (in MB) for running deployments in
                        this instance config.
                    - running_cpu_requested : int
                        The sum of cpu requests (in millicores) for running deployments
                        in this instance config.
                    - pending_deployments : int
                        The number of pending deployments in this instance config.
                    - running_deployments : int
                        The number of running deployments in this instance config.
            - default_instance_config_id : int
                The id of the InstanceConfig that is the default for this partition.
        """
        ...

    def post_kubernetes_partitions(
        self,
        id: int,
        instance_configs: list[dict],
        name: str,
        labels: list[str],
    ) -> Response:
        """Create a Cluster Partition for given cluster

        Parameters
        ----------
        id : int
            The ID of the cluster which this partition belongs to.
        instance_configs : list[dict]
            The instances configured for this cluster partition.

            - instance_type : str
                An EC2 instance type. Possible values include t2.large, m4.xlarge,
                m4.2xlarge, m4.4xlarge, m5.12xlarge, and c5.18xlarge.
            - min_instances : int
                The minimum number of instances of that type in this cluster.
            - max_instances : int
                The maximum number of instances of that type in this cluster.
        name : str
            The name of the cluster partition.
        labels : list[str]
            Labels associated with this partition.

        Returns
        -------
        :class:`civis.response.Response`
            - cluster_partition_id : int
                The ID of this cluster partition.
            - name : str
                The name of the cluster partition.
            - labels : list[str]
                Labels associated with this partition.
            - instance_configs : list[dict]
                The instances configured for this cluster partition.

                - instance_config_id : int
                    The ID of this InstanceConfig.
                - instance_type : str
                    An EC2 instance type. Possible values include t2.large, m4.xlarge,
                    m4.2xlarge, m4.4xlarge, m5.12xlarge, and c5.18xlarge.
                - min_instances : int
                    The minimum number of instances of that type in this cluster.
                - max_instances : int
                    The maximum number of instances of that type in this cluster.
                - instance_max_memory : int
                    The amount of memory (RAM) available to a single instance of that
                    type in megabytes.
                - instance_max_cpu : int
                    The number of processor shares available to a single instance of
                    that type in millicores.
                - instance_max_disk : int
                    The amount of disk available to a single instance of that type in
                    gigabytes.
                - usage_stats : dict
                    - pending_memory_requested : int
                        The sum of memory requests (in MB) for pending deployments in
                        this instance config.
                    - pending_cpu_requested : int
                        The sum of cpu requests (in millicores) for pending deployments
                        in this instance config.
                    - running_memory_requested : int
                        The sum of memory requests (in MB) for running deployments in
                        this instance config.
                    - running_cpu_requested : int
                        The sum of cpu requests (in millicores) for running deployments
                        in this instance config.
                    - pending_deployments : int
                        The number of pending deployments in this instance config.
                    - running_deployments : int
                        The number of running deployments in this instance config.
            - default_instance_config_id : int
                The id of the InstanceConfig that is the default for this partition.
        """
        ...

    def patch_kubernetes_partitions(
        self,
        id: int,
        cluster_partition_id: int,
        instance_configs: list[dict] | None = ...,
        name: str | None = ...,
        labels: list[str] | None = ...,
    ) -> Response:
        """Update a Cluster Partition

        Parameters
        ----------
        id : int
            The ID of the cluster which this partition belongs to.
        cluster_partition_id : int
            The ID of this cluster partition.
        instance_configs : list[dict], optional
            The instances configured for this cluster partition.

            - instance_type : str
                An EC2 instance type. Possible values include t2.large, m4.xlarge,
                m4.2xlarge, m4.4xlarge, m5.12xlarge, and c5.18xlarge.
            - min_instances : int
                The minimum number of instances of that type in this cluster.
            - max_instances : int
                The maximum number of instances of that type in this cluster.
        name : str, optional
            The name of the cluster partition.
        labels : list[str], optional
            Labels associated with this partition.

        Returns
        -------
        :class:`civis.response.Response`
            - cluster_partition_id : int
                The ID of this cluster partition.
            - name : str
                The name of the cluster partition.
            - labels : list[str]
                Labels associated with this partition.
            - instance_configs : list[dict]
                The instances configured for this cluster partition.

                - instance_config_id : int
                    The ID of this InstanceConfig.
                - instance_type : str
                    An EC2 instance type. Possible values include t2.large, m4.xlarge,
                    m4.2xlarge, m4.4xlarge, m5.12xlarge, and c5.18xlarge.
                - min_instances : int
                    The minimum number of instances of that type in this cluster.
                - max_instances : int
                    The maximum number of instances of that type in this cluster.
                - instance_max_memory : int
                    The amount of memory (RAM) available to a single instance of that
                    type in megabytes.
                - instance_max_cpu : int
                    The number of processor shares available to a single instance of
                    that type in millicores.
                - instance_max_disk : int
                    The amount of disk available to a single instance of that type in
                    gigabytes.
                - usage_stats : dict
                    - pending_memory_requested : int
                        The sum of memory requests (in MB) for pending deployments in
                        this instance config.
                    - pending_cpu_requested : int
                        The sum of cpu requests (in millicores) for pending deployments
                        in this instance config.
                    - running_memory_requested : int
                        The sum of memory requests (in MB) for running deployments in
                        this instance config.
                    - running_cpu_requested : int
                        The sum of cpu requests (in millicores) for running deployments
                        in this instance config.
                    - pending_deployments : int
                        The number of pending deployments in this instance config.
                    - running_deployments : int
                        The number of running deployments in this instance config.
            - default_instance_config_id : int
                The id of the InstanceConfig that is the default for this partition.
        """
        ...

    def delete_kubernetes_partitions(
        self,
        id: int,
        cluster_partition_id: int,
    ) -> Response:
        """Delete a Cluster Partition

        Parameters
        ----------
        id : int
            The ID of the cluster which this partition belongs to.
        cluster_partition_id : int
            The ID of this cluster partition.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def get_kubernetes_partitions(
        self,
        id: int,
        cluster_partition_id: int,
        include_usage_stats: bool | None = ...,
    ) -> Response:
        """Describe a Cluster Partition

        Parameters
        ----------
        id : int
            The ID of the cluster which this partition belongs to.
        cluster_partition_id : int
            The ID of this cluster partition.
        include_usage_stats : bool, optional
            When true, usage stats are returned in instance config objects. Defaults to
            false.

        Returns
        -------
        :class:`civis.response.Response`
            - cluster_partition_id : int
                The ID of this cluster partition.
            - name : str
                The name of the cluster partition.
            - labels : list[str]
                Labels associated with this partition.
            - instance_configs : list[dict]
                The instances configured for this cluster partition.

                - instance_config_id : int
                    The ID of this InstanceConfig.
                - instance_type : str
                    An EC2 instance type. Possible values include t2.large, m4.xlarge,
                    m4.2xlarge, m4.4xlarge, m5.12xlarge, and c5.18xlarge.
                - min_instances : int
                    The minimum number of instances of that type in this cluster.
                - max_instances : int
                    The maximum number of instances of that type in this cluster.
                - instance_max_memory : int
                    The amount of memory (RAM) available to a single instance of that
                    type in megabytes.
                - instance_max_cpu : int
                    The number of processor shares available to a single instance of
                    that type in millicores.
                - instance_max_disk : int
                    The amount of disk available to a single instance of that type in
                    gigabytes.
                - usage_stats : dict
                    - pending_memory_requested : int
                        The sum of memory requests (in MB) for pending deployments in
                        this instance config.
                    - pending_cpu_requested : int
                        The sum of cpu requests (in millicores) for pending deployments
                        in this instance config.
                    - running_memory_requested : int
                        The sum of memory requests (in MB) for running deployments in
                        this instance config.
                    - running_cpu_requested : int
                        The sum of cpu requests (in millicores) for running deployments
                        in this instance config.
                    - pending_deployments : int
                        The number of pending deployments in this instance config.
                    - running_deployments : int
                        The number of running deployments in this instance config.
            - default_instance_config_id : int
                The id of the InstanceConfig that is the default for this partition.
        """
        ...

    def get_kubernetes_instance_configs(
        self,
        instance_config_id: int,
        include_usage_stats: bool | None = ...,
    ) -> Response:
        """Describe an Instance Config

        Parameters
        ----------
        instance_config_id : int
            The ID of this instance config.
        include_usage_stats : bool, optional
            When true, usage stats are returned in instance config objects. Defaults to
            false.

        Returns
        -------
        :class:`civis.response.Response`
            - instance_config_id : int
                The ID of this InstanceConfig.
            - instance_type : str
                An EC2 instance type. Possible values include t2.large, m4.xlarge,
                m4.2xlarge, m4.4xlarge, m5.12xlarge, and c5.18xlarge.
            - min_instances : int
                The minimum number of instances of that type in this cluster.
            - max_instances : int
                The maximum number of instances of that type in this cluster.
            - instance_max_memory : int
                The amount of memory (RAM) available to a single instance of that type
                in megabytes.
            - instance_max_cpu : int
                The number of processor shares available to a single instance of that
                type in millicores.
            - instance_max_disk : int
                The amount of disk available to a single instance of that type in
                gigabytes.
            - usage_stats : dict
                - pending_memory_requested : int
                    The sum of memory requests (in MB) for pending deployments in this
                    instance config.
                - pending_cpu_requested : int
                    The sum of cpu requests (in millicores) for pending deployments in
                    this instance config.
                - running_memory_requested : int
                    The sum of memory requests (in MB) for running deployments in this
                    instance config.
                - running_cpu_requested : int
                    The sum of cpu requests (in millicores) for running deployments in
                    this instance config.
                - pending_deployments : int
                    The number of pending deployments in this instance config.
                - running_deployments : int
                    The number of running deployments in this instance config.
            - cluster_partition_id : int
                The ID of this InstanceConfig's cluster partition
            - cluster_partition_name : str
                The name of this InstanceConfig's cluster partition
        """
        ...

    def list_kubernetes_instance_configs_active_workloads(
        self,
        id: int,
        state: str | None = ...,
    ) -> Response:
        """List active workloads in an Instance Config

        Parameters
        ----------
        id : int
            The id of the instance config.
        state : str, optional
            If specified, return workloads in these states. It accepts a comma-
            separated list, possible values are pending, running

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The id of this deployment.
            - base_type : str
                The base type of this deployment.
            - base_id : int
                The id of the base object associated with this deployment.
            - base_object_name : str
                The name of the base object associated with this deployment. Null if
                you do not have permission to read the object.
            - job_type : str
                If the base object is a job run you have permission to read, the type
                of the job. One of "python_script", "r_script", "container_script", or
                "custom_script".
            - job_id : int
                If the base object is a job run you have permission to read, the id of
                the job.
            - job_cancel_requested_at : str (time)
                If the base object is a job run you have permission to read, and it was
                requested to be cancelled, the timestamp of that request.
            - state : str
                The state of this deployment.
            - cpu : int
                The CPU in millicores requested by this deployment.
            - memory : int
                The memory in MB requested by this deployment.
            - disk_space : int
                The disk space in GB requested by this deployment.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
                The timestamp of when the deployment began.
            - cancellable : bool
                True if you have permission to cancel this deployment.
        """
        ...

    def list_kubernetes_instance_configs_user_statistics(
        self,
        instance_config_id: int,
        order: str | None = ...,
        order_dir: str | None = ...,
    ) -> Response:
        """Get statistics about the current users of an Instance Config

        Parameters
        ----------
        instance_config_id : int
            The ID of this instance config.
        order : str, optional
            The field on which to order the result set. Defaults to
            running_deployments. Must be one of pending_memory_requested,
            pending_cpu_requested, running_memory_requested, running_cpu_requested,
            pending_deployments, running_deployments.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending).
            Defaults to desc.

        Returns
        -------
        :class:`civis.response.Response`
            - user_id : str
                The owning user's ID
            - user_name : str
                The owning user's name
            - pending_deployments : int
                The number of deployments belonging to the owning user in "pending"
                state
            - pending_memory_requested : int
                The sum of memory requests (in MB) for deployments belonging to the
                owning user in "pending" state
            - pending_cpu_requested : int
                The sum of CPU requests (in millicores) for deployments belonging to
                the owning user in "pending" state
            - running_deployments : int
                The number of deployments belonging to the owning user in "running"
                state
            - running_memory_requested : int
                The sum of memory requests (in MB) for deployments belonging to the
                owning user in "running" state
            - running_cpu_requested : int
                The sum of CPU requests (in millicores) for deployments belonging to
                the owning user in "running" state
        """
        ...

    def list_kubernetes_instance_configs_historical_graphs(
        self,
        instance_config_id: int,
        timeframe: str | None = ...,
    ) -> Response:
        """Get graphs of historical resource usage in an Instance Config

        Parameters
        ----------
        instance_config_id : int
            The ID of this instance config.
        timeframe : str, optional
            The span of time that the graphs cover. Must be one of 1_day, 1_week.

        Returns
        -------
        :class:`civis.response.Response`
            - cpu_graph_url : str
                URL for the graph of historical CPU usage in this instance config.
            - mem_graph_url : str
                URL for the graph of historical memory usage in this instance config.
        """
        ...

class _Credentials:
    def list_types(
        self,
    ) -> Response:
        """Get list of Credential Types

        Returns
        -------
        :class:`civis.response.Response`
            - types : list[str]
                list of acceptable credential types
        """
        ...

    def list(
        self,
        type: str | None = ...,
        remote_host_id: int | None = ...,
        default: bool | None = ...,
        system_credentials: bool | None = ...,
        users: str | None = ...,
        name: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List credentials

        Parameters
        ----------
        type : str, optional
            The type (or types) of credentials to return. One or more of: Amazon Web
            Services S3, Bitbucket, CASS/NCOA PAF, Certificate, Civis Platform, Custom,
            Database, Google, Github, Salesforce User, Salesforce Client, and
            TableauUser. Specify multiple values as a comma-separated list (e.g.,
            "A,B").
        remote_host_id : int, optional
            The ID of the remote host associated with the credentials to return.
        default : bool, optional
            If true, will return a list with a single credential which is the current
            user's default credential.
        system_credentials : bool, optional
            If true, will only return system credentials. System credentials can only
            be created and viewed by Civis Admins.
        users : str, optional
            A comma-separated list of user ids. If specified, returns set of
            credentials owned by the users that requesting user has at least read
            access on.
        name : str, optional
            If specified, will be used to filter the credentials returned. Will search
            across name and will return any full name containing the search string.
        limit : int, optional
            Number of results to return. Defaults to its maximum of 1000.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to updated_at. Must be
            one of: updated_at, created_at, name.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the credential.
            - name : str
                The name identifying the credential
            - type : str
                The credential's type.
            - username : str
                The username for the credential.
            - description : str
                A long description of the credential.
            - owner : str
                The username of the user who this credential belongs to. Using
                user.username is preferred.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - remote_host_id : int
                The ID of the remote host associated with this credential.
            - remote_host_name : str
                The name of the remote host associated with this credential.
            - state : str
                The U.S. state for the credential. Only for VAN credentials.
            - created_at : str (time)
                The creation time for this credential.
            - updated_at : str (time)
                The last modification time for this credential.
            - default : bool
                Whether or not the credential is a default. Only for Database
                credentials.
            - oauth : bool
                Whether or not the credential is an OAuth credential.
        """
        ...

    def post(
        self,
        type: str,
        username: str,
        password: str,
        name: str | None = ...,
        description: str | None = ...,
        remote_host_id: int | None = ...,
        user_id: int | None = ...,
        state: str | None = ...,
        system_credential: bool | None = ...,
        default: bool | None = ...,
        oauth: bool | None = ...,
    ) -> Response:
        """Create a credential

        Parameters
        ----------
        type : str
            The type of credential. Note: only these credentials can be created or
            edited via this API ["Amazon Web Services S3", "CASS/NCOA PAF",
            "Certificate", "Civis Platform", "Custom", "Database", "Google",
            "Salesforce User", "Salesforce Client", "TableauUser"]
        username : str
            The username for the credential.
        password : str
            The password for the credential.
        name : str, optional
            The name identifying the credential.
        description : str, optional
            A long description of the credential.
        remote_host_id : int, optional
            The ID of the remote host associated with the credential.
        user_id : int, optional
            The ID of the user the credential is created for. Note: This attribute is
            only accepted if you are a Civis Admin User.
        state : str, optional
            The U.S. state for the credential. Only for VAN credentials.
        system_credential : bool, optional
            Boolean flag that sets a credential to be a system credential. System
            credentials can only be created by Civis Admins and will create a
            credential owned by the Civis Robot user.
        default : bool, optional
            Whether or not the credential is a default. Only for Database credentials.
        oauth : bool, optional
            Whether or not the credential is an OAuth credential.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the credential.
            - name : str
                The name identifying the credential
            - type : str
                The credential's type.
            - username : str
                The username for the credential.
            - description : str
                A long description of the credential.
            - owner : str
                The username of the user who this credential belongs to. Using
                user.username is preferred.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - remote_host_id : int
                The ID of the remote host associated with this credential.
            - remote_host_name : str
                The name of the remote host associated with this credential.
            - state : str
                The U.S. state for the credential. Only for VAN credentials.
            - created_at : str (time)
                The creation time for this credential.
            - updated_at : str (time)
                The last modification time for this credential.
            - default : bool
                Whether or not the credential is a default. Only for Database
                credentials.
            - oauth : bool
                Whether or not the credential is an OAuth credential.
        """
        ...

    def put(
        self,
        id: int,
        type: str,
        username: str,
        password: str,
        name: str | None = ...,
        description: str | None = ...,
        remote_host_id: int | None = ...,
        user_id: int | None = ...,
        state: str | None = ...,
        system_credential: bool | None = ...,
        default: bool | None = ...,
        oauth: bool | None = ...,
    ) -> Response:
        """Update an existing credential

        Parameters
        ----------
        id : int
            The ID of the credential.
        type : str
            The type of credential. Note: only these credentials can be created or
            edited via this API ["Amazon Web Services S3", "CASS/NCOA PAF",
            "Certificate", "Civis Platform", "Custom", "Database", "Google",
            "Salesforce User", "Salesforce Client", "TableauUser"]
        username : str
            The username for the credential.
        password : str
            The password for the credential.
        name : str, optional
            The name identifying the credential.
        description : str, optional
            A long description of the credential.
        remote_host_id : int, optional
            The ID of the remote host associated with the credential.
        user_id : int, optional
            The ID of the user the credential is created for. Note: This attribute is
            only accepted if you are a Civis Admin User.
        state : str, optional
            The U.S. state for the credential. Only for VAN credentials.
        system_credential : bool, optional
            Boolean flag that sets a credential to be a system credential. System
            credentials can only be created by Civis Admins and will create a
            credential owned by the Civis Robot user.
        default : bool, optional
            Whether or not the credential is a default. Only for Database credentials.
        oauth : bool, optional
            Whether or not the credential is an OAuth credential.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the credential.
            - name : str
                The name identifying the credential
            - type : str
                The credential's type.
            - username : str
                The username for the credential.
            - description : str
                A long description of the credential.
            - owner : str
                The username of the user who this credential belongs to. Using
                user.username is preferred.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - remote_host_id : int
                The ID of the remote host associated with this credential.
            - remote_host_name : str
                The name of the remote host associated with this credential.
            - state : str
                The U.S. state for the credential. Only for VAN credentials.
            - created_at : str (time)
                The creation time for this credential.
            - updated_at : str (time)
                The last modification time for this credential.
            - default : bool
                Whether or not the credential is a default. Only for Database
                credentials.
            - oauth : bool
                Whether or not the credential is an OAuth credential.
        """
        ...

    def patch(
        self,
        id: int,
        name: str | None = ...,
        type: str | None = ...,
        description: str | None = ...,
        username: str | None = ...,
        password: str | None = ...,
        remote_host_id: int | None = ...,
        user_id: int | None = ...,
        state: str | None = ...,
        system_credential: bool | None = ...,
        default: bool | None = ...,
        oauth: bool | None = ...,
    ) -> Response:
        """Update some attributes of a credential

        Parameters
        ----------
        id : int
            The ID of the credential.
        name : str, optional
            The name identifying the credential.
        type : str, optional
            The type of credential. Note: only these credentials can be created or
            edited via this API ["Amazon Web Services S3", "CASS/NCOA PAF",
            "Certificate", "Civis Platform", "Custom", "Database", "Google",
            "Salesforce User", "Salesforce Client", "TableauUser"]
        description : str, optional
            A long description of the credential.
        username : str, optional
            The username for the credential.
        password : str, optional
            The password for the credential.
        remote_host_id : int, optional
            The ID of the remote host associated with the credential.
        user_id : int, optional
            The ID of the user the credential is created for. Note: This attribute is
            only accepted if you are a Civis Admin User.
        state : str, optional
            The U.S. state for the credential. Only for VAN credentials.
        system_credential : bool, optional
            Boolean flag that sets a credential to be a system credential. System
            credentials can only be created by Civis Admins and will create a
            credential owned by the Civis Robot user.
        default : bool, optional
            Whether or not the credential is a default. Only for Database credentials.
        oauth : bool, optional
            Whether or not the credential is an OAuth credential.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the credential.
            - name : str
                The name identifying the credential
            - type : str
                The credential's type.
            - username : str
                The username for the credential.
            - description : str
                A long description of the credential.
            - owner : str
                The username of the user who this credential belongs to. Using
                user.username is preferred.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - remote_host_id : int
                The ID of the remote host associated with this credential.
            - remote_host_name : str
                The name of the remote host associated with this credential.
            - state : str
                The U.S. state for the credential. Only for VAN credentials.
            - created_at : str (time)
                The creation time for this credential.
            - updated_at : str (time)
                The last modification time for this credential.
            - default : bool
                Whether or not the credential is a default. Only for Database
                credentials.
            - oauth : bool
                Whether or not the credential is an OAuth credential.
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Get a credential

        Parameters
        ----------
        id : int
            The ID of the credential.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the credential.
            - name : str
                The name identifying the credential
            - type : str
                The credential's type.
            - username : str
                The username for the credential.
            - description : str
                A long description of the credential.
            - owner : str
                The username of the user who this credential belongs to. Using
                user.username is preferred.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - remote_host_id : int
                The ID of the remote host associated with this credential.
            - remote_host_name : str
                The name of the remote host associated with this credential.
            - state : str
                The U.S. state for the credential. Only for VAN credentials.
            - created_at : str (time)
                The creation time for this credential.
            - updated_at : str (time)
                The last modification time for this credential.
            - default : bool
                Whether or not the credential is a default. Only for Database
                credentials.
            - oauth : bool
                Whether or not the credential is an OAuth credential.
        """
        ...

    def delete(
        self,
        id: int,
    ) -> Response:
        """Delete a credential

        Parameters
        ----------
        id : int
            The ID of the credential.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def post_authenticate(
        self,
        url: str,
        remote_host_type: str,
        username: str,
        password: str,
    ) -> Response:
        """Authenticate against a remote host

        Parameters
        ----------
        url : str
            The URL to your host.
        remote_host_type : str
            The type of remote host. One of: RemoteHostTypes::Bigquery,
            RemoteHostTypes::Bitbucket, RemoteHostTypes::GitSSH,
            RemoteHostTypes::Github, RemoteHostTypes::GoogleDoc, RemoteHostTypes::JDBC,
            RemoteHostTypes::Postgres, RemoteHostTypes::Redshift,
            RemoteHostTypes::S3Storage, and RemoteHostTypes::Salesforce
        username : str
            The username for the credential.
        password : str
            The password for the credential.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the credential.
            - name : str
                The name identifying the credential
            - type : str
                The credential's type.
            - username : str
                The username for the credential.
            - description : str
                A long description of the credential.
            - owner : str
                The username of the user who this credential belongs to. Using
                user.username is preferred.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - remote_host_id : int
                The ID of the remote host associated with this credential.
            - remote_host_name : str
                The name of the remote host associated with this credential.
            - state : str
                The U.S. state for the credential. Only for VAN credentials.
            - created_at : str (time)
                The creation time for this credential.
            - updated_at : str (time)
                The last modification time for this credential.
            - default : bool
                Whether or not the credential is a default. Only for Database
                credentials.
            - oauth : bool
                Whether or not the credential is an OAuth credential.
        """
        ...

    def post_temporary(
        self,
        id: int,
        duration: int | None = ...,
    ) -> Response:
        """Generate a temporary credential for accessing S3

        Parameters
        ----------
        id : int
            The ID of the credential.
        duration : int, optional
            The number of seconds the temporary credential should be valid. Defaults to
            15 minutes. Must not be less than 15 minutes or greater than 36 hours.

        Returns
        -------
        :class:`civis.response.Response`
            - access_key : str
                The identifier of the credential.
            - secret_access_key : str
                The secret part of the credential.
            - session_token : str
                The session token identifier.
        """
        ...

    def list_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

class _Databases:
    def list(
        self,
    ) -> Response:
        """List databases

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the database.
            - name : str
                The name of the database.
            - adapter : str
                The type of the database.
            - cluster_identifier : str
                The cluster identifier of the database.
            - managed : bool
                True if the database is Civis-managed. False otherwise.
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Show database information

        Parameters
        ----------
        id : int
            The ID for the database.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the database.
            - name : str
                The name of the database.
            - adapter : str
                The type of the database.
            - cluster_identifier : str
                The cluster identifier of the database.
            - managed : bool
                True if the database is Civis-managed. False otherwise.
        """
        ...

    def list_schemas(
        self,
        id: int,
        name: str | None = ...,
        credential_id: int | None = ...,
    ) -> Response:
        """List schemas in this database

        Parameters
        ----------
        id : int
            The ID of the database.
        name : str, optional
            If specified, will be used to filter the schemas returned.Substring
            matching is supported (e.g., "name=schema" will return both "schema1" and
            "schema2"). Does not apply to BigQuery databases.
        credential_id : int, optional
            If provided, schemas will be filtered based on the given credential.

        Returns
        -------
        :class:`civis.response.Response`
            - schema : str
                The name of a schema.
        """
        ...

    def list_schemas_tables(
        self,
        id: int,
        schema_name: str,
        credential_id: int | None = ...,
    ) -> Response:
        """List tables in this schema

        Parameters
        ----------
        id : int
            The ID of the database
        schema_name : str
            The name of the schema
        credential_id : int, optional
            If provided, schemas will be filtered based on the given credential.

        Returns
        -------
        :class:`civis.response.Response`
            - name : str
                The name of the table.
            - schema : str
                The name of the schema containing the table.
            - is_view : bool
                True if this table represents a view. False if it represents a regular
                table.
            - database_id : int
                The ID of the database server.
        """
        ...

    def get_schemas_tables(
        self,
        id: int,
        schema_name: str,
        table_name: str,
        credential_id: int | None = ...,
    ) -> Response:
        """Show basic table info

        Parameters
        ----------
        id : int
            The ID of the database
        schema_name : str
            The name of the schema
        table_name : str
            The name of the table
        credential_id : int, optional
            If provided, schemas will be filtered based on the given credential.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the table.
            - database_id : int
                The ID of the database.
            - schema : str
                The name of the schema containing the table.
            - name : str
                Name of the table.
            - description : str
                The description of the table, as specified by the table owner
            - is_view : bool
                True if this table represents a view. False if it represents a regular
                table.
            - row_count : int
                The number of rows in the table.
            - column_count : int
                The number of columns in the table.
            - size_mb : float (float)
                The size of the table in megabytes.
            - owner : str
                The database username of the table's owner.
            - distkey : str
                The column used as the Amazon Redshift distkey.
            - sortkeys : str
                The column used as the Amazon Redshift sortkey.
            - refresh_status : str
                How up-to-date the table's statistics on row counts, null counts,
                distinct counts, and values distributions are. One of: refreshing,
                stale, or current.
            - last_refresh : str (date-time)
                The time of the last statistics refresh.
            - data_updated_at : str (date-time)
                The last time that Civis Platform captured a change in this table.Only
                applicable for Redshift tables; please see the Civis help desk for more
                info.
            - schema_updated_at : str (date-time)
                The last time that Civis Platform captured a change to the table
                attributes/structure.Only applicable for Redshift tables; please see
                the Civis help desk for more info.
            - refresh_id : str
                The ID of the most recent statistics refresh.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - primary_keys : list[str]
                The primary keys for this table.
            - last_modified_keys : list[str]
                The columns indicating an entry's modification status for this table.
            - table_tags : list[dict]
                The table tags associated with this table.

                - id : int
                    Table Tag ID
                - name : str
                    Table Tag Name
            - ontology_mapping : dict
                The ontology-key to column-name mapping.  See /ontology for the list of
                valid ontology keys.
            - columns : list[dict]
                - name : str
                    Name of the column.
                - civis_data_type : str
                    The generic data type of the column (ex. "string"). Since this is
                    database-agnostic, it may be helpful when loading data to R/Python.
                - sql_type : str
                    The database-specific SQL type of the column (ex. "varchar(30)").
                - sample_values : list[str]
                    A sample of values from the column.
                - encoding : str
                    The compression encoding for this columnSee: http://docs.aws.amazon
                    .com/redshift/latest/dg/c_Compression_encodings.html
                - description : str
                    The description of the column, as specified by the table owner
                - order : int
                    Relative position of the column in the table.
                - min_value : str
                    Smallest value in the column.
                - max_value : str
                    Largest value in the column.
                - avg_value : float (float)
                    This parameter is deprecated.
                - stddev : float (float)
                    This parameter is deprecated.
                - value_distribution_percent : dict
                    A mapping between each value in the column and the percentage of
                    rows with that value.Only present for tables with fewer than
                    approximately 25,000,000 rows and for columns with fewer than
                    twenty distinct values.
                - coverage_count : int
                    Number of non-null values in the column.
                - null_count : int
                    Number of null values in the column.
                - possible_dependent_variable_types : list[str]
                    Possible dependent variable types the column may be used to model.
                    Null if it may not be used as a dependent variable.
                - useable_as_independent_variable : bool
                    Whether the column may be used as an independent variable to train
                    a model.
                - useable_as_primary_key : bool
                    Whether the column may be used as an primary key to identify table
                    rows.
                - value_distribution : dict
                    An object mapping distinct values in the column to the number of
                    times they appear in the column
                - distinct_count : int
                    Number of distinct values in the column. NULL values are counted
                    and treated as a single distinct value.
            - joins : list[dict]
                - id : int
                - left_table_id : int
                - left_identifier : str
                - right_table_id : int
                - right_identifier : str
                - on : str
                - left_join : bool
                - created_at : str (time)
                - updated_at : str (time)
            - multipart_key : list[str]
            - enhancements : list[dict]
                - type : str
                - created_at : str (time)
                - updated_at : str (time)
                - join_id : int
            - view_def : str
            - table_def : str
            - outgoing_table_matches : list[dict]
                - source_table_id : int
                    Source table
                - target_type : str
                    Target type
                - target_id : int
                    Target ID
                - target : dict
                    - name : str
                - job : dict
                    - id : int
                    - name : str
                    - type : str
                    - from_template_id : int
                    - state : str
                        Whether the job is idle, queued, running, cancelled, or failed.
                    - created_at : str (date-time)
                    - updated_at : str (date-time)
                    - runs : list[dict]
                        Information about the most recent runs of the job.

                        - id : int
                        - state : str
                        - created_at : str (time)
                            The time that the run was queued.
                        - started_at : str (time)
                            The time that the run started.
                        - finished_at : str (time)
                            The time that the run completed.
                        - error : str
                            The error message for this run, if present.
                    - last_run : dict
                        - id : int
                        - state : str
                        - created_at : str (time)
                            The time that the run was queued.
                        - started_at : str (time)
                            The time that the run started.
                        - finished_at : str (time)
                            The time that the run completed.
                        - error : str
                            The error message for this run, if present.
                    - hidden : bool
                        The hidden status of the item.
                    - match_options : dict
                        - max_matches : int
                        - threshold : str
        """
        ...

    def patch_schemas_tables(
        self,
        id: int,
        schema_name: str,
        table_name: str,
        credential_id: int | None = ...,
        description: str | None = ...,
    ) -> Response:
        """Update a table

        Parameters
        ----------
        id : int
            The ID of the database
        schema_name : str
            The name of the schema
        table_name : str
            The name of the table
        credential_id : int, optional
            If provided, schemas will be filtered based on the given credential.
        description : str, optional
            The user-defined description of the table.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the table.
            - database_id : int
                The ID of the database.
            - schema : str
                The name of the schema containing the table.
            - name : str
                Name of the table.
            - description : str
                The description of the table, as specified by the table owner
            - is_view : bool
                True if this table represents a view. False if it represents a regular
                table.
            - row_count : int
                The number of rows in the table.
            - column_count : int
                The number of columns in the table.
            - size_mb : float (float)
                The size of the table in megabytes.
            - owner : str
                The database username of the table's owner.
            - distkey : str
                The column used as the Amazon Redshift distkey.
            - sortkeys : str
                The column used as the Amazon Redshift sortkey.
            - refresh_status : str
                How up-to-date the table's statistics on row counts, null counts,
                distinct counts, and values distributions are. One of: refreshing,
                stale, or current.
            - last_refresh : str (date-time)
                The time of the last statistics refresh.
            - data_updated_at : str (date-time)
                The last time that Civis Platform captured a change in this table.Only
                applicable for Redshift tables; please see the Civis help desk for more
                info.
            - schema_updated_at : str (date-time)
                The last time that Civis Platform captured a change to the table
                attributes/structure.Only applicable for Redshift tables; please see
                the Civis help desk for more info.
            - refresh_id : str
                The ID of the most recent statistics refresh.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - primary_keys : list[str]
                The primary keys for this table.
            - last_modified_keys : list[str]
                The columns indicating an entry's modification status for this table.
            - table_tags : list[dict]
                The table tags associated with this table.

                - id : int
                    Table Tag ID
                - name : str
                    Table Tag Name
            - ontology_mapping : dict
                The ontology-key to column-name mapping.  See /ontology for the list of
                valid ontology keys.
            - columns : list[dict]
                - name : str
                    Name of the column.
                - civis_data_type : str
                    The generic data type of the column (ex. "string"). Since this is
                    database-agnostic, it may be helpful when loading data to R/Python.
                - sql_type : str
                    The database-specific SQL type of the column (ex. "varchar(30)").
                - sample_values : list[str]
                    A sample of values from the column.
                - encoding : str
                    The compression encoding for this columnSee: http://docs.aws.amazon
                    .com/redshift/latest/dg/c_Compression_encodings.html
                - description : str
                    The description of the column, as specified by the table owner
                - order : int
                    Relative position of the column in the table.
                - min_value : str
                    Smallest value in the column.
                - max_value : str
                    Largest value in the column.
                - avg_value : float (float)
                    This parameter is deprecated.
                - stddev : float (float)
                    This parameter is deprecated.
                - value_distribution_percent : dict
                    A mapping between each value in the column and the percentage of
                    rows with that value.Only present for tables with fewer than
                    approximately 25,000,000 rows and for columns with fewer than
                    twenty distinct values.
                - coverage_count : int
                    Number of non-null values in the column.
                - null_count : int
                    Number of null values in the column.
                - possible_dependent_variable_types : list[str]
                    Possible dependent variable types the column may be used to model.
                    Null if it may not be used as a dependent variable.
                - useable_as_independent_variable : bool
                    Whether the column may be used as an independent variable to train
                    a model.
                - useable_as_primary_key : bool
                    Whether the column may be used as an primary key to identify table
                    rows.
                - value_distribution : dict
                    An object mapping distinct values in the column to the number of
                    times they appear in the column
                - distinct_count : int
                    Number of distinct values in the column. NULL values are counted
                    and treated as a single distinct value.
            - joins : list[dict]
                - id : int
                - left_table_id : int
                - left_identifier : str
                - right_table_id : int
                - right_identifier : str
                - on : str
                - left_join : bool
                - created_at : str (time)
                - updated_at : str (time)
            - multipart_key : list[str]
            - enhancements : list[dict]
                - type : str
                - created_at : str (time)
                - updated_at : str (time)
                - join_id : int
            - view_def : str
            - table_def : str
            - outgoing_table_matches : list[dict]
                - source_table_id : int
                    Source table
                - target_type : str
                    Target type
                - target_id : int
                    Target ID
                - target : dict
                    - name : str
                - job : dict
                    - id : int
                    - name : str
                    - type : str
                    - from_template_id : int
                    - state : str
                        Whether the job is idle, queued, running, cancelled, or failed.
                    - created_at : str (date-time)
                    - updated_at : str (date-time)
                    - runs : list[dict]
                        Information about the most recent runs of the job.

                        - id : int
                        - state : str
                        - created_at : str (time)
                            The time that the run was queued.
                        - started_at : str (time)
                            The time that the run started.
                        - finished_at : str (time)
                            The time that the run completed.
                        - error : str
                            The error message for this run, if present.
                    - last_run : dict
                        - id : int
                        - state : str
                        - created_at : str (time)
                            The time that the run was queued.
                        - started_at : str (time)
                            The time that the run started.
                        - finished_at : str (time)
                            The time that the run completed.
                        - error : str
                            The error message for this run, if present.
                    - hidden : bool
                        The hidden status of the item.
                    - match_options : dict
                        - max_matches : int
                        - threshold : str
        """
        ...

    def post_schemas_scan(
        self,
        id: int,
        schema: str,
        stats_priority: str | None = ...,
    ) -> Response:
        """Creates and enqueues a schema scanner job

        Parameters
        ----------
        id : int
            The ID of the database.
        schema : str
            The name of the schema.
        stats_priority : str, optional
            When to sync table statistics for every table in the schema. Valid options
            are the following. Option: 'flag' means to flag stats for the next
            scheduled run of a full table scan on the database. Option: 'block' means
            to block this job on stats syncing. Option: 'queue' means to queue a
            separate job for syncing stats and do not block this job on the queued job.
            Defaults to 'flag'

        Returns
        -------
        :class:`civis.response.Response`
            - job_id : int
                The ID of the job created.
            - run_id : int
                The ID of the run created.
        """
        ...

    def get_table_privileges_schema_name(
        self,
        id: int,
        schema_name: str,
        table_name: str,
        credential_id: int | None = ...,
    ) -> Response:
        """Show table privileges

        Parameters
        ----------
        id : int
            The ID of the database
        schema_name : str
            The name of the schema
        table_name : str
            The name of the table
        credential_id : int, optional
            If provided, schemas will be filtered based on the given credential.

        Returns
        -------
        :class:`civis.response.Response`
            - grantee : str
                Name of the granted user or group
            - grantee_type : str
                User or group
            - privileges : list[str]
                Privileges that the grantee has on this resource
            - grantable_privileges : list[str]
                Privileges that the grantee can grant to others for this resource
        """
        ...

    def get_schema_privileges(
        self,
        id: int,
        schema_name: str,
        credential_id: int | None = ...,
    ) -> Response:
        """Show schema privileges

        Parameters
        ----------
        id : int
            The ID of the database
        schema_name : str
            The name of the schema
        credential_id : int, optional
            If provided, schemas will be filtered based on the given credential.

        Returns
        -------
        :class:`civis.response.Response`
            - grantee : str
                Name of the granted user or group
            - grantee_type : str
                User or group
            - privileges : list[str]
                Privileges that the grantee has on this resource
            - grantable_privileges : list[str]
                Privileges that the grantee can grant to others for this resource
        """
        ...

    def list_users(
        self,
        id: int,
        active: bool | None = ...,
    ) -> Response:
        """Show list of database users

        Parameters
        ----------
        id : int
            The ID of the database.
        active : bool, optional
            If true returns active users. If false returns deactivated users. If
            omitted returns all users.

        Returns
        -------
        :class:`civis.response.Response`
            - username : str
                Username
            - active : bool
                Whether the user is active or deactivated
        """
        ...

    def list_groups(
        self,
        id: int,
    ) -> Response:
        """List groups in the specified database

        Parameters
        ----------
        id : int
            The ID for the database.

        Returns
        -------
        :class:`civis.response.Response`
            - group_name : str
                The name of the group.
            - members : list[str]
                The members of the group.
        """
        ...

    def list_whitelist_ips(
        self,
        id: int,
    ) -> Response:
        """List whitelisted IPs for the specified database

        Parameters
        ----------
        id : int
            The ID for the database.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this whitelisted IP address.
            - remote_host_id : int
                The ID of the database this rule is applied to.
            - security_group_id : str
                The ID of the security group this rule is applied to.
            - subnet_mask : str
                The subnet mask that is allowed by this rule.
            - created_at : str (time)
                The time this rule was created.
            - updated_at : str (time)
                The time this rule was last updated.
        """
        ...

    def get_whitelist_ips(
        self,
        id: int,
        whitelisted_ip_id: int,
    ) -> Response:
        """View details about a whitelisted IP

        Parameters
        ----------
        id : int
            The ID of the database this rule is applied to.
        whitelisted_ip_id : int
            The ID of this whitelisted IP address.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this whitelisted IP address.
            - remote_host_id : int
                The ID of the database this rule is applied to.
            - security_group_id : str
                The ID of the security group this rule is applied to.
            - subnet_mask : str
                The subnet mask that is allowed by this rule.
            - authorized_by : str
                The user who authorized this rule.
            - is_active : bool
                True if the rule is applied, false if it has been revoked.
            - created_at : str (time)
                The time this rule was created.
            - updated_at : str (time)
                The time this rule was last updated.
        """
        ...

    def list_advanced_settings(
        self,
        id: int,
    ) -> Response:
        """Get the advanced settings for this database

        Parameters
        ----------
        id : int
            The ID of the database this advanced settings object belongs to.

        Returns
        -------
        :class:`civis.response.Response`
            - export_caching_enabled : bool
                Whether or not caching is enabled for export jobs run on this database
                server.
        """
        ...

    def patch_advanced_settings(
        self,
        id: int,
        export_caching_enabled: bool | None = ...,
    ) -> Response:
        """Update the advanced settings for this database

        Parameters
        ----------
        id : int
            The ID of the database this advanced settings object belongs to.
        export_caching_enabled : bool, optional
            Whether or not caching is enabled for export jobs run on this database
            server.

        Returns
        -------
        :class:`civis.response.Response`
            - export_caching_enabled : bool
                Whether or not caching is enabled for export jobs run on this database
                server.
        """
        ...

    def put_advanced_settings(
        self,
        id: int,
        export_caching_enabled: bool,
    ) -> Response:
        """Edit the advanced settings for this database

        Parameters
        ----------
        id : int
            The ID of the database this advanced settings object belongs to.
        export_caching_enabled : bool
            Whether or not caching is enabled for export jobs run on this database
            server.

        Returns
        -------
        :class:`civis.response.Response`
            - export_caching_enabled : bool
                Whether or not caching is enabled for export jobs run on this database
                server.
        """
        ...

    def get_status_graphs_timeframe(
        self,
        id: int,
        timeframe: str,
    ) -> Response:
        """Get the status graphs for this database

        Parameters
        ----------
        id : int
            The ID of the database.
        timeframe : str
            The span of time that the graphs cover. Must be one of 1_hour, 4_hours,
            1_day, 2_days, 1_week.

        Returns
        -------
        :class:`civis.response.Response`
            - cpu_graph_url : str
                URL for the aws redshift cpu utliization graph.
            - disk_graph_url : str
                URL for the aws redshift disk usage graph.
            - queue_length_graph_url : str
                URL for the aws redshift queue length graph.
            - status_graph_url : str
                URL for the aws redshift status graph.
            - maintenance_graph_url : str
                URL for the aws redshift maintenance graph.
            - query_duration_graph_url : str
                URL for the aws redshift table count graph.
        """
        ...

class _Endpoints:
    def list(
        self,
    ) -> Response:
        """List API endpoints

        Returns
        -------
        None
            Response code 200: success
        """
        ...

class _Enhancements:
    def post_civis_data_match(
        self,
        name: str,
        input_field_mapping: dict,
        input_table: dict,
        match_target_id: int,
        output_table: dict,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        max_matches: int | None = ...,
        threshold: float | None = ...,
        archived: bool | None = ...,
        parent_id: int | None = ...,
    ) -> Response:
        """Create a Civis Data Match Enhancement

        Parameters
        ----------
        name : str
            The name of the enhancement job.
        input_field_mapping : dict
            The field (i.e., column) mapping for the input table. See
            https://api.civisanalytics.com/enhancements/field-mapping for a list of
            valid field types and descriptions. Each field type should be mapped to a
            string specifying a column name in the input table. For field types that
            support multiple values (e.g., the "phone" field), a list of column names
            can be provided (e.g., {"phone": ["home_phone", "mobile_phone"], ...}).
        input_table : dict
            - database_name : str
                The Redshift database name for the table.
            - schema : str
                The schema name for the table.
            - table : str
                The table name.
        match_target_id : int
            The ID of the Civis Data match target. See /match_targets for IDs.
        output_table : dict
            - database_name : str
                The Redshift database name for the table.
            - schema : str
                The schema name for the table.
            - table : str
                The table name.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        max_matches : int, optional
            The maximum number of matches per record in the input table to return. Must
            be between 0 and 10. 0 returns all matches.
        threshold : float (float), optional
            The score threshold (between 0 and 1). Matches below this threshold will
            not be returned. The default value is 0.5.
        archived : bool, optional
            Whether the Civis Data Match Job has been archived.
        parent_id : int, optional
            Parent ID that triggers this enhancement.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - input_field_mapping : dict
                The field (i.e., column) mapping for the input table. See
                https://api.civisanalytics.com/enhancements/field-mapping for a list of
                valid field types and descriptions. Each field type should be mapped to
                a string specifying a column name in the input table. For field types
                that support multiple values (e.g., the "phone" field), a list of
                column names can be provided (e.g., {"phone": ["home_phone",
                "mobile_phone"], ...}).
            - input_table : dict
                - database_name : str
                    The Redshift database name for the table.
                - schema : str
                    The schema name for the table.
                - table : str
                    The table name.
            - match_target_id : int
                The ID of the Civis Data match target. See /match_targets for IDs.
            - output_table : dict
                - database_name : str
                    The Redshift database name for the table.
                - schema : str
                    The schema name for the table.
                - table : str
                    The table name.
            - max_matches : int
                The maximum number of matches per record in the input table to return.
                Must be between 0 and 10. 0 returns all matches.
            - threshold : float (float)
                The score threshold (between 0 and 1). Matches below this threshold
                will not be returned. The default value is 0.5.
            - archived : bool
                Whether the Civis Data Match Job has been archived.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - parent_id : int
                Parent ID that triggers this enhancement.
        """
        ...

    def get_civis_data_match(
        self,
        id: int,
    ) -> Response:
        """Get a Civis Data Match Enhancement

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - input_field_mapping : dict
                The field (i.e., column) mapping for the input table. See
                https://api.civisanalytics.com/enhancements/field-mapping for a list of
                valid field types and descriptions. Each field type should be mapped to
                a string specifying a column name in the input table. For field types
                that support multiple values (e.g., the "phone" field), a list of
                column names can be provided (e.g., {"phone": ["home_phone",
                "mobile_phone"], ...}).
            - input_table : dict
                - database_name : str
                    The Redshift database name for the table.
                - schema : str
                    The schema name for the table.
                - table : str
                    The table name.
            - match_target_id : int
                The ID of the Civis Data match target. See /match_targets for IDs.
            - output_table : dict
                - database_name : str
                    The Redshift database name for the table.
                - schema : str
                    The schema name for the table.
                - table : str
                    The table name.
            - max_matches : int
                The maximum number of matches per record in the input table to return.
                Must be between 0 and 10. 0 returns all matches.
            - threshold : float (float)
                The score threshold (between 0 and 1). Matches below this threshold
                will not be returned. The default value is 0.5.
            - archived : bool
                Whether the Civis Data Match Job has been archived.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - parent_id : int
                Parent ID that triggers this enhancement.
        """
        ...

    def put_civis_data_match(
        self,
        id: int,
        name: str,
        input_field_mapping: dict,
        input_table: dict,
        match_target_id: int,
        output_table: dict,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        max_matches: int | None = ...,
        threshold: float | None = ...,
        archived: bool | None = ...,
        parent_id: int | None = ...,
    ) -> Response:
        """Replace all attributes of this Civis Data Match Enhancement

        Parameters
        ----------
        id : int
            The ID for the enhancement.
        name : str
            The name of the enhancement job.
        input_field_mapping : dict
            The field (i.e., column) mapping for the input table. See
            https://api.civisanalytics.com/enhancements/field-mapping for a list of
            valid field types and descriptions. Each field type should be mapped to a
            string specifying a column name in the input table. For field types that
            support multiple values (e.g., the "phone" field), a list of column names
            can be provided (e.g., {"phone": ["home_phone", "mobile_phone"], ...}).
        input_table : dict
            - database_name : str
                The Redshift database name for the table.
            - schema : str
                The schema name for the table.
            - table : str
                The table name.
        match_target_id : int
            The ID of the Civis Data match target. See /match_targets for IDs.
        output_table : dict
            - database_name : str
                The Redshift database name for the table.
            - schema : str
                The schema name for the table.
            - table : str
                The table name.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        max_matches : int, optional
            The maximum number of matches per record in the input table to return. Must
            be between 0 and 10. 0 returns all matches.
        threshold : float (float), optional
            The score threshold (between 0 and 1). Matches below this threshold will
            not be returned. The default value is 0.5.
        archived : bool, optional
            Whether the Civis Data Match Job has been archived.
        parent_id : int, optional
            Parent ID that triggers this enhancement.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - input_field_mapping : dict
                The field (i.e., column) mapping for the input table. See
                https://api.civisanalytics.com/enhancements/field-mapping for a list of
                valid field types and descriptions. Each field type should be mapped to
                a string specifying a column name in the input table. For field types
                that support multiple values (e.g., the "phone" field), a list of
                column names can be provided (e.g., {"phone": ["home_phone",
                "mobile_phone"], ...}).
            - input_table : dict
                - database_name : str
                    The Redshift database name for the table.
                - schema : str
                    The schema name for the table.
                - table : str
                    The table name.
            - match_target_id : int
                The ID of the Civis Data match target. See /match_targets for IDs.
            - output_table : dict
                - database_name : str
                    The Redshift database name for the table.
                - schema : str
                    The schema name for the table.
                - table : str
                    The table name.
            - max_matches : int
                The maximum number of matches per record in the input table to return.
                Must be between 0 and 10. 0 returns all matches.
            - threshold : float (float)
                The score threshold (between 0 and 1). Matches below this threshold
                will not be returned. The default value is 0.5.
            - archived : bool
                Whether the Civis Data Match Job has been archived.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - parent_id : int
                Parent ID that triggers this enhancement.
        """
        ...

    def patch_civis_data_match(
        self,
        id: int,
        name: str | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        input_field_mapping: dict | None = ...,
        input_table: dict | None = ...,
        match_target_id: int | None = ...,
        output_table: dict | None = ...,
        max_matches: int | None = ...,
        threshold: float | None = ...,
        archived: bool | None = ...,
        parent_id: int | None = ...,
    ) -> Response:
        """Update some attributes of this Civis Data Match Enhancement

        Parameters
        ----------
        id : int
            The ID for the enhancement.
        name : str, optional
            The name of the enhancement job.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        input_field_mapping : dict, optional
            The field (i.e., column) mapping for the input table. See
            https://api.civisanalytics.com/enhancements/field-mapping for a list of
            valid field types and descriptions. Each field type should be mapped to a
            string specifying a column name in the input table. For field types that
            support multiple values (e.g., the "phone" field), a list of column names
            can be provided (e.g., {"phone": ["home_phone", "mobile_phone"], ...}).
        input_table : dict, optional
            - database_name : str
                The Redshift database name for the table.
            - schema : str
                The schema name for the table.
            - table : str
                The table name.
        match_target_id : int, optional
            The ID of the Civis Data match target. See /match_targets for IDs.
        output_table : dict, optional
            - database_name : str
                The Redshift database name for the table.
            - schema : str
                The schema name for the table.
            - table : str
                The table name.
        max_matches : int, optional
            The maximum number of matches per record in the input table to return. Must
            be between 0 and 10. 0 returns all matches.
        threshold : float (float), optional
            The score threshold (between 0 and 1). Matches below this threshold will
            not be returned. The default value is 0.5.
        archived : bool, optional
            Whether the Civis Data Match Job has been archived.
        parent_id : int, optional
            Parent ID that triggers this enhancement.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - input_field_mapping : dict
                The field (i.e., column) mapping for the input table. See
                https://api.civisanalytics.com/enhancements/field-mapping for a list of
                valid field types and descriptions. Each field type should be mapped to
                a string specifying a column name in the input table. For field types
                that support multiple values (e.g., the "phone" field), a list of
                column names can be provided (e.g., {"phone": ["home_phone",
                "mobile_phone"], ...}).
            - input_table : dict
                - database_name : str
                    The Redshift database name for the table.
                - schema : str
                    The schema name for the table.
                - table : str
                    The table name.
            - match_target_id : int
                The ID of the Civis Data match target. See /match_targets for IDs.
            - output_table : dict
                - database_name : str
                    The Redshift database name for the table.
                - schema : str
                    The schema name for the table.
                - table : str
                    The table name.
            - max_matches : int
                The maximum number of matches per record in the input table to return.
                Must be between 0 and 10. 0 returns all matches.
            - threshold : float (float)
                The score threshold (between 0 and 1). Matches below this threshold
                will not be returned. The default value is 0.5.
            - archived : bool
                Whether the Civis Data Match Job has been archived.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - parent_id : int
                Parent ID that triggers this enhancement.
        """
        ...

    def post_civis_data_match_clone(
        self,
        id: int,
        clone_schedule: bool | None = ...,
        clone_triggers: bool | None = ...,
        clone_notifications: bool | None = ...,
    ) -> Response:
        """Clone this Civis Data Match Enhancement

        Parameters
        ----------
        id : int
            The ID for the enhancement.
        clone_schedule : bool, optional
            If true, also copy the schedule to the new enhancement.
        clone_triggers : bool, optional
            If true, also copy the triggers to the new enhancement.
        clone_notifications : bool, optional
            If true, also copy the notifications to the new enhancement.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - input_field_mapping : dict
                The field (i.e., column) mapping for the input table. See
                https://api.civisanalytics.com/enhancements/field-mapping for a list of
                valid field types and descriptions. Each field type should be mapped to
                a string specifying a column name in the input table. For field types
                that support multiple values (e.g., the "phone" field), a list of
                column names can be provided (e.g., {"phone": ["home_phone",
                "mobile_phone"], ...}).
            - input_table : dict
                - database_name : str
                    The Redshift database name for the table.
                - schema : str
                    The schema name for the table.
                - table : str
                    The table name.
            - match_target_id : int
                The ID of the Civis Data match target. See /match_targets for IDs.
            - output_table : dict
                - database_name : str
                    The Redshift database name for the table.
                - schema : str
                    The schema name for the table.
                - table : str
                    The table name.
            - max_matches : int
                The maximum number of matches per record in the input table to return.
                Must be between 0 and 10. 0 returns all matches.
            - threshold : float (float)
                The score threshold (between 0 and 1). Matches below this threshold
                will not be returned. The default value is 0.5.
            - archived : bool
                Whether the Civis Data Match Job has been archived.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - parent_id : int
                Parent ID that triggers this enhancement.
        """
        ...

    def post_civis_data_match_runs(
        self,
        id: int,
    ) -> Response:
        """Start a run

        Parameters
        ----------
        id : int
            The ID of the Civis Data Match job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - civis_data_match_id : int
                The ID of the Civis Data Match job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def list_civis_data_match_runs(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List runs for the given Civis Data Match job

        Parameters
        ----------
        id : int
            The ID of the Civis Data Match job.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the run.
            - civis_data_match_id : int
                The ID of the Civis Data Match job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def get_civis_data_match_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Check status of a run

        Parameters
        ----------
        id : int
            The ID of the Civis Data Match job.
        run_id : int
            The ID of the run.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - civis_data_match_id : int
                The ID of the Civis Data Match job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def delete_civis_data_match_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the Civis Data Match job.
        run_id : int
            The ID of the run.

        Returns
        -------
        None
            Response code 202: success
        """
        ...

    def list_civis_data_match_runs_logs(
        self,
        id: int,
        run_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a run

        Parameters
        ----------
        id : int
            The ID of the Civis Data Match job.
        run_id : int
            The ID of the run.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def post_civis_data_match_cancel(
        self,
        id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - state : str
                The state of the run, one of 'queued', 'running' or 'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
        """
        ...

    def list_civis_data_match_runs_outputs(
        self,
        id: int,
        run_id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List the outputs for a run

        Parameters
        ----------
        id : int
            The ID of the job.
        run_id : int
            The ID of the run.
        limit : int, optional
            Number of results to return. Defaults to its maximum of 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to created_at. Must be
            one of: created_at, id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - object_type : str
                The type of the output. Valid values are File, Table, Report, Project,
                Credential, or JSONValue
            - object_id : int
                The ID of the output.
            - name : str
                The name of the output.
            - link : str
                The hypermedia link to the output.
            - value : str
        """
        ...

    def list_civis_data_match_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_civis_data_match_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_civis_data_match_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_civis_data_match_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_civis_data_match_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_civis_data_match_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_civis_data_match_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def put_civis_data_match_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - input_field_mapping : dict
                The field (i.e., column) mapping for the input table. See
                https://api.civisanalytics.com/enhancements/field-mapping for a list of
                valid field types and descriptions. Each field type should be mapped to
                a string specifying a column name in the input table. For field types
                that support multiple values (e.g., the "phone" field), a list of
                column names can be provided (e.g., {"phone": ["home_phone",
                "mobile_phone"], ...}).
            - input_table : dict
                - database_name : str
                    The Redshift database name for the table.
                - schema : str
                    The schema name for the table.
                - table : str
                    The table name.
            - match_target_id : int
                The ID of the Civis Data match target. See /match_targets for IDs.
            - output_table : dict
                - database_name : str
                    The Redshift database name for the table.
                - schema : str
                    The schema name for the table.
                - table : str
                    The table name.
            - max_matches : int
                The maximum number of matches per record in the input table to return.
                Must be between 0 and 10. 0 returns all matches.
            - threshold : float (float)
                The score threshold (between 0 and 1). Matches below this threshold
                will not be returned. The default value is 0.5.
            - archived : bool
                Whether the Civis Data Match Job has been archived.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - parent_id : int
                Parent ID that triggers this enhancement.
        """
        ...

    def list_civis_data_match_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a Civis Data Match Enhancement belongs to

        Parameters
        ----------
        id : int
            The ID of the Civis Data Match Enhancement.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_civis_data_match_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a Civis Data Match Enhancement to a project

        Parameters
        ----------
        id : int
            The ID of the Civis Data Match Enhancement.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_civis_data_match_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a Civis Data Match Enhancement from a project

        Parameters
        ----------
        id : int
            The ID of the Civis Data Match Enhancement.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_identity_resolution(
        self,
        archived: str | None = ...,
        status: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Identity Resolution Enhancements

        Parameters
        ----------
        archived : str, optional
            The archival status of the requested item(s).
        status : str, optional
            If specified, returns items with one of these statuses. It accepts a comma-
            separated list, possible values are 'running', 'failed', 'succeeded',
            'idle', 'scheduled'.
        limit : int, optional
            Number of results to return. Defaults to 50. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to updated_at. Must be
            one of: updated_at, created_at, last_run_updated_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - archived : str
                The archival status of the requested item(s).
            - sources : list[dict]
                The source(s) to resolve via a run of this job.

                - name : str
                    A user-specified name for the source.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
                - sample_records_query : str
                    A SQL query to produce a sample of records to inspect.
                - expand_cluster_query : str
                    A customizable query to view PII associated with resolved ids.
                - run_metrics : dict
                    - num_records : int
                        The number of input records for this run.
                    - unique_ids : int
                        The number of distinct unique IDs in the input records for this
                        run.
                    - unique_deduplicated_ids : int
                        The number of resolved IDs associated with more than one unique
                        ID in the input.
                    - max_cluster_size : int
                        The number of records in the largest cluster of resolved IDs.
                    - avg_cluster_size : float (float)
                        The average number of records with the same resolved ID.
                    - cluster_size_frequencies : dict
                        A mapping from numbers of records with the same resolved ID
                        (i.e., sizes of clusters) to numbers of such clusters. For
                        example, if there were 10 clusters with 2 records each, 2 would
                        be a key in the mapping, and 10 would be its value.
        """
        ...

    def post_identity_resolution(
        self,
        name: str,
        sources: list[dict],
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        threshold: float | None = ...,
        match_target_id: int | None = ...,
        enforced_links: list[dict] | None = ...,
        customer_graph: dict | None = ...,
        golden_table: dict | None = ...,
        link_scores: dict | None = ...,
        legacy_id: int | None = ...,
    ) -> Response:
        """Create an Identity Resolution Enhancement

        Parameters
        ----------
        name : str
            The name of the enhancement job.
        sources : list[dict]
            The source(s) to resolve via a run of this job.

            - name : str
                A user-specified name for the source.
            - description : str
                A description of the source.
            - database_name : str
                The name of the source database.
            - schema_name : str
                The name of the source schema.
            - table_name : str
                The name of the source table.
            - field_mapping : dict
                A mapping of PII fields to columns in this table. Valid keys are
                primary_key, first_name, middle_name, last_name, gender, phone, email,
                birth_date, birth_year, birth_month, birth_day, house_number, street,
                unit, full_address, city, state, state_code, zip, lat, lon, and
                name_suffix
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        threshold : float (float), optional
            A value that determines the extent to which similar records get assigned
            the same resolved ID. Must be within 0.5 and 1, inclusive. Defaults to 0.8
            if unspecified.Higher values may result in fewer cases where records about
            different individuals erroneously receive the same resolved ID, but also
            more more cases where records about the same individual receive different
            resolved IDs.
        match_target_id : int, optional
            The ID of the Civis Data (Custom) match target. See /match_targets for IDs.
        enforced_links : list[dict], optional
            A specification of related columns in different sources. The IDR tool will
            ensure that records with the same values in the specified columns receive
            the same Resolved ID.

            - source1 : str
                Name of the first source. Must be defined in Sources list.
            - source1_join_col : str
                Column from the first source to join on.
            - source2 : str
                Name of the second source. Must be defined in Sources list
            - source2_join_col : str
                Column from the second source to join on.
        customer_graph : dict, optional
            - database_name : str
                The name of the destination database.
            - schema_name : str
                The name of the destination schema.
            - table_name : str
                The name of the destination table.
        golden_table : dict, optional
            - database_name : str
                The name of the destination database.
            - schema_name : str
                The name of the destination schema.
            - table_name : str
                The name of the destination table.
            - fields : list[dict]
                - field_name : str
                    The name of the field. Must be one of: first_name, middle_name,
                    last_name, name_suffix, email, phone, birth_month, birth_day,
                    birth_year, gender, address, house_number, street, unit, city,
                    state_code, and zip.
                - rule_type : str
                    One of ["automatic", "preferred_source"]. Determines how the system
                    will choose the value for a record. "automatic" will use the most
                    frequent well-formatted value. "preferred_source" allows the user
                    to prioritize values from particular sources over others.
                - source_preferences : list[dict]
                    Rank order for sources, when rule_type is "preferred_source".

                    - source_name : str
                        The name of the source.
                    - ranking : int
                        How preferred this source is for the given field. Rankings are
                        zero-indexed and lower rank values are preferred to higher
                        ones.
        link_scores : dict, optional
            - database_name : str
                The name of the destination database.
            - schema_name : str
                The name of the destination schema.
            - table_name : str
                The name of the destination table.
        legacy_id : int, optional
            ID of this pipeline in the legacy IDR service application.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - threshold : float (float)
                A value that determines the extent to which similar records get
                assigned the same resolved ID. Must be within 0.5 and 1, inclusive.
                Defaults to 0.8 if unspecified.Higher values may result in fewer cases
                where records about different individuals erroneously receive the same
                resolved ID, but also more more cases where records about the same
                individual receive different resolved IDs.
            - sources : list[dict]
                The source(s) to resolve via a run of this job.

                - name : str
                    A user-specified name for the source.
                - description : str
                    A description of the source.
                - database_name : str
                    The name of the source database.
                - schema_name : str
                    The name of the source schema.
                - table_name : str
                    The name of the source table.
                - field_mapping : dict
                    A mapping of PII fields to columns in this table. Valid keys are
                    primary_key, first_name, middle_name, last_name, gender, phone,
                    email, birth_date, birth_year, birth_month, birth_day,
                    house_number, street, unit, full_address, city, state, state_code,
                    zip, lat, lon, and name_suffix
            - match_target_id : int
                The ID of the Civis Data (Custom) match target. See /match_targets for
                IDs.
            - enforced_links : list[dict]
                A specification of related columns in different sources. The IDR tool
                will ensure that records with the same values in the specified columns
                receive the same Resolved ID.

                - source1 : str
                    Name of the first source. Must be defined in Sources list.
                - source1_join_col : str
                    Column from the first source to join on.
                - source2 : str
                    Name of the second source. Must be defined in Sources list
                - source2_join_col : str
                    Column from the second source to join on.
            - customer_graph : dict
                - database_name : str
                    The name of the destination database.
                - schema_name : str
                    The name of the destination schema.
                - table_name : str
                    The name of the destination table.
            - golden_table : dict
                - database_name : str
                    The name of the destination database.
                - schema_name : str
                    The name of the destination schema.
                - table_name : str
                    The name of the destination table.
                - fields : list[dict]
                    - field_name : str
                        The name of the field. Must be one of: first_name, middle_name,
                        last_name, name_suffix, email, phone, birth_month, birth_day,
                        birth_year, gender, address, house_number, street, unit, city,
                        state_code, and zip.
                    - rule_type : str
                        One of ["automatic", "preferred_source"]. Determines how the
                        system will choose the value for a record. "automatic" will use
                        the most frequent well-formatted value. "preferred_source"
                        allows the user to prioritize values from particular sources
                        over others.
                    - source_preferences : list[dict]
                        Rank order for sources, when rule_type is "preferred_source".

                        - source_name : str
                            The name of the source.
                        - ranking : int
                            How preferred this source is for the given field. Rankings
                            are zero-indexed and lower rank values are preferred to
                            higher ones.
            - link_scores : dict
                - database_name : str
                    The name of the destination database.
                - schema_name : str
                    The name of the destination schema.
                - table_name : str
                    The name of the destination table.
            - legacy_id : int
                ID of this pipeline in the legacy IDR service application.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
                - config : str
                    How the Identity Resolution job was configured for this run.
                - sample_records_query : str
                    A SQL query to produce a sample of records to inspect.
                - expand_cluster_query : str
                    A customizable query to view PII associated with resolved ids.
                - run_metrics : dict
                    - num_records : int
                        The number of input records for this run.
                    - unique_ids : int
                        The number of distinct unique IDs in the input records for this
                        run.
                    - unique_deduplicated_ids : int
                        The number of resolved IDs associated with more than one unique
                        ID in the input.
                    - max_cluster_size : int
                        The number of records in the largest cluster of resolved IDs.
                    - avg_cluster_size : float (float)
                        The average number of records with the same resolved ID.
                    - cluster_size_frequencies : dict
                        A mapping from numbers of records with the same resolved ID
                        (i.e., sizes of clusters) to numbers of such clusters. For
                        example, if there were 10 clusters with 2 records each, 2 would
                        be a key in the mapping, and 10 would be its value.
                - error_section : str
                    If there was a failure, this will denote which section of the
                    Identity Resolution job failed. One of: data_preparation,
                    compute_setup or data_processing.
        """
        ...

    def put_identity_resolution(
        self,
        id: int,
        name: str,
        sources: list[dict],
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        threshold: float | None = ...,
        match_target_id: int | None = ...,
        enforced_links: list[dict] | None = ...,
        customer_graph: dict | None = ...,
        golden_table: dict | None = ...,
        link_scores: dict | None = ...,
    ) -> Response:
        """Replace all attributes of this Identity Resolution Enhancement

        Parameters
        ----------
        id : int
            The ID for the enhancement.
        name : str
            The name of the enhancement job.
        sources : list[dict]
            The source(s) to resolve via a run of this job.

            - name : str
                A user-specified name for the source.
            - description : str
                A description of the source.
            - database_name : str
                The name of the source database.
            - schema_name : str
                The name of the source schema.
            - table_name : str
                The name of the source table.
            - field_mapping : dict
                A mapping of PII fields to columns in this table. Valid keys are
                primary_key, first_name, middle_name, last_name, gender, phone, email,
                birth_date, birth_year, birth_month, birth_day, house_number, street,
                unit, full_address, city, state, state_code, zip, lat, lon, and
                name_suffix
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        threshold : float (float), optional
            A value that determines the extent to which similar records get assigned
            the same resolved ID. Must be within 0.5 and 1, inclusive. Defaults to 0.8
            if unspecified.Higher values may result in fewer cases where records about
            different individuals erroneously receive the same resolved ID, but also
            more more cases where records about the same individual receive different
            resolved IDs.
        match_target_id : int, optional
            The ID of the Civis Data (Custom) match target. See /match_targets for IDs.
        enforced_links : list[dict], optional
            A specification of related columns in different sources. The IDR tool will
            ensure that records with the same values in the specified columns receive
            the same Resolved ID.

            - source1 : str
                Name of the first source. Must be defined in Sources list.
            - source1_join_col : str
                Column from the first source to join on.
            - source2 : str
                Name of the second source. Must be defined in Sources list
            - source2_join_col : str
                Column from the second source to join on.
        customer_graph : dict, optional
            - database_name : str
                The name of the destination database.
            - schema_name : str
                The name of the destination schema.
            - table_name : str
                The name of the destination table.
        golden_table : dict, optional
            - database_name : str
                The name of the destination database.
            - schema_name : str
                The name of the destination schema.
            - table_name : str
                The name of the destination table.
            - fields : list[dict]
                - field_name : str
                    The name of the field. Must be one of: first_name, middle_name,
                    last_name, name_suffix, email, phone, birth_month, birth_day,
                    birth_year, gender, address, house_number, street, unit, city,
                    state_code, and zip.
                - rule_type : str
                    One of ["automatic", "preferred_source"]. Determines how the system
                    will choose the value for a record. "automatic" will use the most
                    frequent well-formatted value. "preferred_source" allows the user
                    to prioritize values from particular sources over others.
                - source_preferences : list[dict]
                    Rank order for sources, when rule_type is "preferred_source".

                    - source_name : str
                        The name of the source.
                    - ranking : int
                        How preferred this source is for the given field. Rankings are
                        zero-indexed and lower rank values are preferred to higher
                        ones.
        link_scores : dict, optional
            - database_name : str
                The name of the destination database.
            - schema_name : str
                The name of the destination schema.
            - table_name : str
                The name of the destination table.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - threshold : float (float)
                A value that determines the extent to which similar records get
                assigned the same resolved ID. Must be within 0.5 and 1, inclusive.
                Defaults to 0.8 if unspecified.Higher values may result in fewer cases
                where records about different individuals erroneously receive the same
                resolved ID, but also more more cases where records about the same
                individual receive different resolved IDs.
            - sources : list[dict]
                The source(s) to resolve via a run of this job.

                - name : str
                    A user-specified name for the source.
                - description : str
                    A description of the source.
                - database_name : str
                    The name of the source database.
                - schema_name : str
                    The name of the source schema.
                - table_name : str
                    The name of the source table.
                - field_mapping : dict
                    A mapping of PII fields to columns in this table. Valid keys are
                    primary_key, first_name, middle_name, last_name, gender, phone,
                    email, birth_date, birth_year, birth_month, birth_day,
                    house_number, street, unit, full_address, city, state, state_code,
                    zip, lat, lon, and name_suffix
            - match_target_id : int
                The ID of the Civis Data (Custom) match target. See /match_targets for
                IDs.
            - enforced_links : list[dict]
                A specification of related columns in different sources. The IDR tool
                will ensure that records with the same values in the specified columns
                receive the same Resolved ID.

                - source1 : str
                    Name of the first source. Must be defined in Sources list.
                - source1_join_col : str
                    Column from the first source to join on.
                - source2 : str
                    Name of the second source. Must be defined in Sources list
                - source2_join_col : str
                    Column from the second source to join on.
            - customer_graph : dict
                - database_name : str
                    The name of the destination database.
                - schema_name : str
                    The name of the destination schema.
                - table_name : str
                    The name of the destination table.
            - golden_table : dict
                - database_name : str
                    The name of the destination database.
                - schema_name : str
                    The name of the destination schema.
                - table_name : str
                    The name of the destination table.
                - fields : list[dict]
                    - field_name : str
                        The name of the field. Must be one of: first_name, middle_name,
                        last_name, name_suffix, email, phone, birth_month, birth_day,
                        birth_year, gender, address, house_number, street, unit, city,
                        state_code, and zip.
                    - rule_type : str
                        One of ["automatic", "preferred_source"]. Determines how the
                        system will choose the value for a record. "automatic" will use
                        the most frequent well-formatted value. "preferred_source"
                        allows the user to prioritize values from particular sources
                        over others.
                    - source_preferences : list[dict]
                        Rank order for sources, when rule_type is "preferred_source".

                        - source_name : str
                            The name of the source.
                        - ranking : int
                            How preferred this source is for the given field. Rankings
                            are zero-indexed and lower rank values are preferred to
                            higher ones.
            - link_scores : dict
                - database_name : str
                    The name of the destination database.
                - schema_name : str
                    The name of the destination schema.
                - table_name : str
                    The name of the destination table.
            - legacy_id : int
                ID of this pipeline in the legacy IDR service application.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
                - config : str
                    How the Identity Resolution job was configured for this run.
                - sample_records_query : str
                    A SQL query to produce a sample of records to inspect.
                - expand_cluster_query : str
                    A customizable query to view PII associated with resolved ids.
                - run_metrics : dict
                    - num_records : int
                        The number of input records for this run.
                    - unique_ids : int
                        The number of distinct unique IDs in the input records for this
                        run.
                    - unique_deduplicated_ids : int
                        The number of resolved IDs associated with more than one unique
                        ID in the input.
                    - max_cluster_size : int
                        The number of records in the largest cluster of resolved IDs.
                    - avg_cluster_size : float (float)
                        The average number of records with the same resolved ID.
                    - cluster_size_frequencies : dict
                        A mapping from numbers of records with the same resolved ID
                        (i.e., sizes of clusters) to numbers of such clusters. For
                        example, if there were 10 clusters with 2 records each, 2 would
                        be a key in the mapping, and 10 would be its value.
                - error_section : str
                    If there was a failure, this will denote which section of the
                    Identity Resolution job failed. One of: data_preparation,
                    compute_setup or data_processing.
        """
        ...

    def patch_identity_resolution(
        self,
        id: int,
        name: str | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        threshold: float | None = ...,
        sources: list[dict] | None = ...,
        match_target_id: int | None = ...,
        enforced_links: list[dict] | None = ...,
        customer_graph: dict | None = ...,
        golden_table: dict | None = ...,
        link_scores: dict | None = ...,
    ) -> Response:
        """Update some attributes of this Identity Resolution Enhancement

        Parameters
        ----------
        id : int
            The ID for the enhancement.
        name : str, optional
            The name of the enhancement job.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        threshold : float (float), optional
            A value that determines the extent to which similar records get assigned
            the same resolved ID. Must be within 0.5 and 1, inclusive. Defaults to 0.8
            if unspecified.Higher values may result in fewer cases where records about
            different individuals erroneously receive the same resolved ID, but also
            more more cases where records about the same individual receive different
            resolved IDs.
        sources : list[dict], optional
            The source(s) to resolve via a run of this job.

            - name : str
                A user-specified name for the source.
            - description : str
                A description of the source.
            - database_name : str
                The name of the source database.
            - schema_name : str
                The name of the source schema.
            - table_name : str
                The name of the source table.
            - field_mapping : dict
                A mapping of PII fields to columns in this table. Valid keys are
                primary_key, first_name, middle_name, last_name, gender, phone, email,
                birth_date, birth_year, birth_month, birth_day, house_number, street,
                unit, full_address, city, state, state_code, zip, lat, lon, and
                name_suffix
        match_target_id : int, optional
            The ID of the Civis Data (Custom) match target. See /match_targets for IDs.
        enforced_links : list[dict], optional
            A specification of related columns in different sources. The IDR tool will
            ensure that records with the same values in the specified columns receive
            the same Resolved ID.

            - source1 : str
                Name of the first source. Must be defined in Sources list.
            - source1_join_col : str
                Column from the first source to join on.
            - source2 : str
                Name of the second source. Must be defined in Sources list
            - source2_join_col : str
                Column from the second source to join on.
        customer_graph : dict, optional
            - database_name : str
                The name of the destination database.
            - schema_name : str
                The name of the destination schema.
            - table_name : str
                The name of the destination table.
        golden_table : dict, optional
            - database_name : str
                The name of the destination database.
            - schema_name : str
                The name of the destination schema.
            - table_name : str
                The name of the destination table.
            - fields : list[dict]
                - field_name : str
                    The name of the field. Must be one of: first_name, middle_name,
                    last_name, name_suffix, email, phone, birth_month, birth_day,
                    birth_year, gender, address, house_number, street, unit, city,
                    state_code, and zip.
                - rule_type : str
                    One of ["automatic", "preferred_source"]. Determines how the system
                    will choose the value for a record. "automatic" will use the most
                    frequent well-formatted value. "preferred_source" allows the user
                    to prioritize values from particular sources over others.
                - source_preferences : list[dict]
                    Rank order for sources, when rule_type is "preferred_source".

                    - source_name : str
                        The name of the source.
                    - ranking : int
                        How preferred this source is for the given field. Rankings are
                        zero-indexed and lower rank values are preferred to higher
                        ones.
        link_scores : dict, optional
            - database_name : str
                The name of the destination database.
            - schema_name : str
                The name of the destination schema.
            - table_name : str
                The name of the destination table.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - threshold : float (float)
                A value that determines the extent to which similar records get
                assigned the same resolved ID. Must be within 0.5 and 1, inclusive.
                Defaults to 0.8 if unspecified.Higher values may result in fewer cases
                where records about different individuals erroneously receive the same
                resolved ID, but also more more cases where records about the same
                individual receive different resolved IDs.
            - sources : list[dict]
                The source(s) to resolve via a run of this job.

                - name : str
                    A user-specified name for the source.
                - description : str
                    A description of the source.
                - database_name : str
                    The name of the source database.
                - schema_name : str
                    The name of the source schema.
                - table_name : str
                    The name of the source table.
                - field_mapping : dict
                    A mapping of PII fields to columns in this table. Valid keys are
                    primary_key, first_name, middle_name, last_name, gender, phone,
                    email, birth_date, birth_year, birth_month, birth_day,
                    house_number, street, unit, full_address, city, state, state_code,
                    zip, lat, lon, and name_suffix
            - match_target_id : int
                The ID of the Civis Data (Custom) match target. See /match_targets for
                IDs.
            - enforced_links : list[dict]
                A specification of related columns in different sources. The IDR tool
                will ensure that records with the same values in the specified columns
                receive the same Resolved ID.

                - source1 : str
                    Name of the first source. Must be defined in Sources list.
                - source1_join_col : str
                    Column from the first source to join on.
                - source2 : str
                    Name of the second source. Must be defined in Sources list
                - source2_join_col : str
                    Column from the second source to join on.
            - customer_graph : dict
                - database_name : str
                    The name of the destination database.
                - schema_name : str
                    The name of the destination schema.
                - table_name : str
                    The name of the destination table.
            - golden_table : dict
                - database_name : str
                    The name of the destination database.
                - schema_name : str
                    The name of the destination schema.
                - table_name : str
                    The name of the destination table.
                - fields : list[dict]
                    - field_name : str
                        The name of the field. Must be one of: first_name, middle_name,
                        last_name, name_suffix, email, phone, birth_month, birth_day,
                        birth_year, gender, address, house_number, street, unit, city,
                        state_code, and zip.
                    - rule_type : str
                        One of ["automatic", "preferred_source"]. Determines how the
                        system will choose the value for a record. "automatic" will use
                        the most frequent well-formatted value. "preferred_source"
                        allows the user to prioritize values from particular sources
                        over others.
                    - source_preferences : list[dict]
                        Rank order for sources, when rule_type is "preferred_source".

                        - source_name : str
                            The name of the source.
                        - ranking : int
                            How preferred this source is for the given field. Rankings
                            are zero-indexed and lower rank values are preferred to
                            higher ones.
            - link_scores : dict
                - database_name : str
                    The name of the destination database.
                - schema_name : str
                    The name of the destination schema.
                - table_name : str
                    The name of the destination table.
            - legacy_id : int
                ID of this pipeline in the legacy IDR service application.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
                - config : str
                    How the Identity Resolution job was configured for this run.
                - sample_records_query : str
                    A SQL query to produce a sample of records to inspect.
                - expand_cluster_query : str
                    A customizable query to view PII associated with resolved ids.
                - run_metrics : dict
                    - num_records : int
                        The number of input records for this run.
                    - unique_ids : int
                        The number of distinct unique IDs in the input records for this
                        run.
                    - unique_deduplicated_ids : int
                        The number of resolved IDs associated with more than one unique
                        ID in the input.
                    - max_cluster_size : int
                        The number of records in the largest cluster of resolved IDs.
                    - avg_cluster_size : float (float)
                        The average number of records with the same resolved ID.
                    - cluster_size_frequencies : dict
                        A mapping from numbers of records with the same resolved ID
                        (i.e., sizes of clusters) to numbers of such clusters. For
                        example, if there were 10 clusters with 2 records each, 2 would
                        be a key in the mapping, and 10 would be its value.
                - error_section : str
                    If there was a failure, this will denote which section of the
                    Identity Resolution job failed. One of: data_preparation,
                    compute_setup or data_processing.
        """
        ...

    def get_identity_resolution(
        self,
        id: int,
        is_legacy_id: bool | None = ...,
    ) -> Response:
        """Get an Identity Resolution Enhancement

        Parameters
        ----------
        id : int
            The ID for the enhancement.
        is_legacy_id : bool, optional
            Whether the given ID is for the Identity Resolution job in the legacy
            service app.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - threshold : float (float)
                A value that determines the extent to which similar records get
                assigned the same resolved ID. Must be within 0.5 and 1, inclusive.
                Defaults to 0.8 if unspecified.Higher values may result in fewer cases
                where records about different individuals erroneously receive the same
                resolved ID, but also more more cases where records about the same
                individual receive different resolved IDs.
            - sources : list[dict]
                The source(s) to resolve via a run of this job.

                - name : str
                    A user-specified name for the source.
                - description : str
                    A description of the source.
                - database_name : str
                    The name of the source database.
                - schema_name : str
                    The name of the source schema.
                - table_name : str
                    The name of the source table.
                - field_mapping : dict
                    A mapping of PII fields to columns in this table. Valid keys are
                    primary_key, first_name, middle_name, last_name, gender, phone,
                    email, birth_date, birth_year, birth_month, birth_day,
                    house_number, street, unit, full_address, city, state, state_code,
                    zip, lat, lon, and name_suffix
            - match_target_id : int
                The ID of the Civis Data (Custom) match target. See /match_targets for
                IDs.
            - enforced_links : list[dict]
                A specification of related columns in different sources. The IDR tool
                will ensure that records with the same values in the specified columns
                receive the same Resolved ID.

                - source1 : str
                    Name of the first source. Must be defined in Sources list.
                - source1_join_col : str
                    Column from the first source to join on.
                - source2 : str
                    Name of the second source. Must be defined in Sources list
                - source2_join_col : str
                    Column from the second source to join on.
            - customer_graph : dict
                - database_name : str
                    The name of the destination database.
                - schema_name : str
                    The name of the destination schema.
                - table_name : str
                    The name of the destination table.
            - golden_table : dict
                - database_name : str
                    The name of the destination database.
                - schema_name : str
                    The name of the destination schema.
                - table_name : str
                    The name of the destination table.
                - fields : list[dict]
                    - field_name : str
                        The name of the field. Must be one of: first_name, middle_name,
                        last_name, name_suffix, email, phone, birth_month, birth_day,
                        birth_year, gender, address, house_number, street, unit, city,
                        state_code, and zip.
                    - rule_type : str
                        One of ["automatic", "preferred_source"]. Determines how the
                        system will choose the value for a record. "automatic" will use
                        the most frequent well-formatted value. "preferred_source"
                        allows the user to prioritize values from particular sources
                        over others.
                    - source_preferences : list[dict]
                        Rank order for sources, when rule_type is "preferred_source".

                        - source_name : str
                            The name of the source.
                        - ranking : int
                            How preferred this source is for the given field. Rankings
                            are zero-indexed and lower rank values are preferred to
                            higher ones.
            - link_scores : dict
                - database_name : str
                    The name of the destination database.
                - schema_name : str
                    The name of the destination schema.
                - table_name : str
                    The name of the destination table.
            - legacy_id : int
                ID of this pipeline in the legacy IDR service application.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
                - config : str
                    How the Identity Resolution job was configured for this run.
                - sample_records_query : str
                    A SQL query to produce a sample of records to inspect.
                - expand_cluster_query : str
                    A customizable query to view PII associated with resolved ids.
                - run_metrics : dict
                    - num_records : int
                        The number of input records for this run.
                    - unique_ids : int
                        The number of distinct unique IDs in the input records for this
                        run.
                    - unique_deduplicated_ids : int
                        The number of resolved IDs associated with more than one unique
                        ID in the input.
                    - max_cluster_size : int
                        The number of records in the largest cluster of resolved IDs.
                    - avg_cluster_size : float (float)
                        The average number of records with the same resolved ID.
                    - cluster_size_frequencies : dict
                        A mapping from numbers of records with the same resolved ID
                        (i.e., sizes of clusters) to numbers of such clusters. For
                        example, if there were 10 clusters with 2 records each, 2 would
                        be a key in the mapping, and 10 would be its value.
                - error_section : str
                    If there was a failure, this will denote which section of the
                    Identity Resolution job failed. One of: data_preparation,
                    compute_setup or data_processing.
        """
        ...

    def post_identity_resolution_clone(
        self,
        id: int,
        clone_schedule: bool | None = ...,
        clone_triggers: bool | None = ...,
        clone_notifications: bool | None = ...,
    ) -> Response:
        """Clone this Identity Resolution Enhancement

        Parameters
        ----------
        id : int
            The ID for the enhancement.
        clone_schedule : bool, optional
            If true, also copy the schedule to the new enhancement.
        clone_triggers : bool, optional
            If true, also copy the triggers to the new enhancement.
        clone_notifications : bool, optional
            If true, also copy the notifications to the new enhancement.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - threshold : float (float)
                A value that determines the extent to which similar records get
                assigned the same resolved ID. Must be within 0.5 and 1, inclusive.
                Defaults to 0.8 if unspecified.Higher values may result in fewer cases
                where records about different individuals erroneously receive the same
                resolved ID, but also more more cases where records about the same
                individual receive different resolved IDs.
            - sources : list[dict]
                The source(s) to resolve via a run of this job.

                - name : str
                    A user-specified name for the source.
                - description : str
                    A description of the source.
                - database_name : str
                    The name of the source database.
                - schema_name : str
                    The name of the source schema.
                - table_name : str
                    The name of the source table.
                - field_mapping : dict
                    A mapping of PII fields to columns in this table. Valid keys are
                    primary_key, first_name, middle_name, last_name, gender, phone,
                    email, birth_date, birth_year, birth_month, birth_day,
                    house_number, street, unit, full_address, city, state, state_code,
                    zip, lat, lon, and name_suffix
            - match_target_id : int
                The ID of the Civis Data (Custom) match target. See /match_targets for
                IDs.
            - enforced_links : list[dict]
                A specification of related columns in different sources. The IDR tool
                will ensure that records with the same values in the specified columns
                receive the same Resolved ID.

                - source1 : str
                    Name of the first source. Must be defined in Sources list.
                - source1_join_col : str
                    Column from the first source to join on.
                - source2 : str
                    Name of the second source. Must be defined in Sources list
                - source2_join_col : str
                    Column from the second source to join on.
            - customer_graph : dict
                - database_name : str
                    The name of the destination database.
                - schema_name : str
                    The name of the destination schema.
                - table_name : str
                    The name of the destination table.
            - golden_table : dict
                - database_name : str
                    The name of the destination database.
                - schema_name : str
                    The name of the destination schema.
                - table_name : str
                    The name of the destination table.
                - fields : list[dict]
                    - field_name : str
                        The name of the field. Must be one of: first_name, middle_name,
                        last_name, name_suffix, email, phone, birth_month, birth_day,
                        birth_year, gender, address, house_number, street, unit, city,
                        state_code, and zip.
                    - rule_type : str
                        One of ["automatic", "preferred_source"]. Determines how the
                        system will choose the value for a record. "automatic" will use
                        the most frequent well-formatted value. "preferred_source"
                        allows the user to prioritize values from particular sources
                        over others.
                    - source_preferences : list[dict]
                        Rank order for sources, when rule_type is "preferred_source".

                        - source_name : str
                            The name of the source.
                        - ranking : int
                            How preferred this source is for the given field. Rankings
                            are zero-indexed and lower rank values are preferred to
                            higher ones.
            - link_scores : dict
                - database_name : str
                    The name of the destination database.
                - schema_name : str
                    The name of the destination schema.
                - table_name : str
                    The name of the destination table.
            - legacy_id : int
                ID of this pipeline in the legacy IDR service application.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
                - config : str
                    How the Identity Resolution job was configured for this run.
                - sample_records_query : str
                    A SQL query to produce a sample of records to inspect.
                - expand_cluster_query : str
                    A customizable query to view PII associated with resolved ids.
                - run_metrics : dict
                    - num_records : int
                        The number of input records for this run.
                    - unique_ids : int
                        The number of distinct unique IDs in the input records for this
                        run.
                    - unique_deduplicated_ids : int
                        The number of resolved IDs associated with more than one unique
                        ID in the input.
                    - max_cluster_size : int
                        The number of records in the largest cluster of resolved IDs.
                    - avg_cluster_size : float (float)
                        The average number of records with the same resolved ID.
                    - cluster_size_frequencies : dict
                        A mapping from numbers of records with the same resolved ID
                        (i.e., sizes of clusters) to numbers of such clusters. For
                        example, if there were 10 clusters with 2 records each, 2 would
                        be a key in the mapping, and 10 would be its value.
                - error_section : str
                    If there was a failure, this will denote which section of the
                    Identity Resolution job failed. One of: data_preparation,
                    compute_setup or data_processing.
        """
        ...

    def post_identity_resolution_runs(
        self,
        id: int,
    ) -> Response:
        """Start a run

        Parameters
        ----------
        id : int
            The ID of the Identity Resolution job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - identity_resolution_id : int
                The ID of the Identity Resolution job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
            - config : str
                How the Identity Resolution job was configured for this run.
            - sample_records_query : str
                A SQL query to produce a sample of records to inspect.
            - expand_cluster_query : str
                A customizable query to view PII associated with resolved ids.
            - run_metrics : dict
                - num_records : int
                    The number of input records for this run.
                - unique_ids : int
                    The number of distinct unique IDs in the input records for this
                    run.
                - unique_deduplicated_ids : int
                    The number of resolved IDs associated with more than one unique ID
                    in the input.
                - max_cluster_size : int
                    The number of records in the largest cluster of resolved IDs.
                - avg_cluster_size : float (float)
                    The average number of records with the same resolved ID.
                - cluster_size_frequencies : dict
                    A mapping from numbers of records with the same resolved ID (i.e.,
                    sizes of clusters) to numbers of such clusters. For example, if
                    there were 10 clusters with 2 records each, 2 would be a key in the
                    mapping, and 10 would be its value.
            - error_section : str
                If there was a failure, this will denote which section of the Identity
                Resolution job failed. One of: data_preparation, compute_setup or
                data_processing.
        """
        ...

    def list_identity_resolution_runs(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List runs for the given Identity Resolution job

        Parameters
        ----------
        id : int
            The ID of the Identity Resolution job.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the run.
            - identity_resolution_id : int
                The ID of the Identity Resolution job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
            - sample_records_query : str
                A SQL query to produce a sample of records to inspect.
            - expand_cluster_query : str
                A customizable query to view PII associated with resolved ids.
            - run_metrics : dict
                - num_records : int
                    The number of input records for this run.
                - unique_ids : int
                    The number of distinct unique IDs in the input records for this
                    run.
                - unique_deduplicated_ids : int
                    The number of resolved IDs associated with more than one unique ID
                    in the input.
                - max_cluster_size : int
                    The number of records in the largest cluster of resolved IDs.
                - avg_cluster_size : float (float)
                    The average number of records with the same resolved ID.
                - cluster_size_frequencies : dict
                    A mapping from numbers of records with the same resolved ID (i.e.,
                    sizes of clusters) to numbers of such clusters. For example, if
                    there were 10 clusters with 2 records each, 2 would be a key in the
                    mapping, and 10 would be its value.
        """
        ...

    def get_identity_resolution_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Check status of a run

        Parameters
        ----------
        id : int
            The ID of the Identity Resolution job.
        run_id : int
            The ID of the run.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - identity_resolution_id : int
                The ID of the Identity Resolution job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
            - config : str
                How the Identity Resolution job was configured for this run.
            - sample_records_query : str
                A SQL query to produce a sample of records to inspect.
            - expand_cluster_query : str
                A customizable query to view PII associated with resolved ids.
            - run_metrics : dict
                - num_records : int
                    The number of input records for this run.
                - unique_ids : int
                    The number of distinct unique IDs in the input records for this
                    run.
                - unique_deduplicated_ids : int
                    The number of resolved IDs associated with more than one unique ID
                    in the input.
                - max_cluster_size : int
                    The number of records in the largest cluster of resolved IDs.
                - avg_cluster_size : float (float)
                    The average number of records with the same resolved ID.
                - cluster_size_frequencies : dict
                    A mapping from numbers of records with the same resolved ID (i.e.,
                    sizes of clusters) to numbers of such clusters. For example, if
                    there were 10 clusters with 2 records each, 2 would be a key in the
                    mapping, and 10 would be its value.
            - error_section : str
                If there was a failure, this will denote which section of the Identity
                Resolution job failed. One of: data_preparation, compute_setup or
                data_processing.
        """
        ...

    def delete_identity_resolution_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the Identity Resolution job.
        run_id : int
            The ID of the run.

        Returns
        -------
        None
            Response code 202: success
        """
        ...

    def list_identity_resolution_runs_logs(
        self,
        id: int,
        run_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a run

        Parameters
        ----------
        id : int
            The ID of the Identity Resolution job.
        run_id : int
            The ID of the run.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def post_identity_resolution_cancel(
        self,
        id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - state : str
                The state of the run, one of 'queued', 'running' or 'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
        """
        ...

    def list_types(
        self,
    ) -> Response:
        """List available enhancement types

        Returns
        -------
        :class:`civis.response.Response`
            - name : str
                The name of the type.
        """
        ...

    def list_field_mapping(
        self,
    ) -> Response:
        """List the fields in a field mapping for Civis Data Match, Data Unification, and
        Table Deduplication jobs

        Returns
        -------
        :class:`civis.response.Response`
            - field : str
                The name of the field.
            - description : str
                The description of the field.
        """
        ...

    def list(
        self,
        type: str | None = ...,
        author: str | None = ...,
        status: str | None = ...,
        archived: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Enhancements

        Parameters
        ----------
        type : str, optional
            If specified, return items of these types.
        author : str, optional
            If specified, return items from any of these authors. It accepts a comma-
            separated list of user IDs.
        status : str, optional
            If specified, returns items with one of these statuses. It accepts a comma-
            separated list, possible values are 'running', 'failed', 'succeeded',
            'idle', 'scheduled'.
        archived : str, optional
            The archival status of the requested item(s).
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to updated_at. Must be
            one of: updated_at, name, created_at, last_run.updated_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def post_cass_ncoa(
        self,
        name: str,
        source: dict,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        destination: dict | None = ...,
        column_mapping: dict | None = ...,
        use_default_column_mapping: bool | None = ...,
        perform_ncoa: bool | None = ...,
        ncoa_credential_id: int | None = ...,
        output_level: str | None = ...,
        limiting_sql: str | None = ...,
        batch_size: int | None = ...,
        parent_id: int | None = ...,
    ) -> Response:
        """Create a CASS/NCOA Enhancement

        Parameters
        ----------
        name : str
            The name of the enhancement job.
        source : dict
            - database_table : dict
                - schema : str
                    The schema name of the source table.
                - table : str
                    The name of the source table.
                - remote_host_id : int
                    The ID of the database host for the table.
                - credential_id : int
                    The id of the credentials to be used when performing the
                    enhancement.
                - multipart_key : list[str]
                    The source table primary key.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        destination : dict, optional
            - database_table : dict
                - schema : str
                    The schema name for the output data.
                - table : str
                    The table name for the output data.
        column_mapping : dict, optional
            - address1 : str
                The first address line.
            - address2 : str
                The second address line.
            - city : str
                The city of an address.
            - state : str
                The state of an address.
            - zip : str
                The zip code of an address.
            - name : str
                The full name of the resident at this address. If needed, separate
                multiple columns with `+`, e.g. `first_name+last_name`
            - company : str
                The name of the company located at this address.
        use_default_column_mapping : bool, optional
            Defaults to true, where the existing column mapping on the input table will
            be used. If false, a custom column mapping must be provided.
        perform_ncoa : bool, optional
            Whether to update addresses for records matching the National Change of
            Address (NCOA) database.
        ncoa_credential_id : int, optional
            Credential to use when performing NCOA updates. Required if 'performNcoa'
            is true.
        output_level : str, optional
            The set of fields persisted by a CASS or NCOA enhancement.For CASS
            enhancements, one of 'cass' or 'all.'For NCOA enhancements, one of 'cass',
            'ncoa' , 'coalesced' or 'all'.By default, all fields will be returned.
        limiting_sql : str, optional
            The limiting SQL for the source table. "WHERE" should be omitted (e.g.
            state='IL').
        batch_size : int, optional
            The maximum number of records processed at a time. Note that this parameter
            is not available to all users.
        parent_id : int, optional
            Parent ID that triggers this enhancement.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - source : dict
                - database_table : dict
                    - schema : str
                        The schema name of the source table.
                    - table : str
                        The name of the source table.
                    - remote_host_id : int
                        The ID of the database host for the table.
                    - credential_id : int
                        The id of the credentials to be used when performing the
                        enhancement.
                    - multipart_key : list[str]
                        The source table primary key.
            - destination : dict
                - database_table : dict
                    - schema : str
                        The schema name for the output data.
                    - table : str
                        The table name for the output data.
            - column_mapping : dict
                - address1 : str
                    The first address line.
                - address2 : str
                    The second address line.
                - city : str
                    The city of an address.
                - state : str
                    The state of an address.
                - zip : str
                    The zip code of an address.
                - name : str
                    The full name of the resident at this address. If needed, separate
                    multiple columns with `+`, e.g. `first_name+last_name`
                - company : str
                    The name of the company located at this address.
            - use_default_column_mapping : bool
                Defaults to true, where the existing column mapping on the input table
                will be used. If false, a custom column mapping must be provided.
            - perform_ncoa : bool
                Whether to update addresses for records matching the National Change of
                Address (NCOA) database.
            - ncoa_credential_id : int
                Credential to use when performing NCOA updates. Required if
                'performNcoa' is true.
            - output_level : str
                The set of fields persisted by a CASS or NCOA enhancement.For CASS
                enhancements, one of 'cass' or 'all.'For NCOA enhancements, one of
                'cass', 'ncoa' , 'coalesced' or 'all'.By default, all fields will be
                returned.
            - limiting_sql : str
                The limiting SQL for the source table. "WHERE" should be omitted (e.g.
                state='IL').
            - batch_size : int
                The maximum number of records processed at a time. Note that this
                parameter is not available to all users.
            - archived : str
                The archival status of the requested item(s).
            - parent_id : int
                Parent ID that triggers this enhancement.
        """
        ...

    def get_cass_ncoa(
        self,
        id: int,
    ) -> Response:
        """Get a CASS/NCOA Enhancement

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - source : dict
                - database_table : dict
                    - schema : str
                        The schema name of the source table.
                    - table : str
                        The name of the source table.
                    - remote_host_id : int
                        The ID of the database host for the table.
                    - credential_id : int
                        The id of the credentials to be used when performing the
                        enhancement.
                    - multipart_key : list[str]
                        The source table primary key.
            - destination : dict
                - database_table : dict
                    - schema : str
                        The schema name for the output data.
                    - table : str
                        The table name for the output data.
            - column_mapping : dict
                - address1 : str
                    The first address line.
                - address2 : str
                    The second address line.
                - city : str
                    The city of an address.
                - state : str
                    The state of an address.
                - zip : str
                    The zip code of an address.
                - name : str
                    The full name of the resident at this address. If needed, separate
                    multiple columns with `+`, e.g. `first_name+last_name`
                - company : str
                    The name of the company located at this address.
            - use_default_column_mapping : bool
                Defaults to true, where the existing column mapping on the input table
                will be used. If false, a custom column mapping must be provided.
            - perform_ncoa : bool
                Whether to update addresses for records matching the National Change of
                Address (NCOA) database.
            - ncoa_credential_id : int
                Credential to use when performing NCOA updates. Required if
                'performNcoa' is true.
            - output_level : str
                The set of fields persisted by a CASS or NCOA enhancement.For CASS
                enhancements, one of 'cass' or 'all.'For NCOA enhancements, one of
                'cass', 'ncoa' , 'coalesced' or 'all'.By default, all fields will be
                returned.
            - limiting_sql : str
                The limiting SQL for the source table. "WHERE" should be omitted (e.g.
                state='IL').
            - batch_size : int
                The maximum number of records processed at a time. Note that this
                parameter is not available to all users.
            - archived : str
                The archival status of the requested item(s).
            - parent_id : int
                Parent ID that triggers this enhancement.
        """
        ...

    def put_cass_ncoa(
        self,
        id: int,
        name: str,
        source: dict,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        destination: dict | None = ...,
        column_mapping: dict | None = ...,
        use_default_column_mapping: bool | None = ...,
        perform_ncoa: bool | None = ...,
        ncoa_credential_id: int | None = ...,
        output_level: str | None = ...,
        limiting_sql: str | None = ...,
        batch_size: int | None = ...,
        parent_id: int | None = ...,
    ) -> Response:
        """Replace all attributes of this CASS/NCOA Enhancement

        Parameters
        ----------
        id : int
            The ID for the enhancement.
        name : str
            The name of the enhancement job.
        source : dict
            - database_table : dict
                - schema : str
                    The schema name of the source table.
                - table : str
                    The name of the source table.
                - remote_host_id : int
                    The ID of the database host for the table.
                - credential_id : int
                    The id of the credentials to be used when performing the
                    enhancement.
                - multipart_key : list[str]
                    The source table primary key.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        destination : dict, optional
            - database_table : dict
                - schema : str
                    The schema name for the output data.
                - table : str
                    The table name for the output data.
        column_mapping : dict, optional
            - address1 : str
                The first address line.
            - address2 : str
                The second address line.
            - city : str
                The city of an address.
            - state : str
                The state of an address.
            - zip : str
                The zip code of an address.
            - name : str
                The full name of the resident at this address. If needed, separate
                multiple columns with `+`, e.g. `first_name+last_name`
            - company : str
                The name of the company located at this address.
        use_default_column_mapping : bool, optional
            Defaults to true, where the existing column mapping on the input table will
            be used. If false, a custom column mapping must be provided.
        perform_ncoa : bool, optional
            Whether to update addresses for records matching the National Change of
            Address (NCOA) database.
        ncoa_credential_id : int, optional
            Credential to use when performing NCOA updates. Required if 'performNcoa'
            is true.
        output_level : str, optional
            The set of fields persisted by a CASS or NCOA enhancement.For CASS
            enhancements, one of 'cass' or 'all.'For NCOA enhancements, one of 'cass',
            'ncoa' , 'coalesced' or 'all'.By default, all fields will be returned.
        limiting_sql : str, optional
            The limiting SQL for the source table. "WHERE" should be omitted (e.g.
            state='IL').
        batch_size : int, optional
            The maximum number of records processed at a time. Note that this parameter
            is not available to all users.
        parent_id : int, optional
            Parent ID that triggers this enhancement.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - source : dict
                - database_table : dict
                    - schema : str
                        The schema name of the source table.
                    - table : str
                        The name of the source table.
                    - remote_host_id : int
                        The ID of the database host for the table.
                    - credential_id : int
                        The id of the credentials to be used when performing the
                        enhancement.
                    - multipart_key : list[str]
                        The source table primary key.
            - destination : dict
                - database_table : dict
                    - schema : str
                        The schema name for the output data.
                    - table : str
                        The table name for the output data.
            - column_mapping : dict
                - address1 : str
                    The first address line.
                - address2 : str
                    The second address line.
                - city : str
                    The city of an address.
                - state : str
                    The state of an address.
                - zip : str
                    The zip code of an address.
                - name : str
                    The full name of the resident at this address. If needed, separate
                    multiple columns with `+`, e.g. `first_name+last_name`
                - company : str
                    The name of the company located at this address.
            - use_default_column_mapping : bool
                Defaults to true, where the existing column mapping on the input table
                will be used. If false, a custom column mapping must be provided.
            - perform_ncoa : bool
                Whether to update addresses for records matching the National Change of
                Address (NCOA) database.
            - ncoa_credential_id : int
                Credential to use when performing NCOA updates. Required if
                'performNcoa' is true.
            - output_level : str
                The set of fields persisted by a CASS or NCOA enhancement.For CASS
                enhancements, one of 'cass' or 'all.'For NCOA enhancements, one of
                'cass', 'ncoa' , 'coalesced' or 'all'.By default, all fields will be
                returned.
            - limiting_sql : str
                The limiting SQL for the source table. "WHERE" should be omitted (e.g.
                state='IL').
            - batch_size : int
                The maximum number of records processed at a time. Note that this
                parameter is not available to all users.
            - archived : str
                The archival status of the requested item(s).
            - parent_id : int
                Parent ID that triggers this enhancement.
        """
        ...

    def patch_cass_ncoa(
        self,
        id: int,
        name: str | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        source: dict | None = ...,
        destination: dict | None = ...,
        column_mapping: dict | None = ...,
        use_default_column_mapping: bool | None = ...,
        perform_ncoa: bool | None = ...,
        ncoa_credential_id: int | None = ...,
        output_level: str | None = ...,
        limiting_sql: str | None = ...,
        batch_size: int | None = ...,
        parent_id: int | None = ...,
    ) -> Response:
        """Update some attributes of this CASS/NCOA Enhancement

        Parameters
        ----------
        id : int
            The ID for the enhancement.
        name : str, optional
            The name of the enhancement job.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        source : dict, optional
            - database_table : dict
                - schema : str
                    The schema name of the source table.
                - table : str
                    The name of the source table.
                - remote_host_id : int
                    The ID of the database host for the table.
                - credential_id : int
                    The id of the credentials to be used when performing the
                    enhancement.
                - multipart_key : list[str]
                    The source table primary key.
        destination : dict, optional
            - database_table : dict
                - schema : str
                    The schema name for the output data.
                - table : str
                    The table name for the output data.
        column_mapping : dict, optional
            - address1 : str
                The first address line.
            - address2 : str
                The second address line.
            - city : str
                The city of an address.
            - state : str
                The state of an address.
            - zip : str
                The zip code of an address.
            - name : str
                The full name of the resident at this address. If needed, separate
                multiple columns with `+`, e.g. `first_name+last_name`
            - company : str
                The name of the company located at this address.
        use_default_column_mapping : bool, optional
            Defaults to true, where the existing column mapping on the input table will
            be used. If false, a custom column mapping must be provided.
        perform_ncoa : bool, optional
            Whether to update addresses for records matching the National Change of
            Address (NCOA) database.
        ncoa_credential_id : int, optional
            Credential to use when performing NCOA updates. Required if 'performNcoa'
            is true.
        output_level : str, optional
            The set of fields persisted by a CASS or NCOA enhancement.For CASS
            enhancements, one of 'cass' or 'all.'For NCOA enhancements, one of 'cass',
            'ncoa' , 'coalesced' or 'all'.By default, all fields will be returned.
        limiting_sql : str, optional
            The limiting SQL for the source table. "WHERE" should be omitted (e.g.
            state='IL').
        batch_size : int, optional
            The maximum number of records processed at a time. Note that this parameter
            is not available to all users.
        parent_id : int, optional
            Parent ID that triggers this enhancement.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - source : dict
                - database_table : dict
                    - schema : str
                        The schema name of the source table.
                    - table : str
                        The name of the source table.
                    - remote_host_id : int
                        The ID of the database host for the table.
                    - credential_id : int
                        The id of the credentials to be used when performing the
                        enhancement.
                    - multipart_key : list[str]
                        The source table primary key.
            - destination : dict
                - database_table : dict
                    - schema : str
                        The schema name for the output data.
                    - table : str
                        The table name for the output data.
            - column_mapping : dict
                - address1 : str
                    The first address line.
                - address2 : str
                    The second address line.
                - city : str
                    The city of an address.
                - state : str
                    The state of an address.
                - zip : str
                    The zip code of an address.
                - name : str
                    The full name of the resident at this address. If needed, separate
                    multiple columns with `+`, e.g. `first_name+last_name`
                - company : str
                    The name of the company located at this address.
            - use_default_column_mapping : bool
                Defaults to true, where the existing column mapping on the input table
                will be used. If false, a custom column mapping must be provided.
            - perform_ncoa : bool
                Whether to update addresses for records matching the National Change of
                Address (NCOA) database.
            - ncoa_credential_id : int
                Credential to use when performing NCOA updates. Required if
                'performNcoa' is true.
            - output_level : str
                The set of fields persisted by a CASS or NCOA enhancement.For CASS
                enhancements, one of 'cass' or 'all.'For NCOA enhancements, one of
                'cass', 'ncoa' , 'coalesced' or 'all'.By default, all fields will be
                returned.
            - limiting_sql : str
                The limiting SQL for the source table. "WHERE" should be omitted (e.g.
                state='IL').
            - batch_size : int
                The maximum number of records processed at a time. Note that this
                parameter is not available to all users.
            - archived : str
                The archival status of the requested item(s).
            - parent_id : int
                Parent ID that triggers this enhancement.
        """
        ...

    def post_cass_ncoa_runs(
        self,
        id: int,
    ) -> Response:
        """Start a run

        Parameters
        ----------
        id : int
            The ID of the CASS NCOA job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - cass_ncoa_id : int
                The ID of the CASS NCOA job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def list_cass_ncoa_runs(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List runs for the given CASS NCOA job

        Parameters
        ----------
        id : int
            The ID of the CASS NCOA job.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the run.
            - cass_ncoa_id : int
                The ID of the CASS NCOA job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def get_cass_ncoa_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Check status of a run

        Parameters
        ----------
        id : int
            The ID of the CASS NCOA job.
        run_id : int
            The ID of the run.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - cass_ncoa_id : int
                The ID of the CASS NCOA job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def delete_cass_ncoa_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the CASS NCOA job.
        run_id : int
            The ID of the run.

        Returns
        -------
        None
            Response code 202: success
        """
        ...

    def list_cass_ncoa_runs_logs(
        self,
        id: int,
        run_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a run

        Parameters
        ----------
        id : int
            The ID of the CASS NCOA job.
        run_id : int
            The ID of the run.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def post_cass_ncoa_cancel(
        self,
        id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - state : str
                The state of the run, one of 'queued', 'running' or 'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
        """
        ...

    def list_cass_ncoa_runs_outputs(
        self,
        id: int,
        run_id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List the outputs for a run

        Parameters
        ----------
        id : int
            The ID of the job.
        run_id : int
            The ID of the run.
        limit : int, optional
            Number of results to return. Defaults to its maximum of 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to created_at. Must be
            one of: created_at, id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - object_type : str
                The type of the output. Valid values are File, Table, Report, Project,
                Credential, or JSONValue
            - object_id : int
                The ID of the output.
            - name : str
                The name of the output.
            - link : str
                The hypermedia link to the output.
            - value : str
        """
        ...

    def post_geocode(
        self,
        name: str,
        remote_host_id: int,
        credential_id: int,
        source_schema_and_table: str,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        multipart_key: list[str] | None = ...,
        limiting_sql: str | None = ...,
        target_schema: str | None = ...,
        target_table: str | None = ...,
        country: str | None = ...,
        provider: str | None = ...,
        output_address: bool | None = ...,
        parent_id: int | None = ...,
    ) -> Response:
        """Create a Geocode Enhancement

        Parameters
        ----------
        name : str
            The name of the enhancement job.
        remote_host_id : int
            The ID of the remote host.
        credential_id : int
            The ID of the remote host credential.
        source_schema_and_table : str
            The source database schema and table.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        multipart_key : list[str], optional
            The source table primary key.
        limiting_sql : str, optional
            The limiting SQL for the source table. "WHERE" should be omitted (e.g.
            state='IL').
        target_schema : str, optional
            The output table schema.
        target_table : str, optional
            The output table name.
        country : str, optional
            The country of the addresses to be geocoded; either 'us' or 'ca'.
        provider : str, optional
            The geocoding provider; one of postgis and geocoder_ca.
        output_address : bool, optional
            Whether to output the parsed address. Only guaranteed for the 'postgis'
            provider.
        parent_id : int, optional
            Parent ID that triggers this enhancement.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - remote_host_id : int
                The ID of the remote host.
            - credential_id : int
                The ID of the remote host credential.
            - source_schema_and_table : str
                The source database schema and table.
            - multipart_key : list[str]
                The source table primary key.
            - limiting_sql : str
                The limiting SQL for the source table. "WHERE" should be omitted (e.g.
                state='IL').
            - target_schema : str
                The output table schema.
            - target_table : str
                The output table name.
            - country : str
                The country of the addresses to be geocoded; either 'us' or 'ca'.
            - provider : str
                The geocoding provider; one of postgis and geocoder_ca.
            - output_address : bool
                Whether to output the parsed address. Only guaranteed for the 'postgis'
                provider.
            - archived : str
                The archival status of the requested item(s).
            - parent_id : int
                Parent ID that triggers this enhancement.
        """
        ...

    def get_geocode(
        self,
        id: int,
    ) -> Response:
        """Get a Geocode Enhancement

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - remote_host_id : int
                The ID of the remote host.
            - credential_id : int
                The ID of the remote host credential.
            - source_schema_and_table : str
                The source database schema and table.
            - multipart_key : list[str]
                The source table primary key.
            - limiting_sql : str
                The limiting SQL for the source table. "WHERE" should be omitted (e.g.
                state='IL').
            - target_schema : str
                The output table schema.
            - target_table : str
                The output table name.
            - country : str
                The country of the addresses to be geocoded; either 'us' or 'ca'.
            - provider : str
                The geocoding provider; one of postgis and geocoder_ca.
            - output_address : bool
                Whether to output the parsed address. Only guaranteed for the 'postgis'
                provider.
            - archived : str
                The archival status of the requested item(s).
            - parent_id : int
                Parent ID that triggers this enhancement.
        """
        ...

    def put_geocode(
        self,
        id: int,
        name: str,
        remote_host_id: int,
        credential_id: int,
        source_schema_and_table: str,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        multipart_key: list[str] | None = ...,
        limiting_sql: str | None = ...,
        target_schema: str | None = ...,
        target_table: str | None = ...,
        country: str | None = ...,
        provider: str | None = ...,
        output_address: bool | None = ...,
        parent_id: int | None = ...,
    ) -> Response:
        """Replace all attributes of this Geocode Enhancement

        Parameters
        ----------
        id : int
            The ID for the enhancement.
        name : str
            The name of the enhancement job.
        remote_host_id : int
            The ID of the remote host.
        credential_id : int
            The ID of the remote host credential.
        source_schema_and_table : str
            The source database schema and table.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        multipart_key : list[str], optional
            The source table primary key.
        limiting_sql : str, optional
            The limiting SQL for the source table. "WHERE" should be omitted (e.g.
            state='IL').
        target_schema : str, optional
            The output table schema.
        target_table : str, optional
            The output table name.
        country : str, optional
            The country of the addresses to be geocoded; either 'us' or 'ca'.
        provider : str, optional
            The geocoding provider; one of postgis and geocoder_ca.
        output_address : bool, optional
            Whether to output the parsed address. Only guaranteed for the 'postgis'
            provider.
        parent_id : int, optional
            Parent ID that triggers this enhancement.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - remote_host_id : int
                The ID of the remote host.
            - credential_id : int
                The ID of the remote host credential.
            - source_schema_and_table : str
                The source database schema and table.
            - multipart_key : list[str]
                The source table primary key.
            - limiting_sql : str
                The limiting SQL for the source table. "WHERE" should be omitted (e.g.
                state='IL').
            - target_schema : str
                The output table schema.
            - target_table : str
                The output table name.
            - country : str
                The country of the addresses to be geocoded; either 'us' or 'ca'.
            - provider : str
                The geocoding provider; one of postgis and geocoder_ca.
            - output_address : bool
                Whether to output the parsed address. Only guaranteed for the 'postgis'
                provider.
            - archived : str
                The archival status of the requested item(s).
            - parent_id : int
                Parent ID that triggers this enhancement.
        """
        ...

    def patch_geocode(
        self,
        id: int,
        name: str | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        remote_host_id: int | None = ...,
        credential_id: int | None = ...,
        source_schema_and_table: str | None = ...,
        multipart_key: list[str] | None = ...,
        limiting_sql: str | None = ...,
        target_schema: str | None = ...,
        target_table: str | None = ...,
        country: str | None = ...,
        provider: str | None = ...,
        output_address: bool | None = ...,
        parent_id: int | None = ...,
    ) -> Response:
        """Update some attributes of this Geocode Enhancement

        Parameters
        ----------
        id : int
            The ID for the enhancement.
        name : str, optional
            The name of the enhancement job.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        remote_host_id : int, optional
            The ID of the remote host.
        credential_id : int, optional
            The ID of the remote host credential.
        source_schema_and_table : str, optional
            The source database schema and table.
        multipart_key : list[str], optional
            The source table primary key.
        limiting_sql : str, optional
            The limiting SQL for the source table. "WHERE" should be omitted (e.g.
            state='IL').
        target_schema : str, optional
            The output table schema.
        target_table : str, optional
            The output table name.
        country : str, optional
            The country of the addresses to be geocoded; either 'us' or 'ca'.
        provider : str, optional
            The geocoding provider; one of postgis and geocoder_ca.
        output_address : bool, optional
            Whether to output the parsed address. Only guaranteed for the 'postgis'
            provider.
        parent_id : int, optional
            Parent ID that triggers this enhancement.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - remote_host_id : int
                The ID of the remote host.
            - credential_id : int
                The ID of the remote host credential.
            - source_schema_and_table : str
                The source database schema and table.
            - multipart_key : list[str]
                The source table primary key.
            - limiting_sql : str
                The limiting SQL for the source table. "WHERE" should be omitted (e.g.
                state='IL').
            - target_schema : str
                The output table schema.
            - target_table : str
                The output table name.
            - country : str
                The country of the addresses to be geocoded; either 'us' or 'ca'.
            - provider : str
                The geocoding provider; one of postgis and geocoder_ca.
            - output_address : bool
                Whether to output the parsed address. Only guaranteed for the 'postgis'
                provider.
            - archived : str
                The archival status of the requested item(s).
            - parent_id : int
                Parent ID that triggers this enhancement.
        """
        ...

    def post_geocode_runs(
        self,
        id: int,
    ) -> Response:
        """Start a run

        Parameters
        ----------
        id : int
            The ID of the Geocode job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - geocode_id : int
                The ID of the Geocode job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def list_geocode_runs(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List runs for the given Geocode job

        Parameters
        ----------
        id : int
            The ID of the Geocode job.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the run.
            - geocode_id : int
                The ID of the Geocode job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def get_geocode_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Check status of a run

        Parameters
        ----------
        id : int
            The ID of the Geocode job.
        run_id : int
            The ID of the run.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - geocode_id : int
                The ID of the Geocode job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def delete_geocode_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the Geocode job.
        run_id : int
            The ID of the run.

        Returns
        -------
        None
            Response code 202: success
        """
        ...

    def list_geocode_runs_logs(
        self,
        id: int,
        run_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a run

        Parameters
        ----------
        id : int
            The ID of the Geocode job.
        run_id : int
            The ID of the run.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def post_geocode_cancel(
        self,
        id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - state : str
                The state of the run, one of 'queued', 'running' or 'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
        """
        ...

    def list_geocode_runs_outputs(
        self,
        id: int,
        run_id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List the outputs for a run

        Parameters
        ----------
        id : int
            The ID of the job.
        run_id : int
            The ID of the run.
        limit : int, optional
            Number of results to return. Defaults to its maximum of 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to created_at. Must be
            one of: created_at, id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - object_type : str
                The type of the output. Valid values are File, Table, Report, Project,
                Credential, or JSONValue
            - object_id : int
                The ID of the output.
            - name : str
                The name of the output.
            - link : str
                The hypermedia link to the output.
            - value : str
        """
        ...

    def list_cass_ncoa_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_cass_ncoa_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_cass_ncoa_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_cass_ncoa_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_cass_ncoa_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_cass_ncoa_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_cass_ncoa_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def list_cass_ncoa_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a CASS/NCOA Enhancement belongs to

        Parameters
        ----------
        id : int
            The ID of the CASS/NCOA Enhancement.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_cass_ncoa_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a CASS/NCOA Enhancement to a project

        Parameters
        ----------
        id : int
            The ID of the CASS/NCOA Enhancement.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_cass_ncoa_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a CASS/NCOA Enhancement from a project

        Parameters
        ----------
        id : int
            The ID of the CASS/NCOA Enhancement.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_cass_ncoa_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - source : dict
                - database_table : dict
                    - schema : str
                        The schema name of the source table.
                    - table : str
                        The name of the source table.
                    - remote_host_id : int
                        The ID of the database host for the table.
                    - credential_id : int
                        The id of the credentials to be used when performing the
                        enhancement.
                    - multipart_key : list[str]
                        The source table primary key.
            - destination : dict
                - database_table : dict
                    - schema : str
                        The schema name for the output data.
                    - table : str
                        The table name for the output data.
            - column_mapping : dict
                - address1 : str
                    The first address line.
                - address2 : str
                    The second address line.
                - city : str
                    The city of an address.
                - state : str
                    The state of an address.
                - zip : str
                    The zip code of an address.
                - name : str
                    The full name of the resident at this address. If needed, separate
                    multiple columns with `+`, e.g. `first_name+last_name`
                - company : str
                    The name of the company located at this address.
            - use_default_column_mapping : bool
                Defaults to true, where the existing column mapping on the input table
                will be used. If false, a custom column mapping must be provided.
            - perform_ncoa : bool
                Whether to update addresses for records matching the National Change of
                Address (NCOA) database.
            - ncoa_credential_id : int
                Credential to use when performing NCOA updates. Required if
                'performNcoa' is true.
            - output_level : str
                The set of fields persisted by a CASS or NCOA enhancement.For CASS
                enhancements, one of 'cass' or 'all.'For NCOA enhancements, one of
                'cass', 'ncoa' , 'coalesced' or 'all'.By default, all fields will be
                returned.
            - limiting_sql : str
                The limiting SQL for the source table. "WHERE" should be omitted (e.g.
                state='IL').
            - batch_size : int
                The maximum number of records processed at a time. Note that this
                parameter is not available to all users.
            - archived : str
                The archival status of the requested item(s).
            - parent_id : int
                Parent ID that triggers this enhancement.
        """
        ...

    def list_geocode_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_geocode_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_geocode_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_geocode_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_geocode_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_geocode_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_geocode_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def list_geocode_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a Geocode Enhancement belongs to

        Parameters
        ----------
        id : int
            The ID of the Geocode Enhancement.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_geocode_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a Geocode Enhancement to a project

        Parameters
        ----------
        id : int
            The ID of the Geocode Enhancement.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_geocode_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a Geocode Enhancement from a project

        Parameters
        ----------
        id : int
            The ID of the Geocode Enhancement.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_geocode_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - remote_host_id : int
                The ID of the remote host.
            - credential_id : int
                The ID of the remote host credential.
            - source_schema_and_table : str
                The source database schema and table.
            - multipart_key : list[str]
                The source table primary key.
            - limiting_sql : str
                The limiting SQL for the source table. "WHERE" should be omitted (e.g.
                state='IL').
            - target_schema : str
                The output table schema.
            - target_table : str
                The output table name.
            - country : str
                The country of the addresses to be geocoded; either 'us' or 'ca'.
            - provider : str
                The geocoding provider; one of postgis and geocoder_ca.
            - output_address : bool
                Whether to output the parsed address. Only guaranteed for the 'postgis'
                provider.
            - archived : str
                The archival status of the requested item(s).
            - parent_id : int
                Parent ID that triggers this enhancement.
        """
        ...

    def list_identity_resolution_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_identity_resolution_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_identity_resolution_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_identity_resolution_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_identity_resolution_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_identity_resolution_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_identity_resolution_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def list_identity_resolution_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects an Identity Resolution Enhancement belongs to

        Parameters
        ----------
        id : int
            The ID of the Identity Resolution Enhancement.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_identity_resolution_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add an Identity Resolution Enhancement to a project

        Parameters
        ----------
        id : int
            The ID of the Identity Resolution Enhancement.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_identity_resolution_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove an Identity Resolution Enhancement from a project

        Parameters
        ----------
        id : int
            The ID of the Identity Resolution Enhancement.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_identity_resolution_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the enhancement.
            - name : str
                The name of the enhancement job.
            - type : str
                The type of the enhancement (e.g CASS-NCOA)
            - created_at : str (time)
                The time this enhancement was created.
            - updated_at : str (time)
                The time the enhancement was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the enhancement's last run
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - threshold : float (float)
                A value that determines the extent to which similar records get
                assigned the same resolved ID. Must be within 0.5 and 1, inclusive.
                Defaults to 0.8 if unspecified.Higher values may result in fewer cases
                where records about different individuals erroneously receive the same
                resolved ID, but also more more cases where records about the same
                individual receive different resolved IDs.
            - sources : list[dict]
                The source(s) to resolve via a run of this job.

                - name : str
                    A user-specified name for the source.
                - description : str
                    A description of the source.
                - database_name : str
                    The name of the source database.
                - schema_name : str
                    The name of the source schema.
                - table_name : str
                    The name of the source table.
                - field_mapping : dict
                    A mapping of PII fields to columns in this table. Valid keys are
                    primary_key, first_name, middle_name, last_name, gender, phone,
                    email, birth_date, birth_year, birth_month, birth_day,
                    house_number, street, unit, full_address, city, state, state_code,
                    zip, lat, lon, and name_suffix
            - match_target_id : int
                The ID of the Civis Data (Custom) match target. See /match_targets for
                IDs.
            - enforced_links : list[dict]
                A specification of related columns in different sources. The IDR tool
                will ensure that records with the same values in the specified columns
                receive the same Resolved ID.

                - source1 : str
                    Name of the first source. Must be defined in Sources list.
                - source1_join_col : str
                    Column from the first source to join on.
                - source2 : str
                    Name of the second source. Must be defined in Sources list
                - source2_join_col : str
                    Column from the second source to join on.
            - customer_graph : dict
                - database_name : str
                    The name of the destination database.
                - schema_name : str
                    The name of the destination schema.
                - table_name : str
                    The name of the destination table.
            - golden_table : dict
                - database_name : str
                    The name of the destination database.
                - schema_name : str
                    The name of the destination schema.
                - table_name : str
                    The name of the destination table.
                - fields : list[dict]
                    - field_name : str
                        The name of the field. Must be one of: first_name, middle_name,
                        last_name, name_suffix, email, phone, birth_month, birth_day,
                        birth_year, gender, address, house_number, street, unit, city,
                        state_code, and zip.
                    - rule_type : str
                        One of ["automatic", "preferred_source"]. Determines how the
                        system will choose the value for a record. "automatic" will use
                        the most frequent well-formatted value. "preferred_source"
                        allows the user to prioritize values from particular sources
                        over others.
                    - source_preferences : list[dict]
                        Rank order for sources, when rule_type is "preferred_source".

                        - source_name : str
                            The name of the source.
                        - ranking : int
                            How preferred this source is for the given field. Rankings
                            are zero-indexed and lower rank values are preferred to
                            higher ones.
            - link_scores : dict
                - database_name : str
                    The name of the destination database.
                - schema_name : str
                    The name of the destination schema.
                - table_name : str
                    The name of the destination table.
            - legacy_id : int
                ID of this pipeline in the legacy IDR service application.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
                - config : str
                    How the Identity Resolution job was configured for this run.
                - sample_records_query : str
                    A SQL query to produce a sample of records to inspect.
                - expand_cluster_query : str
                    A customizable query to view PII associated with resolved ids.
                - run_metrics : dict
                    - num_records : int
                        The number of input records for this run.
                    - unique_ids : int
                        The number of distinct unique IDs in the input records for this
                        run.
                    - unique_deduplicated_ids : int
                        The number of resolved IDs associated with more than one unique
                        ID in the input.
                    - max_cluster_size : int
                        The number of records in the largest cluster of resolved IDs.
                    - avg_cluster_size : float (float)
                        The average number of records with the same resolved ID.
                    - cluster_size_frequencies : dict
                        A mapping from numbers of records with the same resolved ID
                        (i.e., sizes of clusters) to numbers of such clusters. For
                        example, if there were 10 clusters with 2 records each, 2 would
                        be a key in the mapping, and 10 would be its value.
                - error_section : str
                    If there was a failure, this will denote which section of the
                    Identity Resolution job failed. One of: data_preparation,
                    compute_setup or data_processing.
        """
        ...

class _Exports:
    def list(
        self,
        type: str | None = ...,
        status: str | None = ...,
        author: str | None = ...,
        hidden: bool | None = ...,
        archived: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List

        Parameters
        ----------
        type : str, optional
            If specified, return exports of these types. It accepts a comma-separated
            list, possible values are 'database' and 'gdoc'.
        status : str, optional
            If specified, returns export with one of these statuses. It accepts a
            comma-separated list, possible values are 'running', 'failed', 'succeeded',
            'idle', 'scheduled'.
        author : str, optional
            If specified, return items from any of these authors. It accepts a comma-
            separated list of user IDs.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.
        archived : str, optional
            The archival status of the requested item(s).
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to updated_at. Must be
            one of: updated_at, name, created_at, last_run.updated_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID for this export.
            - name : str
                The name of this export.
            - type : str
                The type of export.
            - created_at : str (time)
                The creation time for this export.
            - updated_at : str (time)
                The last modification time for this export.
            - state : str
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
        """
        ...

    def post_files_csv_runs(
        self,
        id: int,
    ) -> Response:
        """Start a run

        Parameters
        ----------
        id : int
            The ID of the CSV Export job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - state : str
            - created_at : str (time)
                The time that the run was queued.
            - started_at : str (time)
                The time that the run started.
            - finished_at : str (time)
                The time that the run completed.
            - error : str
                The error message for this run, if present.
            - output_cached_on : str (time)
                The time that the output was originally exported, if a cache entry was
                used by the run.
        """
        ...

    def list_files_csv_runs(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List runs for the given CSV Export job

        Parameters
        ----------
        id : int
            The ID of the CSV Export job.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
            - state : str
            - created_at : str (time)
                The time that the run was queued.
            - started_at : str (time)
                The time that the run started.
            - finished_at : str (time)
                The time that the run completed.
            - error : str
                The error message for this run, if present.
        """
        ...

    def get_files_csv_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Check status of a run

        Parameters
        ----------
        id : int
            The ID of the CSV Export job.
        run_id : int
            The ID of the run.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - state : str
            - created_at : str (time)
                The time that the run was queued.
            - started_at : str (time)
                The time that the run started.
            - finished_at : str (time)
                The time that the run completed.
            - error : str
                The error message for this run, if present.
            - output_cached_on : str (time)
                The time that the output was originally exported, if a cache entry was
                used by the run.
        """
        ...

    def delete_files_csv_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the CSV Export job.
        run_id : int
            The ID of the run.

        Returns
        -------
        None
            Response code 202: success
        """
        ...

    def list_files_csv_runs_logs(
        self,
        id: int,
        run_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a run

        Parameters
        ----------
        id : int
            The ID of the CSV Export job.
        run_id : int
            The ID of the run.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def list_files_csv_runs_outputs(
        self,
        id: int,
        run_id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List the outputs for a run

        Parameters
        ----------
        id : int
            The ID of the csv_export.
        run_id : int
            The ID of the run.
        limit : int, optional
            Number of results to return. Defaults to its maximum of 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to created_at. Must be
            one of: created_at, id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - object_type : str
                The type of the output. Valid values are File, Table, Report, Project,
                Credential, or JSONValue
            - object_id : int
                The ID of the output.
            - name : str
                The name of the output.
            - link : str
                The hypermedia link to the output.
            - value : str
        """
        ...

    def post_files_csv(
        self,
        source: dict,
        destination: dict,
        name: str | None = ...,
        include_header: bool | None = ...,
        compression: str | None = ...,
        column_delimiter: str | None = ...,
        hidden: bool | None = ...,
        force_multifile: bool | None = ...,
        max_file_size: int | None = ...,
    ) -> Response:
        """Create a CSV Export

        Parameters
        ----------
        source : dict
            - sql : str
                The SQL query for this Csv Export job
            - remote_host_id : int
                The ID of the destination database host.
            - credential_id : int
                The ID of the credentials for the destination database.
        destination : dict
            - filename_prefix : str
                The prefix of the name of the file returned to the user.
            - storage_path : dict
                - file_path : str
                    The path within the bucket where the exported file will be saved.
                    E.g. the file_path for "s3://mybucket/files/all/" would be
                    "/files/all/"
                - storage_host_id : int
                    The ID of the destination storage host.
                - credential_id : int
                    The ID of the credentials for the destination storage host.
                - existing_files : str
                    Notifies the job of what to do in the case that the exported file
                    already exists at the provided path.One of: fail, append,
                    overwrite. Default: fail. If "append" is specified,the new file
                    will always be added to the provided path. If "overwrite" is
                    specifiedall existing files at the provided path will be deleted
                    and the new file will be added.By default, or if "fail" is
                    specified, the export will fail if a file exists at the provided
                    path.
        name : str, optional
            The name of this Csv Export job.
        include_header : bool, optional
            A boolean value indicating whether or not the header should be included.
            Defaults to true.
        compression : str, optional
            The compression of the output file. Valid arguments are "gzip" and "none".
            Defaults to "gzip".
        column_delimiter : str, optional
            The column delimiter for the output file. Valid arguments are "comma",
            "tab", and "pipe". Defaults to "comma".
        hidden : bool, optional
            A boolean value indicating whether or not this request should be hidden.
            Defaults to false.
        force_multifile : bool, optional
            Whether or not the csv should be split into multiple files. Default: false
        max_file_size : int, optional
            The max file size, in MB, created files will be. Only available when
            force_multifile is true.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this Csv Export job.
            - name : str
                The name of this Csv Export job.
            - source : dict
                - sql : str
                    The SQL query for this Csv Export job
                - remote_host_id : int
                    The ID of the destination database host.
                - credential_id : int
                    The ID of the credentials for the destination database.
            - destination : dict
                - filename_prefix : str
                    The prefix of the name of the file returned to the user.
                - storage_path : dict
                    - file_path : str
                        The path within the bucket where the exported file will be
                        saved. E.g. the file_path for "s3://mybucket/files/all/" would
                        be "/files/all/"
                    - storage_host_id : int
                        The ID of the destination storage host.
                    - credential_id : int
                        The ID of the credentials for the destination storage host.
                    - existing_files : str
                        Notifies the job of what to do in the case that the exported
                        file already exists at the provided path.One of: fail, append,
                        overwrite. Default: fail. If "append" is specified,the new file
                        will always be added to the provided path. If "overwrite" is
                        specifiedall existing files at the provided path will be
                        deleted and the new file will be added.By default, or if "fail"
                        is specified, the export will fail if a file exists at the
                        provided path.
            - include_header : bool
                A boolean value indicating whether or not the header should be
                included. Defaults to true.
            - compression : str
                The compression of the output file. Valid arguments are "gzip" and
                "none". Defaults to "gzip".
            - column_delimiter : str
                The column delimiter for the output file. Valid arguments are "comma",
                "tab", and "pipe". Defaults to "comma".
            - hidden : bool
                A boolean value indicating whether or not this request should be
                hidden. Defaults to false.
            - force_multifile : bool
                Whether or not the csv should be split into multiple files. Default:
                false
            - max_file_size : int
                The max file size, in MB, created files will be. Only available when
                force_multifile is true.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def get_files_csv(
        self,
        id: int,
    ) -> Response:
        """Get a CSV Export

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this Csv Export job.
            - name : str
                The name of this Csv Export job.
            - source : dict
                - sql : str
                    The SQL query for this Csv Export job
                - remote_host_id : int
                    The ID of the destination database host.
                - credential_id : int
                    The ID of the credentials for the destination database.
            - destination : dict
                - filename_prefix : str
                    The prefix of the name of the file returned to the user.
                - storage_path : dict
                    - file_path : str
                        The path within the bucket where the exported file will be
                        saved. E.g. the file_path for "s3://mybucket/files/all/" would
                        be "/files/all/"
                    - storage_host_id : int
                        The ID of the destination storage host.
                    - credential_id : int
                        The ID of the credentials for the destination storage host.
                    - existing_files : str
                        Notifies the job of what to do in the case that the exported
                        file already exists at the provided path.One of: fail, append,
                        overwrite. Default: fail. If "append" is specified,the new file
                        will always be added to the provided path. If "overwrite" is
                        specifiedall existing files at the provided path will be
                        deleted and the new file will be added.By default, or if "fail"
                        is specified, the export will fail if a file exists at the
                        provided path.
            - include_header : bool
                A boolean value indicating whether or not the header should be
                included. Defaults to true.
            - compression : str
                The compression of the output file. Valid arguments are "gzip" and
                "none". Defaults to "gzip".
            - column_delimiter : str
                The column delimiter for the output file. Valid arguments are "comma",
                "tab", and "pipe". Defaults to "comma".
            - hidden : bool
                A boolean value indicating whether or not this request should be
                hidden. Defaults to false.
            - force_multifile : bool
                Whether or not the csv should be split into multiple files. Default:
                false
            - max_file_size : int
                The max file size, in MB, created files will be. Only available when
                force_multifile is true.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def put_files_csv(
        self,
        id: int,
        source: dict,
        destination: dict,
        name: str | None = ...,
        include_header: bool | None = ...,
        compression: str | None = ...,
        column_delimiter: str | None = ...,
        hidden: bool | None = ...,
        force_multifile: bool | None = ...,
        max_file_size: int | None = ...,
    ) -> Response:
        """Replace all attributes of this CSV Export

        Parameters
        ----------
        id : int
            The ID of this Csv Export job.
        source : dict
            - sql : str
                The SQL query for this Csv Export job
            - remote_host_id : int
                The ID of the destination database host.
            - credential_id : int
                The ID of the credentials for the destination database.
        destination : dict
            - filename_prefix : str
                The prefix of the name of the file returned to the user.
            - storage_path : dict
                - file_path : str
                    The path within the bucket where the exported file will be saved.
                    E.g. the file_path for "s3://mybucket/files/all/" would be
                    "/files/all/"
                - storage_host_id : int
                    The ID of the destination storage host.
                - credential_id : int
                    The ID of the credentials for the destination storage host.
                - existing_files : str
                    Notifies the job of what to do in the case that the exported file
                    already exists at the provided path.One of: fail, append,
                    overwrite. Default: fail. If "append" is specified,the new file
                    will always be added to the provided path. If "overwrite" is
                    specifiedall existing files at the provided path will be deleted
                    and the new file will be added.By default, or if "fail" is
                    specified, the export will fail if a file exists at the provided
                    path.
        name : str, optional
            The name of this Csv Export job.
        include_header : bool, optional
            A boolean value indicating whether or not the header should be included.
            Defaults to true.
        compression : str, optional
            The compression of the output file. Valid arguments are "gzip" and "none".
            Defaults to "gzip".
        column_delimiter : str, optional
            The column delimiter for the output file. Valid arguments are "comma",
            "tab", and "pipe". Defaults to "comma".
        hidden : bool, optional
            A boolean value indicating whether or not this request should be hidden.
            Defaults to false.
        force_multifile : bool, optional
            Whether or not the csv should be split into multiple files. Default: false
        max_file_size : int, optional
            The max file size, in MB, created files will be. Only available when
            force_multifile is true.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this Csv Export job.
            - name : str
                The name of this Csv Export job.
            - source : dict
                - sql : str
                    The SQL query for this Csv Export job
                - remote_host_id : int
                    The ID of the destination database host.
                - credential_id : int
                    The ID of the credentials for the destination database.
            - destination : dict
                - filename_prefix : str
                    The prefix of the name of the file returned to the user.
                - storage_path : dict
                    - file_path : str
                        The path within the bucket where the exported file will be
                        saved. E.g. the file_path for "s3://mybucket/files/all/" would
                        be "/files/all/"
                    - storage_host_id : int
                        The ID of the destination storage host.
                    - credential_id : int
                        The ID of the credentials for the destination storage host.
                    - existing_files : str
                        Notifies the job of what to do in the case that the exported
                        file already exists at the provided path.One of: fail, append,
                        overwrite. Default: fail. If "append" is specified,the new file
                        will always be added to the provided path. If "overwrite" is
                        specifiedall existing files at the provided path will be
                        deleted and the new file will be added.By default, or if "fail"
                        is specified, the export will fail if a file exists at the
                        provided path.
            - include_header : bool
                A boolean value indicating whether or not the header should be
                included. Defaults to true.
            - compression : str
                The compression of the output file. Valid arguments are "gzip" and
                "none". Defaults to "gzip".
            - column_delimiter : str
                The column delimiter for the output file. Valid arguments are "comma",
                "tab", and "pipe". Defaults to "comma".
            - hidden : bool
                A boolean value indicating whether or not this request should be
                hidden. Defaults to false.
            - force_multifile : bool
                Whether or not the csv should be split into multiple files. Default:
                false
            - max_file_size : int
                The max file size, in MB, created files will be. Only available when
                force_multifile is true.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def patch_files_csv(
        self,
        id: int,
        name: str | None = ...,
        source: dict | None = ...,
        destination: dict | None = ...,
        include_header: bool | None = ...,
        compression: str | None = ...,
        column_delimiter: str | None = ...,
        hidden: bool | None = ...,
        force_multifile: bool | None = ...,
        max_file_size: int | None = ...,
    ) -> Response:
        """Update some attributes of this CSV Export

        Parameters
        ----------
        id : int
            The ID of this Csv Export job.
        name : str, optional
            The name of this Csv Export job.
        source : dict, optional
            - sql : str
                The SQL query for this Csv Export job
            - remote_host_id : int
                The ID of the destination database host.
            - credential_id : int
                The ID of the credentials for the destination database.
        destination : dict, optional
            - filename_prefix : str
                The prefix of the name of the file returned to the user.
            - storage_path : dict
                - file_path : str
                    The path within the bucket where the exported file will be saved.
                    E.g. the file_path for "s3://mybucket/files/all/" would be
                    "/files/all/"
                - storage_host_id : int
                    The ID of the destination storage host.
                - credential_id : int
                    The ID of the credentials for the destination storage host.
                - existing_files : str
                    Notifies the job of what to do in the case that the exported file
                    already exists at the provided path.One of: fail, append,
                    overwrite. Default: fail. If "append" is specified,the new file
                    will always be added to the provided path. If "overwrite" is
                    specifiedall existing files at the provided path will be deleted
                    and the new file will be added.By default, or if "fail" is
                    specified, the export will fail if a file exists at the provided
                    path.
        include_header : bool, optional
            A boolean value indicating whether or not the header should be included.
            Defaults to true.
        compression : str, optional
            The compression of the output file. Valid arguments are "gzip" and "none".
            Defaults to "gzip".
        column_delimiter : str, optional
            The column delimiter for the output file. Valid arguments are "comma",
            "tab", and "pipe". Defaults to "comma".
        hidden : bool, optional
            A boolean value indicating whether or not this request should be hidden.
            Defaults to false.
        force_multifile : bool, optional
            Whether or not the csv should be split into multiple files. Default: false
        max_file_size : int, optional
            The max file size, in MB, created files will be. Only available when
            force_multifile is true.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this Csv Export job.
            - name : str
                The name of this Csv Export job.
            - source : dict
                - sql : str
                    The SQL query for this Csv Export job
                - remote_host_id : int
                    The ID of the destination database host.
                - credential_id : int
                    The ID of the credentials for the destination database.
            - destination : dict
                - filename_prefix : str
                    The prefix of the name of the file returned to the user.
                - storage_path : dict
                    - file_path : str
                        The path within the bucket where the exported file will be
                        saved. E.g. the file_path for "s3://mybucket/files/all/" would
                        be "/files/all/"
                    - storage_host_id : int
                        The ID of the destination storage host.
                    - credential_id : int
                        The ID of the credentials for the destination storage host.
                    - existing_files : str
                        Notifies the job of what to do in the case that the exported
                        file already exists at the provided path.One of: fail, append,
                        overwrite. Default: fail. If "append" is specified,the new file
                        will always be added to the provided path. If "overwrite" is
                        specifiedall existing files at the provided path will be
                        deleted and the new file will be added.By default, or if "fail"
                        is specified, the export will fail if a file exists at the
                        provided path.
            - include_header : bool
                A boolean value indicating whether or not the header should be
                included. Defaults to true.
            - compression : str
                The compression of the output file. Valid arguments are "gzip" and
                "none". Defaults to "gzip".
            - column_delimiter : str
                The column delimiter for the output file. Valid arguments are "comma",
                "tab", and "pipe". Defaults to "comma".
            - hidden : bool
                A boolean value indicating whether or not this request should be
                hidden. Defaults to false.
            - force_multifile : bool
                Whether or not the csv should be split into multiple files. Default:
                false
            - max_file_size : int
                The max file size, in MB, created files will be. Only available when
                force_multifile is true.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def put_files_csv_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this Csv Export job.
            - name : str
                The name of this Csv Export job.
            - source : dict
                - sql : str
                    The SQL query for this Csv Export job
                - remote_host_id : int
                    The ID of the destination database host.
                - credential_id : int
                    The ID of the credentials for the destination database.
            - destination : dict
                - filename_prefix : str
                    The prefix of the name of the file returned to the user.
                - storage_path : dict
                    - file_path : str
                        The path within the bucket where the exported file will be
                        saved. E.g. the file_path for "s3://mybucket/files/all/" would
                        be "/files/all/"
                    - storage_host_id : int
                        The ID of the destination storage host.
                    - credential_id : int
                        The ID of the credentials for the destination storage host.
                    - existing_files : str
                        Notifies the job of what to do in the case that the exported
                        file already exists at the provided path.One of: fail, append,
                        overwrite. Default: fail. If "append" is specified,the new file
                        will always be added to the provided path. If "overwrite" is
                        specifiedall existing files at the provided path will be
                        deleted and the new file will be added.By default, or if "fail"
                        is specified, the export will fail if a file exists at the
                        provided path.
            - include_header : bool
                A boolean value indicating whether or not the header should be
                included. Defaults to true.
            - compression : str
                The compression of the output file. Valid arguments are "gzip" and
                "none". Defaults to "gzip".
            - column_delimiter : str
                The column delimiter for the output file. Valid arguments are "comma",
                "tab", and "pipe". Defaults to "comma".
            - hidden : bool
                A boolean value indicating whether or not this request should be
                hidden. Defaults to false.
            - force_multifile : bool
                Whether or not the csv should be split into multiple files. Default:
                false
            - max_file_size : int
                The max file size, in MB, created files will be. Only available when
                force_multifile is true.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

class _Files:
    def list_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a File belongs to

        Parameters
        ----------
        id : int
            The ID of the File.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a File to a project

        Parameters
        ----------
        id : int
            The ID of the File.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a File from a project

        Parameters
        ----------
        id : int
            The ID of the File.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def post(
        self,
        name: str,
        expires_at: str | None = ...,
    ) -> Response:
        """Initiate an upload of a file into the platform

        Parameters
        ----------
        name : str
            The file name.
        expires_at : str (date-time), optional
            The date and time the file will expire. If not specified, the file will
            expire in 30 days. To keep a file indefinitely, specify null.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the file.
            - name : str
                The file name.
            - created_at : str (date-time)
                The date and time the file was created.
            - file_size : int
                The file size.
            - expires_at : str (date-time)
                The date and time the file will expire. If not specified, the file will
                expire in 30 days. To keep a file indefinitely, specify null.
            - upload_url : str
                The URL that may be used to upload a file. To use the upload URL,
                initiate a POST request to the given URL with the file you wish to
                import as the "file" form field.
            - upload_fields : dict
                A hash containing the form fields to be included with the POST request.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def post_multipart(
        self,
        name: str,
        num_parts: int,
        expires_at: str | None = ...,
    ) -> Response:
        """Initiate a multipart upload

        Parameters
        ----------
        name : str
            The file name.
        num_parts : int
            The number of parts in which the file will be uploaded. This parameter
            determines the number of presigned URLs that are returned.
        expires_at : str (date-time), optional
            The date and time the file will expire. If not specified, the file will
            expire in 30 days. To keep a file indefinitely, specify null.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the file.
            - name : str
                The file name.
            - created_at : str (date-time)
                The date and time the file was created.
            - file_size : int
                The file size.
            - expires_at : str (date-time)
                The date and time the file will expire. If not specified, the file will
                expire in 30 days. To keep a file indefinitely, specify null.
            - upload_urls : list[str]
                An array of URLs that may be used to upload file parts. Use separate
                PUT requests to complete the part uploads. Links expire after 12 hours.
        """
        ...

    def post_multipart_complete(
        self,
        id: int,
    ) -> Response:
        """Complete a multipart upload

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def get(
        self,
        id: int,
        link_expires_at: str | None = ...,
        inline: bool | None = ...,
    ) -> Response:
        """Get details about a file

        Parameters
        ----------
        id : int
            The ID of the file.
        link_expires_at : str, optional
            The date and time the download link will expire. Must be a time between now
            and 36 hours from now. Defaults to 30 minutes from now.
        inline : bool, optional
            If true, will return a url that can be displayed inline in HTML

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the file.
            - name : str
                The file name.
            - created_at : str (date-time)
                The date and time the file was created.
            - file_size : int
                The file size.
            - expires_at : str (date-time)
                The date and time the file will expire. If not specified, the file will
                expire in 30 days. To keep a file indefinitely, specify null.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - download_url : str
                A JSON string containing information about the URL of the file.
            - file_url : str
                The URL that may be used to download the file.
            - detected_info : dict
                - include_header : bool
                    A boolean value indicating whether or not the first row of the file
                    is a header row.
                - column_delimiter : str
                    The column delimiter for the file. One of "comma", "tab", or
                    "pipe".
                - compression : str
                    The type of compression of the file. One of "gzip", or "none".
                - table_columns : list[dict]
                    An array of hashes corresponding to the columns in the file. Each
                    hash should have keys for column "name" and "sql_type"

                    - name : str
                        The column name.
                    - sql_type : str
                        The SQL type of the column.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def put(
        self,
        id: int,
        name: str,
        expires_at: str,
    ) -> Response:
        """Update details about a file

        Parameters
        ----------
        id : int
            The ID of the file.
        name : str
            The file name. The extension must match the previous extension.
        expires_at : str (date-time)
            The date and time the file will expire.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the file.
            - name : str
                The file name.
            - created_at : str (date-time)
                The date and time the file was created.
            - file_size : int
                The file size.
            - expires_at : str (date-time)
                The date and time the file will expire. If not specified, the file will
                expire in 30 days. To keep a file indefinitely, specify null.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - download_url : str
                A JSON string containing information about the URL of the file.
            - file_url : str
                The URL that may be used to download the file.
            - detected_info : dict
                - include_header : bool
                    A boolean value indicating whether or not the first row of the file
                    is a header row.
                - column_delimiter : str
                    The column delimiter for the file. One of "comma", "tab", or
                    "pipe".
                - compression : str
                    The type of compression of the file. One of "gzip", or "none".
                - table_columns : list[dict]
                    An array of hashes corresponding to the columns in the file. Each
                    hash should have keys for column "name" and "sql_type"

                    - name : str
                        The column name.
                    - sql_type : str
                        The SQL type of the column.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def patch(
        self,
        id: int,
        name: str | None = ...,
        expires_at: str | None = ...,
    ) -> Response:
        """Update details about a file

        Parameters
        ----------
        id : int
            The ID of the file.
        name : str, optional
            The file name. The extension must match the previous extension.
        expires_at : str (date-time), optional
            The date and time the file will expire.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the file.
            - name : str
                The file name.
            - created_at : str (date-time)
                The date and time the file was created.
            - file_size : int
                The file size.
            - expires_at : str (date-time)
                The date and time the file will expire. If not specified, the file will
                expire in 30 days. To keep a file indefinitely, specify null.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - download_url : str
                A JSON string containing information about the URL of the file.
            - file_url : str
                The URL that may be used to download the file.
            - detected_info : dict
                - include_header : bool
                    A boolean value indicating whether or not the first row of the file
                    is a header row.
                - column_delimiter : str
                    The column delimiter for the file. One of "comma", "tab", or
                    "pipe".
                - compression : str
                    The type of compression of the file. One of "gzip", or "none".
                - table_columns : list[dict]
                    An array of hashes corresponding to the columns in the file. Each
                    hash should have keys for column "name" and "sql_type"

                    - name : str
                        The column name.
                    - sql_type : str
                        The SQL type of the column.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def post_preprocess_csv(
        self,
        file_id: int,
        in_place: bool | None = ...,
        detect_table_columns: bool | None = ...,
        force_character_set_conversion: bool | None = ...,
        include_header: bool | None = ...,
        column_delimiter: str | None = ...,
        hidden: bool | None = ...,
    ) -> Response:
        """Create a Preprocess CSV

        Parameters
        ----------
        file_id : int
            The ID of the file.
        in_place : bool, optional
            If true, the file is cleaned in place. If false, a new file ID is created.
            Defaults to true.
        detect_table_columns : bool, optional
            If true, detect the table columns in the file including the sql types. If
            false, skip table column detection.Defaults to false.
        force_character_set_conversion : bool, optional
            If true, the file will always be converted to UTF-8 and any character that
            cannot be converted will be discarded. If false, the character set
            conversion will only run if the detected character set is not compatible
            with UTF-8 (e.g., UTF-8, ASCII).
        include_header : bool, optional
            A boolean value indicating whether or not the first row of the file is a
            header row. If not provided, will attempt to auto-detect whether a header
            row is present.
        column_delimiter : str, optional
            The column delimiter for the file. One of "comma", "tab", or "pipe". If not
            provided, the column delimiter will be auto-detected.
        hidden : bool, optional
            The hidden status of the item.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the job created.
            - file_id : int
                The ID of the file.
            - in_place : bool
                If true, the file is cleaned in place. If false, a new file ID is
                created. Defaults to true.
            - detect_table_columns : bool
                If true, detect the table columns in the file including the sql types.
                If false, skip table column detection.Defaults to false.
            - force_character_set_conversion : bool
                If true, the file will always be converted to UTF-8 and any character
                that cannot be converted will be discarded. If false, the character set
                conversion will only run if the detected character set is not
                compatible with UTF-8 (e.g., UTF-8, ASCII).
            - include_header : bool
                A boolean value indicating whether or not the first row of the file is
                a header row. If not provided, will attempt to auto-detect whether a
                header row is present.
            - column_delimiter : str
                The column delimiter for the file. One of "comma", "tab", or "pipe". If
                not provided, the column delimiter will be auto-detected.
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def get_preprocess_csv(
        self,
        id: int,
    ) -> Response:
        """Get a Preprocess CSV

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the job created.
            - file_id : int
                The ID of the file.
            - in_place : bool
                If true, the file is cleaned in place. If false, a new file ID is
                created. Defaults to true.
            - detect_table_columns : bool
                If true, detect the table columns in the file including the sql types.
                If false, skip table column detection.Defaults to false.
            - force_character_set_conversion : bool
                If true, the file will always be converted to UTF-8 and any character
                that cannot be converted will be discarded. If false, the character set
                conversion will only run if the detected character set is not
                compatible with UTF-8 (e.g., UTF-8, ASCII).
            - include_header : bool
                A boolean value indicating whether or not the first row of the file is
                a header row. If not provided, will attempt to auto-detect whether a
                header row is present.
            - column_delimiter : str
                The column delimiter for the file. One of "comma", "tab", or "pipe". If
                not provided, the column delimiter will be auto-detected.
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def put_preprocess_csv(
        self,
        id: int,
        file_id: int,
        in_place: bool | None = ...,
        detect_table_columns: bool | None = ...,
        force_character_set_conversion: bool | None = ...,
        include_header: bool | None = ...,
        column_delimiter: str | None = ...,
    ) -> Response:
        """Replace all attributes of this Preprocess CSV

        Parameters
        ----------
        id : int
            The ID of the job created.
        file_id : int
            The ID of the file.
        in_place : bool, optional
            If true, the file is cleaned in place. If false, a new file ID is created.
            Defaults to true.
        detect_table_columns : bool, optional
            If true, detect the table columns in the file including the sql types. If
            false, skip table column detection.Defaults to false.
        force_character_set_conversion : bool, optional
            If true, the file will always be converted to UTF-8 and any character that
            cannot be converted will be discarded. If false, the character set
            conversion will only run if the detected character set is not compatible
            with UTF-8 (e.g., UTF-8, ASCII).
        include_header : bool, optional
            A boolean value indicating whether or not the first row of the file is a
            header row. If not provided, will attempt to auto-detect whether a header
            row is present.
        column_delimiter : str, optional
            The column delimiter for the file. One of "comma", "tab", or "pipe". If not
            provided, the column delimiter will be auto-detected.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the job created.
            - file_id : int
                The ID of the file.
            - in_place : bool
                If true, the file is cleaned in place. If false, a new file ID is
                created. Defaults to true.
            - detect_table_columns : bool
                If true, detect the table columns in the file including the sql types.
                If false, skip table column detection.Defaults to false.
            - force_character_set_conversion : bool
                If true, the file will always be converted to UTF-8 and any character
                that cannot be converted will be discarded. If false, the character set
                conversion will only run if the detected character set is not
                compatible with UTF-8 (e.g., UTF-8, ASCII).
            - include_header : bool
                A boolean value indicating whether or not the first row of the file is
                a header row. If not provided, will attempt to auto-detect whether a
                header row is present.
            - column_delimiter : str
                The column delimiter for the file. One of "comma", "tab", or "pipe". If
                not provided, the column delimiter will be auto-detected.
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def patch_preprocess_csv(
        self,
        id: int,
        file_id: int | None = ...,
        in_place: bool | None = ...,
        detect_table_columns: bool | None = ...,
        force_character_set_conversion: bool | None = ...,
        include_header: bool | None = ...,
        column_delimiter: str | None = ...,
    ) -> Response:
        """Update some attributes of this Preprocess CSV

        Parameters
        ----------
        id : int
            The ID of the job created.
        file_id : int, optional
            The ID of the file.
        in_place : bool, optional
            If true, the file is cleaned in place. If false, a new file ID is created.
            Defaults to true.
        detect_table_columns : bool, optional
            If true, detect the table columns in the file including the sql types. If
            false, skip table column detection.Defaults to false.
        force_character_set_conversion : bool, optional
            If true, the file will always be converted to UTF-8 and any character that
            cannot be converted will be discarded. If false, the character set
            conversion will only run if the detected character set is not compatible
            with UTF-8 (e.g., UTF-8, ASCII).
        include_header : bool, optional
            A boolean value indicating whether or not the first row of the file is a
            header row. If not provided, will attempt to auto-detect whether a header
            row is present.
        column_delimiter : str, optional
            The column delimiter for the file. One of "comma", "tab", or "pipe". If not
            provided, the column delimiter will be auto-detected.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the job created.
            - file_id : int
                The ID of the file.
            - in_place : bool
                If true, the file is cleaned in place. If false, a new file ID is
                created. Defaults to true.
            - detect_table_columns : bool
                If true, detect the table columns in the file including the sql types.
                If false, skip table column detection.Defaults to false.
            - force_character_set_conversion : bool
                If true, the file will always be converted to UTF-8 and any character
                that cannot be converted will be discarded. If false, the character set
                conversion will only run if the detected character set is not
                compatible with UTF-8 (e.g., UTF-8, ASCII).
            - include_header : bool
                A boolean value indicating whether or not the first row of the file is
                a header row. If not provided, will attempt to auto-detect whether a
                header row is present.
            - column_delimiter : str
                The column delimiter for the file. One of "comma", "tab", or "pipe". If
                not provided, the column delimiter will be auto-detected.
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def put_preprocess_csv_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the job created.
            - file_id : int
                The ID of the file.
            - in_place : bool
                If true, the file is cleaned in place. If false, a new file ID is
                created. Defaults to true.
            - detect_table_columns : bool
                If true, detect the table columns in the file including the sql types.
                If false, skip table column detection.Defaults to false.
            - force_character_set_conversion : bool
                If true, the file will always be converted to UTF-8 and any character
                that cannot be converted will be discarded. If false, the character set
                conversion will only run if the detected character set is not
                compatible with UTF-8 (e.g., UTF-8, ASCII).
            - include_header : bool
                A boolean value indicating whether or not the first row of the file is
                a header row. If not provided, will attempt to auto-detect whether a
                header row is present.
            - column_delimiter : str
                The column delimiter for the file. One of "comma", "tab", or "pipe". If
                not provided, the column delimiter will be auto-detected.
            - hidden : bool
                The hidden status of the item.
        """
        ...

class _Git_Repos:
    def list(
        self,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List bookmarked git repositories

        Parameters
        ----------
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to repo_url. Must be
            one of: repo_url, created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to asc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID for this git repository.
            - repo_url : str
                The URL for this git repository.
            - created_at : str (time)
            - updated_at : str (time)
        """
        ...

    def post(
        self,
        repo_url: str,
    ) -> Response:
        """Bookmark a git repository

        Parameters
        ----------
        repo_url : str
            The URL for this git repository.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this git repository.
            - repo_url : str
                The URL for this git repository.
            - created_at : str (time)
            - updated_at : str (time)
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Get a bookmarked git repository

        Parameters
        ----------
        id : int
            The ID for this git repository.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this git repository.
            - repo_url : str
                The URL for this git repository.
            - created_at : str (time)
            - updated_at : str (time)
        """
        ...

    def delete(
        self,
        id: int,
    ) -> Response:
        """Remove the bookmark on a git repository

        Parameters
        ----------
        id : int
            The ID for this git repository.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_refs(
        self,
        id: int,
    ) -> Response:
        """Get all branches and tags of a bookmarked git repository

        Parameters
        ----------
        id : int
            The ID for this git repository.

        Returns
        -------
        :class:`civis.response.Response`
            - branches : list[str]
                List of branch names of this git repository.
            - tags : list[str]
                List of tag names of this git repository.
        """
        ...

class _Groups:
    def list(
        self,
        query: str | None = ...,
        permission: str | None = ...,
        include_members: bool | None = ...,
        organization_id: int | None = ...,
        user_ids: list[int] | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Groups

        Parameters
        ----------
        query : str, optional
            If specified, it will filter the groups returned.
        permission : str, optional
            A permissions string, one of "read", "write", or "manage". Lists only
            groups for which the current user has that permission.
        include_members : bool, optional
            Show members of the group.
        organization_id : int, optional
            The organization by which to filter groups.
        user_ids : list[int], optional
            A list of user IDs to filter groups by.Groups will be returned if any of
            the users is a member
        limit : int, optional
            Number of results to return. Defaults to 50. Maximum allowed is 1000.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to name. Must be one
            of: name, created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to asc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of this group.
            - name : str
                This group's name.
            - created_at : str (time)
                The date and time when this group was created.
            - updated_at : str (time)
                The date and time when this group was last updated.
            - description : str
                The description of the group.
            - slug : str
                The slug for this group.
            - organization_id : int
                The ID of the organization this group belongs to.
            - organization_name : str
                The name of the organization this group belongs to.
            - member_count : int
                The number of active members in this group.
            - total_member_count : int
                The total number of members in this group.
            - last_updated_by_id : int
                The ID of the user who last updated this group.
            - created_by_id : int
                The ID of the user who created this group.
            - members : list[dict]
                The members of this group.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
        """
        ...

    def post(
        self,
        name: str,
        description: str | None = ...,
        slug: str | None = ...,
        organization_id: int | None = ...,
        default_otp_required_for_login: bool | None = ...,
        role_ids: list[int] | None = ...,
        default_time_zone: str | None = ...,
        default_jobs_label: str | None = ...,
        default_notebooks_label: str | None = ...,
        default_services_label: str | None = ...,
    ) -> Response:
        """Create a Group

        Parameters
        ----------
        name : str
            This group's name.
        description : str, optional
            The description of the group.
        slug : str, optional
            The slug for this group.
        organization_id : int, optional
            The ID of the organization this group belongs to.
        default_otp_required_for_login : bool, optional
            The two factor authentication requirement for this group.
        role_ids : list[int], optional
            An array of ids of all the roles this group has.
        default_time_zone : str, optional
            The default time zone of this group.
        default_jobs_label : str, optional
            The default partition label for jobs of this group.
        default_notebooks_label : str, optional
            The default partition label for notebooks of this group.
        default_services_label : str, optional
            The default partition label for services of this group.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this group.
            - name : str
                This group's name.
            - created_at : str (time)
                The date and time when this group was created.
            - updated_at : str (time)
                The date and time when this group was last updated.
            - description : str
                The description of the group.
            - slug : str
                The slug for this group.
            - organization_id : int
                The ID of the organization this group belongs to.
            - organization_name : str
                The name of the organization this group belongs to.
            - member_count : int
                The number of active members in this group.
            - total_member_count : int
                The total number of members in this group.
            - default_otp_required_for_login : bool
                The two factor authentication requirement for this group.
            - role_ids : list[int]
                An array of ids of all the roles this group has.
            - default_time_zone : str
                The default time zone of this group.
            - default_jobs_label : str
                The default partition label for jobs of this group.
            - default_notebooks_label : str
                The default partition label for notebooks of this group.
            - default_services_label : str
                The default partition label for services of this group.
            - last_updated_by_id : int
                The ID of the user who last updated this group.
            - created_by_id : int
                The ID of the user who created this group.
            - members : list[dict]
                The members of this group.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
                - email : str
                    This user's email address.
                - primary_group_id : int
                    The ID of the primary group of this user.
                - active : bool
                    Whether this user account is active or deactivated.
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Get a Group

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this group.
            - name : str
                This group's name.
            - created_at : str (time)
                The date and time when this group was created.
            - updated_at : str (time)
                The date and time when this group was last updated.
            - description : str
                The description of the group.
            - slug : str
                The slug for this group.
            - organization_id : int
                The ID of the organization this group belongs to.
            - organization_name : str
                The name of the organization this group belongs to.
            - member_count : int
                The number of active members in this group.
            - total_member_count : int
                The total number of members in this group.
            - default_otp_required_for_login : bool
                The two factor authentication requirement for this group.
            - role_ids : list[int]
                An array of ids of all the roles this group has.
            - default_time_zone : str
                The default time zone of this group.
            - default_jobs_label : str
                The default partition label for jobs of this group.
            - default_notebooks_label : str
                The default partition label for notebooks of this group.
            - default_services_label : str
                The default partition label for services of this group.
            - last_updated_by_id : int
                The ID of the user who last updated this group.
            - created_by_id : int
                The ID of the user who created this group.
            - members : list[dict]
                The members of this group.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
                - email : str
                    This user's email address.
                - primary_group_id : int
                    The ID of the primary group of this user.
                - active : bool
                    Whether this user account is active or deactivated.
        """
        ...

    def put(
        self,
        id: int,
        name: str,
        description: str | None = ...,
        slug: str | None = ...,
        organization_id: int | None = ...,
        default_otp_required_for_login: bool | None = ...,
        role_ids: list[int] | None = ...,
        default_time_zone: str | None = ...,
        default_jobs_label: str | None = ...,
        default_notebooks_label: str | None = ...,
        default_services_label: str | None = ...,
    ) -> Response:
        """Replace all attributes of this Group

        Parameters
        ----------
        id : int
            The ID of this group.
        name : str
            This group's name.
        description : str, optional
            The description of the group.
        slug : str, optional
            The slug for this group.
        organization_id : int, optional
            The ID of the organization this group belongs to.
        default_otp_required_for_login : bool, optional
            The two factor authentication requirement for this group.
        role_ids : list[int], optional
            An array of ids of all the roles this group has.
        default_time_zone : str, optional
            The default time zone of this group.
        default_jobs_label : str, optional
            The default partition label for jobs of this group.
        default_notebooks_label : str, optional
            The default partition label for notebooks of this group.
        default_services_label : str, optional
            The default partition label for services of this group.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this group.
            - name : str
                This group's name.
            - created_at : str (time)
                The date and time when this group was created.
            - updated_at : str (time)
                The date and time when this group was last updated.
            - description : str
                The description of the group.
            - slug : str
                The slug for this group.
            - organization_id : int
                The ID of the organization this group belongs to.
            - organization_name : str
                The name of the organization this group belongs to.
            - member_count : int
                The number of active members in this group.
            - total_member_count : int
                The total number of members in this group.
            - default_otp_required_for_login : bool
                The two factor authentication requirement for this group.
            - role_ids : list[int]
                An array of ids of all the roles this group has.
            - default_time_zone : str
                The default time zone of this group.
            - default_jobs_label : str
                The default partition label for jobs of this group.
            - default_notebooks_label : str
                The default partition label for notebooks of this group.
            - default_services_label : str
                The default partition label for services of this group.
            - last_updated_by_id : int
                The ID of the user who last updated this group.
            - created_by_id : int
                The ID of the user who created this group.
            - members : list[dict]
                The members of this group.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
                - email : str
                    This user's email address.
                - primary_group_id : int
                    The ID of the primary group of this user.
                - active : bool
                    Whether this user account is active or deactivated.
        """
        ...

    def patch(
        self,
        id: int,
        name: str | None = ...,
        description: str | None = ...,
        slug: str | None = ...,
        organization_id: int | None = ...,
        default_otp_required_for_login: bool | None = ...,
        role_ids: list[int] | None = ...,
        default_time_zone: str | None = ...,
        default_jobs_label: str | None = ...,
        default_notebooks_label: str | None = ...,
        default_services_label: str | None = ...,
    ) -> Response:
        """Update some attributes of this Group

        Parameters
        ----------
        id : int
            The ID of this group.
        name : str, optional
            This group's name.
        description : str, optional
            The description of the group.
        slug : str, optional
            The slug for this group.
        organization_id : int, optional
            The ID of the organization this group belongs to.
        default_otp_required_for_login : bool, optional
            The two factor authentication requirement for this group.
        role_ids : list[int], optional
            An array of ids of all the roles this group has.
        default_time_zone : str, optional
            The default time zone of this group.
        default_jobs_label : str, optional
            The default partition label for jobs of this group.
        default_notebooks_label : str, optional
            The default partition label for notebooks of this group.
        default_services_label : str, optional
            The default partition label for services of this group.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this group.
            - name : str
                This group's name.
            - created_at : str (time)
                The date and time when this group was created.
            - updated_at : str (time)
                The date and time when this group was last updated.
            - description : str
                The description of the group.
            - slug : str
                The slug for this group.
            - organization_id : int
                The ID of the organization this group belongs to.
            - organization_name : str
                The name of the organization this group belongs to.
            - member_count : int
                The number of active members in this group.
            - total_member_count : int
                The total number of members in this group.
            - default_otp_required_for_login : bool
                The two factor authentication requirement for this group.
            - role_ids : list[int]
                An array of ids of all the roles this group has.
            - default_time_zone : str
                The default time zone of this group.
            - default_jobs_label : str
                The default partition label for jobs of this group.
            - default_notebooks_label : str
                The default partition label for notebooks of this group.
            - default_services_label : str
                The default partition label for services of this group.
            - last_updated_by_id : int
                The ID of the user who last updated this group.
            - created_by_id : int
                The ID of the user who created this group.
            - members : list[dict]
                The members of this group.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
                - email : str
                    This user's email address.
                - primary_group_id : int
                    The ID of the primary group of this user.
                - active : bool
                    Whether this user account is active or deactivated.
        """
        ...

    def list_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_members(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Add a user to a group

        Parameters
        ----------
        id : int
            The ID of the group.
        user_id : int
            The ID of the user.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this group.
            - name : str
                This group's name.
            - created_at : str (time)
                The date and time when this group was created.
            - updated_at : str (time)
                The date and time when this group was last updated.
            - description : str
                The description of the group.
            - slug : str
                The slug for this group.
            - organization_id : int
                The ID of the organization this group belongs to.
            - organization_name : str
                The name of the organization this group belongs to.
            - member_count : int
                The number of active members in this group.
            - total_member_count : int
                The total number of members in this group.
            - default_otp_required_for_login : bool
                The two factor authentication requirement for this group.
            - role_ids : list[int]
                An array of ids of all the roles this group has.
            - default_time_zone : str
                The default time zone of this group.
            - default_jobs_label : str
                The default partition label for jobs of this group.
            - default_notebooks_label : str
                The default partition label for notebooks of this group.
            - default_services_label : str
                The default partition label for services of this group.
            - last_updated_by_id : int
                The ID of the user who last updated this group.
            - created_by_id : int
                The ID of the user who created this group.
            - members : list[dict]
                The members of this group.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
                - email : str
                    This user's email address.
                - primary_group_id : int
                    The ID of the primary group of this user.
                - active : bool
                    Whether this user account is active or deactivated.
        """
        ...

    def delete_members(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Remove a user from a group

        Parameters
        ----------
        id : int
            The ID of the group.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_child_groups(
        self,
        id: int,
    ) -> Response:
        """Get child groups of this group

        Parameters
        ----------
        id : int
            The ID of this group.

        Returns
        -------
        :class:`civis.response.Response`
            - manageable : list[dict]
                - id : int
                - name : str
            - writeable : list[dict]
                - id : int
                - name : str
            - readable : list[dict]
                - id : int
                - name : str
        """
        ...

class _Imports:
    def list_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def list_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects an Import belongs to

        Parameters
        ----------
        id : int
            The ID of the Import.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add an Import to a project

        Parameters
        ----------
        id : int
            The ID of the Import.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove an Import from a project

        Parameters
        ----------
        id : int
            The ID of the Import.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - name : str
                The name of the import.
            - sync_type : str
                The type of sync to perform; one of Dbsync, AutoImport, GdocImport, and
                GdocExport.
            - source : dict
                - remote_host_id : int
                - credential_id : int
                - additional_credentials : list[int]
                    Array that holds additional credentials used for specific imports.
                    For DB Syncs, the first element is an SSL private key credential
                    id, and the second element is the corresponding public key
                    credential id.
                - name : str
            - destination : dict
                - remote_host_id : int
                - credential_id : int
                - additional_credentials : list[int]
                    Array that holds additional credentials used for specific imports.
                    For DB Syncs, the first element is an SSL private key credential
                    id, and the second element is the corresponding public key
                    credential id.
                - name : str
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - parent_id : int
                Parent id to trigger this import from
            - id : int
                The ID for the import.
            - is_outbound : bool
            - job_type : str
                The job type of this import.
            - syncs : list[dict]
                List of syncs.

                - id : int
                - source : dict
                    - id : int
                        The ID of the table or file, if available.
                    - path : str
                        The path of the dataset to sync from; for a database source,
                        schema.tablename. If you are doing a Google Sheet export, this
                        can be blank. This is a legacy parameter, it is recommended you
                        use one of the following: databaseTable, file, googleWorksheet
                    - database_table : dict
                        - schema : str
                            The database schema name.
                        - table : str
                            The database table name.
                        - use_without_schema : bool
                            This attribute is no longer available; defaults to false
                            but cannot be used.
                    - file : dict
                        - id : int
                            The file id.
                    - google_worksheet : dict
                        - spreadsheet : str
                            The spreadsheet document name.
                        - spreadsheet_id : str
                            The spreadsheet document id.
                        - worksheet : str
                            The worksheet tab name.
                        - worksheet_id : int
                            The worksheet tab id.
                    - salesforce : dict
                        - object_name : str
                            The Salesforce object name.
                - destination : dict
                    - path : str
                        The schema.tablename to sync to. If you are doing a Google
                        Sheet export, this is the spreadsheet and sheet name separated
                        by a period. i.e. if you have a spreadsheet named
                        "MySpreadsheet" and a sheet called "Sheet1" this field would be
                        "MySpreadsheet.Sheet1". This is a legacy parameter, it is
                        recommended you use one of the following: databaseTable,
                        googleWorksheet
                    - database_table : dict
                        - schema : str
                            The database schema name.
                        - table : str
                            The database table name.
                        - use_without_schema : bool
                            This attribute is no longer available; defaults to false
                            but cannot be used.
                    - google_worksheet : dict
                        - spreadsheet : str
                            The spreadsheet document name.
                        - spreadsheet_id : str
                            The spreadsheet document id.
                        - worksheet : str
                            The worksheet tab name.
                        - worksheet_id : int
                            The worksheet tab id.
                - advanced_options : dict
                    - max_errors : int
                    - existing_table_rows : str
                    - diststyle : str
                    - distkey : str
                    - sortkey1 : str
                    - sortkey2 : str
                    - column_delimiter : str
                    - column_overrides : dict
                        Hash used for overriding auto-detected names and types, with
                        keys being the index of the column being overridden.
                    - escaped : bool
                        If true, escape quotes with a backslash; otherwise, escape
                        quotes by double-quoting. Defaults to false.
                    - identity_column : str
                    - row_chunk_size : int
                    - wipe_destination_table : bool
                    - truncate_long_lines : bool
                    - invalid_char_replacement : str
                    - verify_table_row_counts : bool
                    - partition_column_name : str
                        This parameter is deprecated
                    - partition_schema_name : str
                        This parameter is deprecated
                    - partition_table_name : str
                        This parameter is deprecated
                    - partition_table_partition_column_min_name : str
                        This parameter is deprecated
                    - partition_table_partition_column_max_name : str
                        This parameter is deprecated
                    - last_modified_column : str
                    - mysql_catalog_matches_schema : bool
                        This attribute is no longer available; defaults to true but
                        cannot be used.
                    - chunking_method : str
                        This parameter is deprecated
                    - first_row_is_header : bool
                    - export_action : str
                        The kind of export action you want to have the export execute.
                        Set to "newsprsht" if you want a new worksheet inside a new
                        spreadsheet. Set to "newwksht" if you want a new worksheet
                        inside an existing spreadsheet. Set to "updatewksht" if you
                        want to overwrite an existing worksheet inside an existing
                        spreadsheet. Set to "appendwksht" if you want to append to the
                        end of an existing worksheet inside an existing spreadsheet.
                        Default is set to "newsprsht"
                    - sql_query : str
                        If you are doing a Google Sheet export, this is your SQL query.
                    - contact_lists : str
                    - soql_query : str
                    - include_deleted_records : bool
            - state : str
            - created_at : str (date-time)
            - updated_at : str (date-time)
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this import.
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def list(
        self,
        type: str | None = ...,
        destination: str | None = ...,
        source: str | None = ...,
        status: str | None = ...,
        author: str | None = ...,
        hidden: bool | None = ...,
        archived: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Imports

        Parameters
        ----------
        type : str, optional
            If specified, return imports of these types. It accepts a comma-separated
            list, possible values are 'AutoImport', 'Dbsync', 'Salesforce',
            'GdocImport'.
        destination : str, optional
            If specified, returns imports with one of these destinations. It accepts a
            comma-separated list of remote host ids.
        source : str, optional
            If specified, returns imports with one of these sources. It accepts a
            comma-separated list of remote host ids. 'Dbsync' must be specified for
            'type'.
        status : str, optional
            If specified, returns imports with one of these statuses. It accepts a
            comma-separated list, possible values are 'running', 'failed', 'succeeded',
            'idle', 'scheduled'.
        author : str, optional
            If specified, return items from any of these authors. It accepts a comma-
            separated list of user IDs.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.
        archived : str, optional
            The archival status of the requested item(s).
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to updated_at. Must be
            one of: updated_at, name, created_at, last_run.updated_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - name : str
                The name of the import.
            - sync_type : str
                The type of sync to perform; one of Dbsync, AutoImport, GdocImport, and
                GdocExport.
            - source : dict
                - remote_host_id : int
                - credential_id : int
                - additional_credentials : list[int]
                    Array that holds additional credentials used for specific imports.
                    For DB Syncs, the first element is an SSL private key credential
                    id, and the second element is the corresponding public key
                    credential id.
                - name : str
            - destination : dict
                - remote_host_id : int
                - credential_id : int
                - additional_credentials : list[int]
                    Array that holds additional credentials used for specific imports.
                    For DB Syncs, the first element is an SSL private key credential
                    id, and the second element is the corresponding public key
                    credential id.
                - name : str
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - id : int
                The ID for the import.
            - is_outbound : bool
            - job_type : str
                The job type of this import.
            - state : str
            - created_at : str (date-time)
            - updated_at : str (date-time)
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - time_zone : str
                The time zone of this import.
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def post(
        self,
        name: str,
        sync_type: str,
        is_outbound: bool,
        source: dict | None = ...,
        destination: dict | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        parent_id: int | None = ...,
        next_run_at: str | None = ...,
        time_zone: str | None = ...,
        hidden: bool | None = ...,
    ) -> Response:
        """Create a new import configuration

        Parameters
        ----------
        name : str
            The name of the import.
        sync_type : str
            The type of sync to perform; one of Dbsync, AutoImport, GdocImport, and
            GdocExport.
        is_outbound : bool
        source : dict, optional
            - remote_host_id : int
            - credential_id : int
            - additional_credentials : list[int]
                Array that holds additional credentials used for specific imports. For
                DB Syncs, the first element is an SSL private key credential id, and
                the second element is the corresponding public key credential id.
        destination : dict, optional
            - remote_host_id : int
            - credential_id : int
            - additional_credentials : list[int]
                Array that holds additional credentials used for specific imports. For
                DB Syncs, the first element is an SSL private key credential id, and
                the second element is the corresponding public key credential id.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        parent_id : int, optional
            Parent id to trigger this import from
        next_run_at : str (time), optional
            The time of the next scheduled run.
        time_zone : str, optional
            The time zone of this import.
        hidden : bool, optional
            The hidden status of the item.

        Returns
        -------
        :class:`civis.response.Response`
            - name : str
                The name of the import.
            - sync_type : str
                The type of sync to perform; one of Dbsync, AutoImport, GdocImport, and
                GdocExport.
            - source : dict
                - remote_host_id : int
                - credential_id : int
                - additional_credentials : list[int]
                    Array that holds additional credentials used for specific imports.
                    For DB Syncs, the first element is an SSL private key credential
                    id, and the second element is the corresponding public key
                    credential id.
                - name : str
            - destination : dict
                - remote_host_id : int
                - credential_id : int
                - additional_credentials : list[int]
                    Array that holds additional credentials used for specific imports.
                    For DB Syncs, the first element is an SSL private key credential
                    id, and the second element is the corresponding public key
                    credential id.
                - name : str
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - parent_id : int
                Parent id to trigger this import from
            - id : int
                The ID for the import.
            - is_outbound : bool
            - job_type : str
                The job type of this import.
            - syncs : list[dict]
                List of syncs.

                - id : int
                - source : dict
                    - id : int
                        The ID of the table or file, if available.
                    - path : str
                        The path of the dataset to sync from; for a database source,
                        schema.tablename. If you are doing a Google Sheet export, this
                        can be blank. This is a legacy parameter, it is recommended you
                        use one of the following: databaseTable, file, googleWorksheet
                    - database_table : dict
                        - schema : str
                            The database schema name.
                        - table : str
                            The database table name.
                        - use_without_schema : bool
                            This attribute is no longer available; defaults to false
                            but cannot be used.
                    - file : dict
                        - id : int
                            The file id.
                    - google_worksheet : dict
                        - spreadsheet : str
                            The spreadsheet document name.
                        - spreadsheet_id : str
                            The spreadsheet document id.
                        - worksheet : str
                            The worksheet tab name.
                        - worksheet_id : int
                            The worksheet tab id.
                    - salesforce : dict
                        - object_name : str
                            The Salesforce object name.
                - destination : dict
                    - path : str
                        The schema.tablename to sync to. If you are doing a Google
                        Sheet export, this is the spreadsheet and sheet name separated
                        by a period. i.e. if you have a spreadsheet named
                        "MySpreadsheet" and a sheet called "Sheet1" this field would be
                        "MySpreadsheet.Sheet1". This is a legacy parameter, it is
                        recommended you use one of the following: databaseTable,
                        googleWorksheet
                    - database_table : dict
                        - schema : str
                            The database schema name.
                        - table : str
                            The database table name.
                        - use_without_schema : bool
                            This attribute is no longer available; defaults to false
                            but cannot be used.
                    - google_worksheet : dict
                        - spreadsheet : str
                            The spreadsheet document name.
                        - spreadsheet_id : str
                            The spreadsheet document id.
                        - worksheet : str
                            The worksheet tab name.
                        - worksheet_id : int
                            The worksheet tab id.
                - advanced_options : dict
                    - max_errors : int
                    - existing_table_rows : str
                    - diststyle : str
                    - distkey : str
                    - sortkey1 : str
                    - sortkey2 : str
                    - column_delimiter : str
                    - column_overrides : dict
                        Hash used for overriding auto-detected names and types, with
                        keys being the index of the column being overridden.
                    - escaped : bool
                        If true, escape quotes with a backslash; otherwise, escape
                        quotes by double-quoting. Defaults to false.
                    - identity_column : str
                    - row_chunk_size : int
                    - wipe_destination_table : bool
                    - truncate_long_lines : bool
                    - invalid_char_replacement : str
                    - verify_table_row_counts : bool
                    - partition_column_name : str
                        This parameter is deprecated
                    - partition_schema_name : str
                        This parameter is deprecated
                    - partition_table_name : str
                        This parameter is deprecated
                    - partition_table_partition_column_min_name : str
                        This parameter is deprecated
                    - partition_table_partition_column_max_name : str
                        This parameter is deprecated
                    - last_modified_column : str
                    - mysql_catalog_matches_schema : bool
                        This attribute is no longer available; defaults to true but
                        cannot be used.
                    - chunking_method : str
                        This parameter is deprecated
                    - first_row_is_header : bool
                    - export_action : str
                        The kind of export action you want to have the export execute.
                        Set to "newsprsht" if you want a new worksheet inside a new
                        spreadsheet. Set to "newwksht" if you want a new worksheet
                        inside an existing spreadsheet. Set to "updatewksht" if you
                        want to overwrite an existing worksheet inside an existing
                        spreadsheet. Set to "appendwksht" if you want to append to the
                        end of an existing worksheet inside an existing spreadsheet.
                        Default is set to "newsprsht"
                    - sql_query : str
                        If you are doing a Google Sheet export, this is your SQL query.
                    - contact_lists : str
                    - soql_query : str
                    - include_deleted_records : bool
            - state : str
            - created_at : str (date-time)
            - updated_at : str (date-time)
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this import.
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def post_files(
        self,
        schema: str,
        name: str,
        remote_host_id: int,
        credential_id: int,
        max_errors: int | None = ...,
        existing_table_rows: str | None = ...,
        diststyle: str | None = ...,
        distkey: str | None = ...,
        sortkey1: str | None = ...,
        sortkey2: str | None = ...,
        column_delimiter: str | None = ...,
        first_row_is_header: bool | None = ...,
        multipart: bool | None = ...,
        escaped: bool | None = ...,
        hidden: bool | None = ...,
    ) -> Response:
        """Initate an import of a tabular file into the platform

        Parameters
        ----------
        schema : str
            The schema of the destination table.
        name : str
            The name of the destination table.
        remote_host_id : int
            The id of the destination database host.
        credential_id : int
            The id of the credentials to be used when performing the database import.
        max_errors : int, optional
            The maximum number of rows with errors to remove from the import before
            failing.
        existing_table_rows : str, optional
            The behaviour if a table with the requested name already exists.  One of
            "fail", "truncate", "append", or "drop".Defaults to "fail".
        diststyle : str, optional
            The diststyle to use for the table. One of "even", "all", or "key".
        distkey : str, optional
            The column to use as the distkey for the table.
        sortkey1 : str, optional
            The column to use as the sort key for the table.
        sortkey2 : str, optional
            The second column in a compound sortkey for the table.
        column_delimiter : str, optional
            The column delimiter of the file. If column_delimiter is null or omitted,
            it will be auto-detected. Valid arguments are "comma", "tab", and "pipe".
        first_row_is_header : bool, optional
            A boolean value indicating whether or not the first row is a header row. If
            first_row_is_header is null or omitted, it will be auto-detected.
        multipart : bool, optional
            If true, the upload URI will require a `multipart/form-data` POST request.
            Defaults to false.
        escaped : bool, optional
            If true, escape quotes with a backslash; otherwise, escape quotes by
            double-quoting. Defaults to false.
        hidden : bool, optional
            The hidden status of the item.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The id of the import.
            - upload_uri : str
                The URI which may be used to upload a tabular file for import. You must
                use this URI to upload the file you wish imported and then inform the
                Civis API when your upload is complete using the URI given by the
                runUri field of this response.
            - run_uri : str
                The URI to POST to once the file upload is complete. After uploading
                the file using the URI given in the uploadUri attribute of the
                response, POST to this URI to initiate the import of your uploaded file
                into the platform.
            - upload_fields : dict
                If multipart was set to true, these fields should be included in the
                multipart upload.
        """
        ...

    def post_files_runs(
        self,
        id: int,
    ) -> Response:
        """Start a run

        Parameters
        ----------
        id : int
            The ID of the Import job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - import_id : int
                The ID of the Import job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def list_files_runs(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List runs for the given Import job

        Parameters
        ----------
        id : int
            The ID of the Import job.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the run.
            - import_id : int
                The ID of the Import job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def get_files_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Check status of a run

        Parameters
        ----------
        id : int
            The ID of the Import job.
        run_id : int
            The ID of the run.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - import_id : int
                The ID of the Import job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def delete_files_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the Import job.
        run_id : int
            The ID of the run.

        Returns
        -------
        None
            Response code 202: success
        """
        ...

    def list_files_runs_logs(
        self,
        id: int,
        run_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a run

        Parameters
        ----------
        id : int
            The ID of the Import job.
        run_id : int
            The ID of the run.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def list_runs_logs(
        self,
        id: int,
        run_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a run

        Parameters
        ----------
        id : int
            The ID of the import job.
        run_id : int
            The ID of the run.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def post_files_csv(
        self,
        source: dict,
        destination: dict,
        first_row_is_header: bool,
        name: str | None = ...,
        column_delimiter: str | None = ...,
        escaped: bool | None = ...,
        compression: str | None = ...,
        existing_table_rows: str | None = ...,
        max_errors: int | None = ...,
        table_columns: list[dict] | None = ...,
        loosen_types: bool | None = ...,
        execution: str | None = ...,
        redshift_destination_options: dict | None = ...,
        hidden: bool | None = ...,
    ) -> Response:
        """Create a CSV Import

        Parameters
        ----------
        source : dict
            - file_ids : list[int]
                The file ID(s) to import, if importing Civis file(s).
            - storage_path : dict
                - storage_host_id : int
                    The ID of the source storage host.
                - credential_id : int
                    The ID of the credentials for the source storage host.
                - file_paths : list[str]
                    The file or directory path(s) within the bucket from which to
                    import.  E.g. the file_path for "s3://mybucket/files/all/" would be
                    "/files/all/"If specifying a directory path, the job will import
                    every file found under that path. All files must have the same
                    column layout and file format (e.g., compression, columnDelimiter,
                    etc.).
        destination : dict
            - schema : str
                The destination schema name.
            - table : str
                The destination table name.
            - remote_host_id : int
                The ID of the destination database host.
            - credential_id : int
                The ID of the credentials for the destination database.
            - primary_keys : list[str]
                A list of column(s) which together uniquely identify a row in the
                destination table.These columns must not contain NULL values. If the
                import mode is "upsert", this field is required;see the Civis Helpdesk
                article on "Advanced CSV Imports via the Civis API" for more
                information.
            - last_modified_keys : list[str]
                A list of the columns indicating a record has been updated.If the
                destination table does not exist, and the import mode is "upsert", this
                field is required.
        first_row_is_header : bool
            A boolean value indicating whether or not the first row of the source file
            is a header row.
        name : str, optional
            The name of the import.
        column_delimiter : str, optional
            The column delimiter for the file. Valid arguments are "comma", "tab", and
            "pipe". Defaults to "comma".
        escaped : bool, optional
            A boolean value indicating whether or not the source file has quotes
            escaped with a backslash.Defaults to false.
        compression : str, optional
            The type of compression of the source file. Valid arguments are "gzip" and
            "none". Defaults to "none".
        existing_table_rows : str, optional
            The behavior if a destination table with the requested name already exists.
            One of "fail", "truncate", "append", "drop", or "upsert".Defaults to
            "fail".
        max_errors : int, optional
            The maximum number of rows with errors to ignore before failing. This
            option is not supported for Postgres databases.
        table_columns : list[dict], optional
            An array of hashes corresponding to the columns in the order they appear in
            the source file. Each hash should have keys for database column "name" and
            "sqlType".This parameter is required if the table does not exist, the table
            is being dropped, or the columns in the source file do not appear in the
            same order as in the destination table.The "sqlType" key is not required
            when appending to an existing table.

            - name : str
                The column name.
            - sql_type : str
                The SQL type of the column.
        loosen_types : bool, optional
            If true, SQL types with precisions/lengths will have these values increased
            to accommodate data growth in future loads. Type loosening only occurs on
            table creation. Defaults to false.
        execution : str, optional
            In upsert mode, controls the movement of data in upsert mode. If set to
            "delayed", the data will be moved after a brief delay. If set to
            "immediate", the data will be moved immediately. In non-upsert modes,
            controls the speed at which detailed column stats appear in the data
            catalogue. Defaults to "delayed", to accommodate concurrent upserts to the
            same table and speedier non-upsert imports.
        redshift_destination_options : dict, optional
            - diststyle : str
                The diststyle to use for the table. One of "even", "all", or "key".
            - distkey : str
                Distkey for this table in Redshift
            - sortkeys : list[str]
                Sortkeys for this table in Redshift. Please provide a maximum of two.
        hidden : bool, optional
            The hidden status of the item.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the import.
            - name : str
                The name of the import.
            - source : dict
                - file_ids : list[int]
                    The file ID(s) to import, if importing Civis file(s).
                - storage_path : dict
                    - storage_host_id : int
                        The ID of the source storage host.
                    - credential_id : int
                        The ID of the credentials for the source storage host.
                    - file_paths : list[str]
                        The file or directory path(s) within the bucket from which to
                        import.  E.g. the file_path for "s3://mybucket/files/all/"
                        would be "/files/all/"If specifying a directory path, the job
                        will import every file found under that path. All files must
                        have the same column layout and file format (e.g., compression,
                        columnDelimiter, etc.).
            - destination : dict
                - schema : str
                    The destination schema name.
                - table : str
                    The destination table name.
                - remote_host_id : int
                    The ID of the destination database host.
                - credential_id : int
                    The ID of the credentials for the destination database.
                - primary_keys : list[str]
                    A list of column(s) which together uniquely identify a row in the
                    destination table.These columns must not contain NULL values. If
                    the import mode is "upsert", this field is required;see the Civis
                    Helpdesk article on "Advanced CSV Imports via the Civis API" for
                    more information.
                - last_modified_keys : list[str]
                    A list of the columns indicating a record has been updated.If the
                    destination table does not exist, and the import mode is "upsert",
                    this field is required.
            - first_row_is_header : bool
                A boolean value indicating whether or not the first row of the source
                file is a header row.
            - column_delimiter : str
                The column delimiter for the file. Valid arguments are "comma", "tab",
                and "pipe". Defaults to "comma".
            - escaped : bool
                A boolean value indicating whether or not the source file has quotes
                escaped with a backslash.Defaults to false.
            - compression : str
                The type of compression of the source file. Valid arguments are "gzip"
                and "none". Defaults to "none".
            - existing_table_rows : str
                The behavior if a destination table with the requested name already
                exists.  One of "fail", "truncate", "append", "drop", or
                "upsert".Defaults to "fail".
            - max_errors : int
                The maximum number of rows with errors to ignore before failing. This
                option is not supported for Postgres databases.
            - table_columns : list[dict]
                An array of hashes corresponding to the columns in the order they
                appear in the source file. Each hash should have keys for database
                column "name" and "sqlType".This parameter is required if the table
                does not exist, the table is being dropped, or the columns in the
                source file do not appear in the same order as in the destination
                table.The "sqlType" key is not required when appending to an existing
                table.

                - name : str
                    The column name.
                - sql_type : str
                    The SQL type of the column.
            - loosen_types : bool
                If true, SQL types with precisions/lengths will have these values
                increased to accommodate data growth in future loads. Type loosening
                only occurs on table creation. Defaults to false.
            - execution : str
                In upsert mode, controls the movement of data in upsert mode. If set to
                "delayed", the data will be moved after a brief delay. If set to
                "immediate", the data will be moved immediately. In non-upsert modes,
                controls the speed at which detailed column stats appear in the data
                catalogue. Defaults to "delayed", to accommodate concurrent upserts to
                the same table and speedier non-upsert imports.
            - redshift_destination_options : dict
                - diststyle : str
                    The diststyle to use for the table. One of "even", "all", or "key".
                - distkey : str
                    Distkey for this table in Redshift
                - sortkeys : list[str]
                    Sortkeys for this table in Redshift. Please provide a maximum of
                    two.
            - hidden : bool
                The hidden status of the item.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def get_files_csv(
        self,
        id: int,
    ) -> Response:
        """Get a CSV Import

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the import.
            - name : str
                The name of the import.
            - source : dict
                - file_ids : list[int]
                    The file ID(s) to import, if importing Civis file(s).
                - storage_path : dict
                    - storage_host_id : int
                        The ID of the source storage host.
                    - credential_id : int
                        The ID of the credentials for the source storage host.
                    - file_paths : list[str]
                        The file or directory path(s) within the bucket from which to
                        import.  E.g. the file_path for "s3://mybucket/files/all/"
                        would be "/files/all/"If specifying a directory path, the job
                        will import every file found under that path. All files must
                        have the same column layout and file format (e.g., compression,
                        columnDelimiter, etc.).
            - destination : dict
                - schema : str
                    The destination schema name.
                - table : str
                    The destination table name.
                - remote_host_id : int
                    The ID of the destination database host.
                - credential_id : int
                    The ID of the credentials for the destination database.
                - primary_keys : list[str]
                    A list of column(s) which together uniquely identify a row in the
                    destination table.These columns must not contain NULL values. If
                    the import mode is "upsert", this field is required;see the Civis
                    Helpdesk article on "Advanced CSV Imports via the Civis API" for
                    more information.
                - last_modified_keys : list[str]
                    A list of the columns indicating a record has been updated.If the
                    destination table does not exist, and the import mode is "upsert",
                    this field is required.
            - first_row_is_header : bool
                A boolean value indicating whether or not the first row of the source
                file is a header row.
            - column_delimiter : str
                The column delimiter for the file. Valid arguments are "comma", "tab",
                and "pipe". Defaults to "comma".
            - escaped : bool
                A boolean value indicating whether or not the source file has quotes
                escaped with a backslash.Defaults to false.
            - compression : str
                The type of compression of the source file. Valid arguments are "gzip"
                and "none". Defaults to "none".
            - existing_table_rows : str
                The behavior if a destination table with the requested name already
                exists.  One of "fail", "truncate", "append", "drop", or
                "upsert".Defaults to "fail".
            - max_errors : int
                The maximum number of rows with errors to ignore before failing. This
                option is not supported for Postgres databases.
            - table_columns : list[dict]
                An array of hashes corresponding to the columns in the order they
                appear in the source file. Each hash should have keys for database
                column "name" and "sqlType".This parameter is required if the table
                does not exist, the table is being dropped, or the columns in the
                source file do not appear in the same order as in the destination
                table.The "sqlType" key is not required when appending to an existing
                table.

                - name : str
                    The column name.
                - sql_type : str
                    The SQL type of the column.
            - loosen_types : bool
                If true, SQL types with precisions/lengths will have these values
                increased to accommodate data growth in future loads. Type loosening
                only occurs on table creation. Defaults to false.
            - execution : str
                In upsert mode, controls the movement of data in upsert mode. If set to
                "delayed", the data will be moved after a brief delay. If set to
                "immediate", the data will be moved immediately. In non-upsert modes,
                controls the speed at which detailed column stats appear in the data
                catalogue. Defaults to "delayed", to accommodate concurrent upserts to
                the same table and speedier non-upsert imports.
            - redshift_destination_options : dict
                - diststyle : str
                    The diststyle to use for the table. One of "even", "all", or "key".
                - distkey : str
                    Distkey for this table in Redshift
                - sortkeys : list[str]
                    Sortkeys for this table in Redshift. Please provide a maximum of
                    two.
            - hidden : bool
                The hidden status of the item.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def put_files_csv(
        self,
        id: int,
        source: dict,
        destination: dict,
        first_row_is_header: bool,
        name: str | None = ...,
        column_delimiter: str | None = ...,
        escaped: bool | None = ...,
        compression: str | None = ...,
        existing_table_rows: str | None = ...,
        max_errors: int | None = ...,
        table_columns: list[dict] | None = ...,
        loosen_types: bool | None = ...,
        execution: str | None = ...,
        redshift_destination_options: dict | None = ...,
    ) -> Response:
        """Replace all attributes of this CSV Import

        Parameters
        ----------
        id : int
            The ID for the import.
        source : dict
            - file_ids : list[int]
                The file ID(s) to import, if importing Civis file(s).
            - storage_path : dict
                - storage_host_id : int
                    The ID of the source storage host.
                - credential_id : int
                    The ID of the credentials for the source storage host.
                - file_paths : list[str]
                    The file or directory path(s) within the bucket from which to
                    import.  E.g. the file_path for "s3://mybucket/files/all/" would be
                    "/files/all/"If specifying a directory path, the job will import
                    every file found under that path. All files must have the same
                    column layout and file format (e.g., compression, columnDelimiter,
                    etc.).
        destination : dict
            - schema : str
                The destination schema name.
            - table : str
                The destination table name.
            - remote_host_id : int
                The ID of the destination database host.
            - credential_id : int
                The ID of the credentials for the destination database.
            - primary_keys : list[str]
                A list of column(s) which together uniquely identify a row in the
                destination table.These columns must not contain NULL values. If the
                import mode is "upsert", this field is required;see the Civis Helpdesk
                article on "Advanced CSV Imports via the Civis API" for more
                information.
            - last_modified_keys : list[str]
                A list of the columns indicating a record has been updated.If the
                destination table does not exist, and the import mode is "upsert", this
                field is required.
        first_row_is_header : bool
            A boolean value indicating whether or not the first row of the source file
            is a header row.
        name : str, optional
            The name of the import.
        column_delimiter : str, optional
            The column delimiter for the file. Valid arguments are "comma", "tab", and
            "pipe". Defaults to "comma".
        escaped : bool, optional
            A boolean value indicating whether or not the source file has quotes
            escaped with a backslash.Defaults to false.
        compression : str, optional
            The type of compression of the source file. Valid arguments are "gzip" and
            "none". Defaults to "none".
        existing_table_rows : str, optional
            The behavior if a destination table with the requested name already exists.
            One of "fail", "truncate", "append", "drop", or "upsert".Defaults to
            "fail".
        max_errors : int, optional
            The maximum number of rows with errors to ignore before failing. This
            option is not supported for Postgres databases.
        table_columns : list[dict], optional
            An array of hashes corresponding to the columns in the order they appear in
            the source file. Each hash should have keys for database column "name" and
            "sqlType".This parameter is required if the table does not exist, the table
            is being dropped, or the columns in the source file do not appear in the
            same order as in the destination table.The "sqlType" key is not required
            when appending to an existing table.

            - name : str
                The column name.
            - sql_type : str
                The SQL type of the column.
        loosen_types : bool, optional
            If true, SQL types with precisions/lengths will have these values increased
            to accommodate data growth in future loads. Type loosening only occurs on
            table creation. Defaults to false.
        execution : str, optional
            In upsert mode, controls the movement of data in upsert mode. If set to
            "delayed", the data will be moved after a brief delay. If set to
            "immediate", the data will be moved immediately. In non-upsert modes,
            controls the speed at which detailed column stats appear in the data
            catalogue. Defaults to "delayed", to accommodate concurrent upserts to the
            same table and speedier non-upsert imports.
        redshift_destination_options : dict, optional
            - diststyle : str
                The diststyle to use for the table. One of "even", "all", or "key".
            - distkey : str
                Distkey for this table in Redshift
            - sortkeys : list[str]
                Sortkeys for this table in Redshift. Please provide a maximum of two.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the import.
            - name : str
                The name of the import.
            - source : dict
                - file_ids : list[int]
                    The file ID(s) to import, if importing Civis file(s).
                - storage_path : dict
                    - storage_host_id : int
                        The ID of the source storage host.
                    - credential_id : int
                        The ID of the credentials for the source storage host.
                    - file_paths : list[str]
                        The file or directory path(s) within the bucket from which to
                        import.  E.g. the file_path for "s3://mybucket/files/all/"
                        would be "/files/all/"If specifying a directory path, the job
                        will import every file found under that path. All files must
                        have the same column layout and file format (e.g., compression,
                        columnDelimiter, etc.).
            - destination : dict
                - schema : str
                    The destination schema name.
                - table : str
                    The destination table name.
                - remote_host_id : int
                    The ID of the destination database host.
                - credential_id : int
                    The ID of the credentials for the destination database.
                - primary_keys : list[str]
                    A list of column(s) which together uniquely identify a row in the
                    destination table.These columns must not contain NULL values. If
                    the import mode is "upsert", this field is required;see the Civis
                    Helpdesk article on "Advanced CSV Imports via the Civis API" for
                    more information.
                - last_modified_keys : list[str]
                    A list of the columns indicating a record has been updated.If the
                    destination table does not exist, and the import mode is "upsert",
                    this field is required.
            - first_row_is_header : bool
                A boolean value indicating whether or not the first row of the source
                file is a header row.
            - column_delimiter : str
                The column delimiter for the file. Valid arguments are "comma", "tab",
                and "pipe". Defaults to "comma".
            - escaped : bool
                A boolean value indicating whether or not the source file has quotes
                escaped with a backslash.Defaults to false.
            - compression : str
                The type of compression of the source file. Valid arguments are "gzip"
                and "none". Defaults to "none".
            - existing_table_rows : str
                The behavior if a destination table with the requested name already
                exists.  One of "fail", "truncate", "append", "drop", or
                "upsert".Defaults to "fail".
            - max_errors : int
                The maximum number of rows with errors to ignore before failing. This
                option is not supported for Postgres databases.
            - table_columns : list[dict]
                An array of hashes corresponding to the columns in the order they
                appear in the source file. Each hash should have keys for database
                column "name" and "sqlType".This parameter is required if the table
                does not exist, the table is being dropped, or the columns in the
                source file do not appear in the same order as in the destination
                table.The "sqlType" key is not required when appending to an existing
                table.

                - name : str
                    The column name.
                - sql_type : str
                    The SQL type of the column.
            - loosen_types : bool
                If true, SQL types with precisions/lengths will have these values
                increased to accommodate data growth in future loads. Type loosening
                only occurs on table creation. Defaults to false.
            - execution : str
                In upsert mode, controls the movement of data in upsert mode. If set to
                "delayed", the data will be moved after a brief delay. If set to
                "immediate", the data will be moved immediately. In non-upsert modes,
                controls the speed at which detailed column stats appear in the data
                catalogue. Defaults to "delayed", to accommodate concurrent upserts to
                the same table and speedier non-upsert imports.
            - redshift_destination_options : dict
                - diststyle : str
                    The diststyle to use for the table. One of "even", "all", or "key".
                - distkey : str
                    Distkey for this table in Redshift
                - sortkeys : list[str]
                    Sortkeys for this table in Redshift. Please provide a maximum of
                    two.
            - hidden : bool
                The hidden status of the item.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def patch_files_csv(
        self,
        id: int,
        name: str | None = ...,
        source: dict | None = ...,
        destination: dict | None = ...,
        first_row_is_header: bool | None = ...,
        column_delimiter: str | None = ...,
        escaped: bool | None = ...,
        compression: str | None = ...,
        existing_table_rows: str | None = ...,
        max_errors: int | None = ...,
        table_columns: list[dict] | None = ...,
        loosen_types: bool | None = ...,
        execution: str | None = ...,
        redshift_destination_options: dict | None = ...,
    ) -> Response:
        """Update some attributes of this CSV Import

        Parameters
        ----------
        id : int
            The ID for the import.
        name : str, optional
            The name of the import.
        source : dict, optional
            - file_ids : list[int]
                The file ID(s) to import, if importing Civis file(s).
            - storage_path : dict
                - storage_host_id : int
                    The ID of the source storage host.
                - credential_id : int
                    The ID of the credentials for the source storage host.
                - file_paths : list[str]
                    The file or directory path(s) within the bucket from which to
                    import.  E.g. the file_path for "s3://mybucket/files/all/" would be
                    "/files/all/"If specifying a directory path, the job will import
                    every file found under that path. All files must have the same
                    column layout and file format (e.g., compression, columnDelimiter,
                    etc.).
        destination : dict, optional
            - schema : str
                The destination schema name.
            - table : str
                The destination table name.
            - remote_host_id : int
                The ID of the destination database host.
            - credential_id : int
                The ID of the credentials for the destination database.
            - primary_keys : list[str]
                A list of column(s) which together uniquely identify a row in the
                destination table.These columns must not contain NULL values. If the
                import mode is "upsert", this field is required;see the Civis Helpdesk
                article on "Advanced CSV Imports via the Civis API" for more
                information.
            - last_modified_keys : list[str]
                A list of the columns indicating a record has been updated.If the
                destination table does not exist, and the import mode is "upsert", this
                field is required.
        first_row_is_header : bool, optional
            A boolean value indicating whether or not the first row of the source file
            is a header row.
        column_delimiter : str, optional
            The column delimiter for the file. Valid arguments are "comma", "tab", and
            "pipe". Defaults to "comma".
        escaped : bool, optional
            A boolean value indicating whether or not the source file has quotes
            escaped with a backslash.Defaults to false.
        compression : str, optional
            The type of compression of the source file. Valid arguments are "gzip" and
            "none". Defaults to "none".
        existing_table_rows : str, optional
            The behavior if a destination table with the requested name already exists.
            One of "fail", "truncate", "append", "drop", or "upsert".Defaults to
            "fail".
        max_errors : int, optional
            The maximum number of rows with errors to ignore before failing. This
            option is not supported for Postgres databases.
        table_columns : list[dict], optional
            An array of hashes corresponding to the columns in the order they appear in
            the source file. Each hash should have keys for database column "name" and
            "sqlType".This parameter is required if the table does not exist, the table
            is being dropped, or the columns in the source file do not appear in the
            same order as in the destination table.The "sqlType" key is not required
            when appending to an existing table.

            - name : str
                The column name.
            - sql_type : str
                The SQL type of the column.
        loosen_types : bool, optional
            If true, SQL types with precisions/lengths will have these values increased
            to accommodate data growth in future loads. Type loosening only occurs on
            table creation. Defaults to false.
        execution : str, optional
            In upsert mode, controls the movement of data in upsert mode. If set to
            "delayed", the data will be moved after a brief delay. If set to
            "immediate", the data will be moved immediately. In non-upsert modes,
            controls the speed at which detailed column stats appear in the data
            catalogue. Defaults to "delayed", to accommodate concurrent upserts to the
            same table and speedier non-upsert imports.
        redshift_destination_options : dict, optional
            - diststyle : str
                The diststyle to use for the table. One of "even", "all", or "key".
            - distkey : str
                Distkey for this table in Redshift
            - sortkeys : list[str]
                Sortkeys for this table in Redshift. Please provide a maximum of two.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the import.
            - name : str
                The name of the import.
            - source : dict
                - file_ids : list[int]
                    The file ID(s) to import, if importing Civis file(s).
                - storage_path : dict
                    - storage_host_id : int
                        The ID of the source storage host.
                    - credential_id : int
                        The ID of the credentials for the source storage host.
                    - file_paths : list[str]
                        The file or directory path(s) within the bucket from which to
                        import.  E.g. the file_path for "s3://mybucket/files/all/"
                        would be "/files/all/"If specifying a directory path, the job
                        will import every file found under that path. All files must
                        have the same column layout and file format (e.g., compression,
                        columnDelimiter, etc.).
            - destination : dict
                - schema : str
                    The destination schema name.
                - table : str
                    The destination table name.
                - remote_host_id : int
                    The ID of the destination database host.
                - credential_id : int
                    The ID of the credentials for the destination database.
                - primary_keys : list[str]
                    A list of column(s) which together uniquely identify a row in the
                    destination table.These columns must not contain NULL values. If
                    the import mode is "upsert", this field is required;see the Civis
                    Helpdesk article on "Advanced CSV Imports via the Civis API" for
                    more information.
                - last_modified_keys : list[str]
                    A list of the columns indicating a record has been updated.If the
                    destination table does not exist, and the import mode is "upsert",
                    this field is required.
            - first_row_is_header : bool
                A boolean value indicating whether or not the first row of the source
                file is a header row.
            - column_delimiter : str
                The column delimiter for the file. Valid arguments are "comma", "tab",
                and "pipe". Defaults to "comma".
            - escaped : bool
                A boolean value indicating whether or not the source file has quotes
                escaped with a backslash.Defaults to false.
            - compression : str
                The type of compression of the source file. Valid arguments are "gzip"
                and "none". Defaults to "none".
            - existing_table_rows : str
                The behavior if a destination table with the requested name already
                exists.  One of "fail", "truncate", "append", "drop", or
                "upsert".Defaults to "fail".
            - max_errors : int
                The maximum number of rows with errors to ignore before failing. This
                option is not supported for Postgres databases.
            - table_columns : list[dict]
                An array of hashes corresponding to the columns in the order they
                appear in the source file. Each hash should have keys for database
                column "name" and "sqlType".This parameter is required if the table
                does not exist, the table is being dropped, or the columns in the
                source file do not appear in the same order as in the destination
                table.The "sqlType" key is not required when appending to an existing
                table.

                - name : str
                    The column name.
                - sql_type : str
                    The SQL type of the column.
            - loosen_types : bool
                If true, SQL types with precisions/lengths will have these values
                increased to accommodate data growth in future loads. Type loosening
                only occurs on table creation. Defaults to false.
            - execution : str
                In upsert mode, controls the movement of data in upsert mode. If set to
                "delayed", the data will be moved after a brief delay. If set to
                "immediate", the data will be moved immediately. In non-upsert modes,
                controls the speed at which detailed column stats appear in the data
                catalogue. Defaults to "delayed", to accommodate concurrent upserts to
                the same table and speedier non-upsert imports.
            - redshift_destination_options : dict
                - diststyle : str
                    The diststyle to use for the table. One of "even", "all", or "key".
                - distkey : str
                    Distkey for this table in Redshift
                - sortkeys : list[str]
                    Sortkeys for this table in Redshift. Please provide a maximum of
                    two.
            - hidden : bool
                The hidden status of the item.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def put_files_csv_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the import.
            - name : str
                The name of the import.
            - source : dict
                - file_ids : list[int]
                    The file ID(s) to import, if importing Civis file(s).
                - storage_path : dict
                    - storage_host_id : int
                        The ID of the source storage host.
                    - credential_id : int
                        The ID of the credentials for the source storage host.
                    - file_paths : list[str]
                        The file or directory path(s) within the bucket from which to
                        import.  E.g. the file_path for "s3://mybucket/files/all/"
                        would be "/files/all/"If specifying a directory path, the job
                        will import every file found under that path. All files must
                        have the same column layout and file format (e.g., compression,
                        columnDelimiter, etc.).
            - destination : dict
                - schema : str
                    The destination schema name.
                - table : str
                    The destination table name.
                - remote_host_id : int
                    The ID of the destination database host.
                - credential_id : int
                    The ID of the credentials for the destination database.
                - primary_keys : list[str]
                    A list of column(s) which together uniquely identify a row in the
                    destination table.These columns must not contain NULL values. If
                    the import mode is "upsert", this field is required;see the Civis
                    Helpdesk article on "Advanced CSV Imports via the Civis API" for
                    more information.
                - last_modified_keys : list[str]
                    A list of the columns indicating a record has been updated.If the
                    destination table does not exist, and the import mode is "upsert",
                    this field is required.
            - first_row_is_header : bool
                A boolean value indicating whether or not the first row of the source
                file is a header row.
            - column_delimiter : str
                The column delimiter for the file. Valid arguments are "comma", "tab",
                and "pipe". Defaults to "comma".
            - escaped : bool
                A boolean value indicating whether or not the source file has quotes
                escaped with a backslash.Defaults to false.
            - compression : str
                The type of compression of the source file. Valid arguments are "gzip"
                and "none". Defaults to "none".
            - existing_table_rows : str
                The behavior if a destination table with the requested name already
                exists.  One of "fail", "truncate", "append", "drop", or
                "upsert".Defaults to "fail".
            - max_errors : int
                The maximum number of rows with errors to ignore before failing. This
                option is not supported for Postgres databases.
            - table_columns : list[dict]
                An array of hashes corresponding to the columns in the order they
                appear in the source file. Each hash should have keys for database
                column "name" and "sqlType".This parameter is required if the table
                does not exist, the table is being dropped, or the columns in the
                source file do not appear in the same order as in the destination
                table.The "sqlType" key is not required when appending to an existing
                table.

                - name : str
                    The column name.
                - sql_type : str
                    The SQL type of the column.
            - loosen_types : bool
                If true, SQL types with precisions/lengths will have these values
                increased to accommodate data growth in future loads. Type loosening
                only occurs on table creation. Defaults to false.
            - execution : str
                In upsert mode, controls the movement of data in upsert mode. If set to
                "delayed", the data will be moved after a brief delay. If set to
                "immediate", the data will be moved immediately. In non-upsert modes,
                controls the speed at which detailed column stats appear in the data
                catalogue. Defaults to "delayed", to accommodate concurrent upserts to
                the same table and speedier non-upsert imports.
            - redshift_destination_options : dict
                - diststyle : str
                    The diststyle to use for the table. One of "even", "all", or "key".
                - distkey : str
                    Distkey for this table in Redshift
                - sortkeys : list[str]
                    Sortkeys for this table in Redshift. Please provide a maximum of
                    two.
            - hidden : bool
                The hidden status of the item.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def post_files_csv_runs(
        self,
        id: int,
    ) -> Response:
        """Start a run

        Parameters
        ----------
        id : int
            The ID of the CSV Import job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - csv_import_id : int
                The ID of the CSV Import job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def list_files_csv_runs(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List runs for the given CSV Import job

        Parameters
        ----------
        id : int
            The ID of the CSV Import job.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the run.
            - csv_import_id : int
                The ID of the CSV Import job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def get_files_csv_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Check status of a run

        Parameters
        ----------
        id : int
            The ID of the CSV Import job.
        run_id : int
            The ID of the run.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - csv_import_id : int
                The ID of the CSV Import job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def delete_files_csv_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the CSV Import job.
        run_id : int
            The ID of the run.

        Returns
        -------
        None
            Response code 202: success
        """
        ...

    def list_files_csv_runs_logs(
        self,
        id: int,
        run_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a run

        Parameters
        ----------
        id : int
            The ID of the CSV Import job.
        run_id : int
            The ID of the run.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def list_batches(
        self,
        hidden: bool | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List batch imports

        Parameters
        ----------
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to updated_at. Must be
            one of: updated_at, created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID for the import.
            - schema : str
                The destination schema name. This schema must already exist in
                Redshift.
            - table : str
                The destination table name, without the schema prefix. This table must
                already exist in Redshift.
            - remote_host_id : int
                The ID of the destination database host.
            - state : str
                The state of the run; one of "queued", "running", "succeeded",
                "failed", or "cancelled".
            - started_at : str (time)
                The time the last run started at.
            - finished_at : str (time)
                The time the last run completed.
            - error : str
                The error returned by the run, if any.
        """
        ...

    def post_batches(
        self,
        file_ids: list[int],
        schema: str,
        table: str,
        remote_host_id: int,
        credential_id: int,
        column_delimiter: str | None = ...,
        first_row_is_header: bool | None = ...,
        compression: str | None = ...,
        hidden: bool | None = ...,
    ) -> Response:
        """Upload multiple files to Civis

        Parameters
        ----------
        file_ids : list[int]
            The file IDs for the import.
        schema : str
            The destination schema name. This schema must already exist in Redshift.
        table : str
            The destination table name, without the schema prefix. This table must
            already exist in Redshift.
        remote_host_id : int
            The ID of the destination database host.
        credential_id : int
            The ID of the credentials to be used when performing the database import.
        column_delimiter : str, optional
            The column delimiter for the file. Valid arguments are "comma", "tab", and
            "pipe". If unspecified, defaults to "comma".
        first_row_is_header : bool, optional
            A boolean value indicating whether or not the first row is a header row. If
            unspecified, defaults to false.
        compression : str, optional
            The type of compression. Valid arguments are "gzip", "zip", and "none". If
            unspecified, defaults to "gzip".
        hidden : bool, optional
            The hidden status of the item.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the import.
            - schema : str
                The destination schema name. This schema must already exist in
                Redshift.
            - table : str
                The destination table name, without the schema prefix. This table must
                already exist in Redshift.
            - remote_host_id : int
                The ID of the destination database host.
            - state : str
                The state of the run; one of "queued", "running", "succeeded",
                "failed", or "cancelled".
            - started_at : str (time)
                The time the last run started at.
            - finished_at : str (time)
                The time the last run completed.
            - error : str
                The error returned by the run, if any.
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def get_batches(
        self,
        id: int,
    ) -> Response:
        """Get details about a batch import

        Parameters
        ----------
        id : int
            The ID for the import.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the import.
            - schema : str
                The destination schema name. This schema must already exist in
                Redshift.
            - table : str
                The destination table name, without the schema prefix. This table must
                already exist in Redshift.
            - remote_host_id : int
                The ID of the destination database host.
            - state : str
                The state of the run; one of "queued", "running", "succeeded",
                "failed", or "cancelled".
            - started_at : str (time)
                The time the last run started at.
            - finished_at : str (time)
                The time the last run completed.
            - error : str
                The error returned by the run, if any.
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Get details about an import

        Parameters
        ----------
        id : int
            The ID for the import.

        Returns
        -------
        :class:`civis.response.Response`
            - name : str
                The name of the import.
            - sync_type : str
                The type of sync to perform; one of Dbsync, AutoImport, GdocImport, and
                GdocExport.
            - source : dict
                - remote_host_id : int
                - credential_id : int
                - additional_credentials : list[int]
                    Array that holds additional credentials used for specific imports.
                    For DB Syncs, the first element is an SSL private key credential
                    id, and the second element is the corresponding public key
                    credential id.
                - name : str
            - destination : dict
                - remote_host_id : int
                - credential_id : int
                - additional_credentials : list[int]
                    Array that holds additional credentials used for specific imports.
                    For DB Syncs, the first element is an SSL private key credential
                    id, and the second element is the corresponding public key
                    credential id.
                - name : str
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - parent_id : int
                Parent id to trigger this import from
            - id : int
                The ID for the import.
            - is_outbound : bool
            - job_type : str
                The job type of this import.
            - syncs : list[dict]
                List of syncs.

                - id : int
                - source : dict
                    - id : int
                        The ID of the table or file, if available.
                    - path : str
                        The path of the dataset to sync from; for a database source,
                        schema.tablename. If you are doing a Google Sheet export, this
                        can be blank. This is a legacy parameter, it is recommended you
                        use one of the following: databaseTable, file, googleWorksheet
                    - database_table : dict
                        - schema : str
                            The database schema name.
                        - table : str
                            The database table name.
                        - use_without_schema : bool
                            This attribute is no longer available; defaults to false
                            but cannot be used.
                    - file : dict
                        - id : int
                            The file id.
                    - google_worksheet : dict
                        - spreadsheet : str
                            The spreadsheet document name.
                        - spreadsheet_id : str
                            The spreadsheet document id.
                        - worksheet : str
                            The worksheet tab name.
                        - worksheet_id : int
                            The worksheet tab id.
                    - salesforce : dict
                        - object_name : str
                            The Salesforce object name.
                - destination : dict
                    - path : str
                        The schema.tablename to sync to. If you are doing a Google
                        Sheet export, this is the spreadsheet and sheet name separated
                        by a period. i.e. if you have a spreadsheet named
                        "MySpreadsheet" and a sheet called "Sheet1" this field would be
                        "MySpreadsheet.Sheet1". This is a legacy parameter, it is
                        recommended you use one of the following: databaseTable,
                        googleWorksheet
                    - database_table : dict
                        - schema : str
                            The database schema name.
                        - table : str
                            The database table name.
                        - use_without_schema : bool
                            This attribute is no longer available; defaults to false
                            but cannot be used.
                    - google_worksheet : dict
                        - spreadsheet : str
                            The spreadsheet document name.
                        - spreadsheet_id : str
                            The spreadsheet document id.
                        - worksheet : str
                            The worksheet tab name.
                        - worksheet_id : int
                            The worksheet tab id.
                - advanced_options : dict
                    - max_errors : int
                    - existing_table_rows : str
                    - diststyle : str
                    - distkey : str
                    - sortkey1 : str
                    - sortkey2 : str
                    - column_delimiter : str
                    - column_overrides : dict
                        Hash used for overriding auto-detected names and types, with
                        keys being the index of the column being overridden.
                    - escaped : bool
                        If true, escape quotes with a backslash; otherwise, escape
                        quotes by double-quoting. Defaults to false.
                    - identity_column : str
                    - row_chunk_size : int
                    - wipe_destination_table : bool
                    - truncate_long_lines : bool
                    - invalid_char_replacement : str
                    - verify_table_row_counts : bool
                    - partition_column_name : str
                        This parameter is deprecated
                    - partition_schema_name : str
                        This parameter is deprecated
                    - partition_table_name : str
                        This parameter is deprecated
                    - partition_table_partition_column_min_name : str
                        This parameter is deprecated
                    - partition_table_partition_column_max_name : str
                        This parameter is deprecated
                    - last_modified_column : str
                    - mysql_catalog_matches_schema : bool
                        This attribute is no longer available; defaults to true but
                        cannot be used.
                    - chunking_method : str
                        This parameter is deprecated
                    - first_row_is_header : bool
                    - export_action : str
                        The kind of export action you want to have the export execute.
                        Set to "newsprsht" if you want a new worksheet inside a new
                        spreadsheet. Set to "newwksht" if you want a new worksheet
                        inside an existing spreadsheet. Set to "updatewksht" if you
                        want to overwrite an existing worksheet inside an existing
                        spreadsheet. Set to "appendwksht" if you want to append to the
                        end of an existing worksheet inside an existing spreadsheet.
                        Default is set to "newsprsht"
                    - sql_query : str
                        If you are doing a Google Sheet export, this is your SQL query.
                    - contact_lists : str
                    - soql_query : str
                    - include_deleted_records : bool
            - state : str
            - created_at : str (date-time)
            - updated_at : str (date-time)
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this import.
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def put(
        self,
        id: int,
        name: str,
        sync_type: str,
        is_outbound: bool,
        source: dict | None = ...,
        destination: dict | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        parent_id: int | None = ...,
        next_run_at: str | None = ...,
        time_zone: str | None = ...,
    ) -> Response:
        """Update an import

        Parameters
        ----------
        id : int
            The ID for the import.
        name : str
            The name of the import.
        sync_type : str
            The type of sync to perform; one of Dbsync, AutoImport, GdocImport, and
            GdocExport.
        is_outbound : bool
        source : dict, optional
            - remote_host_id : int
            - credential_id : int
            - additional_credentials : list[int]
                Array that holds additional credentials used for specific imports. For
                DB Syncs, the first element is an SSL private key credential id, and
                the second element is the corresponding public key credential id.
        destination : dict, optional
            - remote_host_id : int
            - credential_id : int
            - additional_credentials : list[int]
                Array that holds additional credentials used for specific imports. For
                DB Syncs, the first element is an SSL private key credential id, and
                the second element is the corresponding public key credential id.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        parent_id : int, optional
            Parent id to trigger this import from
        next_run_at : str (time), optional
            The time of the next scheduled run.
        time_zone : str, optional
            The time zone of this import.

        Returns
        -------
        :class:`civis.response.Response`
            - name : str
                The name of the import.
            - sync_type : str
                The type of sync to perform; one of Dbsync, AutoImport, GdocImport, and
                GdocExport.
            - source : dict
                - remote_host_id : int
                - credential_id : int
                - additional_credentials : list[int]
                    Array that holds additional credentials used for specific imports.
                    For DB Syncs, the first element is an SSL private key credential
                    id, and the second element is the corresponding public key
                    credential id.
                - name : str
            - destination : dict
                - remote_host_id : int
                - credential_id : int
                - additional_credentials : list[int]
                    Array that holds additional credentials used for specific imports.
                    For DB Syncs, the first element is an SSL private key credential
                    id, and the second element is the corresponding public key
                    credential id.
                - name : str
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - parent_id : int
                Parent id to trigger this import from
            - id : int
                The ID for the import.
            - is_outbound : bool
            - job_type : str
                The job type of this import.
            - syncs : list[dict]
                List of syncs.

                - id : int
                - source : dict
                    - id : int
                        The ID of the table or file, if available.
                    - path : str
                        The path of the dataset to sync from; for a database source,
                        schema.tablename. If you are doing a Google Sheet export, this
                        can be blank. This is a legacy parameter, it is recommended you
                        use one of the following: databaseTable, file, googleWorksheet
                    - database_table : dict
                        - schema : str
                            The database schema name.
                        - table : str
                            The database table name.
                        - use_without_schema : bool
                            This attribute is no longer available; defaults to false
                            but cannot be used.
                    - file : dict
                        - id : int
                            The file id.
                    - google_worksheet : dict
                        - spreadsheet : str
                            The spreadsheet document name.
                        - spreadsheet_id : str
                            The spreadsheet document id.
                        - worksheet : str
                            The worksheet tab name.
                        - worksheet_id : int
                            The worksheet tab id.
                    - salesforce : dict
                        - object_name : str
                            The Salesforce object name.
                - destination : dict
                    - path : str
                        The schema.tablename to sync to. If you are doing a Google
                        Sheet export, this is the spreadsheet and sheet name separated
                        by a period. i.e. if you have a spreadsheet named
                        "MySpreadsheet" and a sheet called "Sheet1" this field would be
                        "MySpreadsheet.Sheet1". This is a legacy parameter, it is
                        recommended you use one of the following: databaseTable,
                        googleWorksheet
                    - database_table : dict
                        - schema : str
                            The database schema name.
                        - table : str
                            The database table name.
                        - use_without_schema : bool
                            This attribute is no longer available; defaults to false
                            but cannot be used.
                    - google_worksheet : dict
                        - spreadsheet : str
                            The spreadsheet document name.
                        - spreadsheet_id : str
                            The spreadsheet document id.
                        - worksheet : str
                            The worksheet tab name.
                        - worksheet_id : int
                            The worksheet tab id.
                - advanced_options : dict
                    - max_errors : int
                    - existing_table_rows : str
                    - diststyle : str
                    - distkey : str
                    - sortkey1 : str
                    - sortkey2 : str
                    - column_delimiter : str
                    - column_overrides : dict
                        Hash used for overriding auto-detected names and types, with
                        keys being the index of the column being overridden.
                    - escaped : bool
                        If true, escape quotes with a backslash; otherwise, escape
                        quotes by double-quoting. Defaults to false.
                    - identity_column : str
                    - row_chunk_size : int
                    - wipe_destination_table : bool
                    - truncate_long_lines : bool
                    - invalid_char_replacement : str
                    - verify_table_row_counts : bool
                    - partition_column_name : str
                        This parameter is deprecated
                    - partition_schema_name : str
                        This parameter is deprecated
                    - partition_table_name : str
                        This parameter is deprecated
                    - partition_table_partition_column_min_name : str
                        This parameter is deprecated
                    - partition_table_partition_column_max_name : str
                        This parameter is deprecated
                    - last_modified_column : str
                    - mysql_catalog_matches_schema : bool
                        This attribute is no longer available; defaults to true but
                        cannot be used.
                    - chunking_method : str
                        This parameter is deprecated
                    - first_row_is_header : bool
                    - export_action : str
                        The kind of export action you want to have the export execute.
                        Set to "newsprsht" if you want a new worksheet inside a new
                        spreadsheet. Set to "newwksht" if you want a new worksheet
                        inside an existing spreadsheet. Set to "updatewksht" if you
                        want to overwrite an existing worksheet inside an existing
                        spreadsheet. Set to "appendwksht" if you want to append to the
                        end of an existing worksheet inside an existing spreadsheet.
                        Default is set to "newsprsht"
                    - sql_query : str
                        If you are doing a Google Sheet export, this is your SQL query.
                    - contact_lists : str
                    - soql_query : str
                    - include_deleted_records : bool
            - state : str
            - created_at : str (date-time)
            - updated_at : str (date-time)
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this import.
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def list_runs(
        self,
        id: int,
    ) -> Response:
        """Get the run history of this import

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - state : str
            - created_at : str (time)
                The time that the run was queued.
            - started_at : str (time)
                The time that the run started.
            - finished_at : str (time)
                The time that the run completed.
            - error : str
                The error message for this run, if present.
        """
        ...

    def post_runs(
        self,
        id: int,
    ) -> Response:
        """Run an import

        Parameters
        ----------
        id : int
            The ID of the import to run.

        Returns
        -------
        :class:`civis.response.Response`
            - run_id : int
                The ID of the new run triggered.
        """
        ...

    def post_cancel(
        self,
        id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - state : str
                The state of the run, one of 'queued', 'running' or 'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
        """
        ...

    def post_syncs(
        self,
        id: int,
        source: dict,
        destination: dict,
        advanced_options: dict | None = ...,
    ) -> Response:
        """Create a sync

        Parameters
        ----------
        id : int
        source : dict
            - path : str
                The path of the dataset to sync from; for a database source,
                schema.tablename. If you are doing a Google Sheet export, this can be
                blank. This is a legacy parameter, it is recommended you use one of the
                following: databaseTable, file, googleWorksheet
            - database_table : dict
                - schema : str
                    The database schema name.
                - table : str
                    The database table name.
                - use_without_schema : bool
                    This attribute is no longer available; defaults to false but cannot
                    be used.
            - file : dict
            - google_worksheet : dict
                - spreadsheet : str
                    The spreadsheet document name.
                - spreadsheet_id : str
                    The spreadsheet document id.
                - worksheet : str
                    The worksheet tab name.
                - worksheet_id : int
                    The worksheet tab id.
            - salesforce : dict
                - object_name : str
                    The Salesforce object name.
        destination : dict
            - path : str
                The schema.tablename to sync to. If you are doing a Google Sheet
                export, this is the spreadsheet and sheet name separated by a period.
                i.e. if you have a spreadsheet named "MySpreadsheet" and a sheet called
                "Sheet1" this field would be "MySpreadsheet.Sheet1". This is a legacy
                parameter, it is recommended you use one of the following:
                databaseTable, googleWorksheet
            - database_table : dict
                - schema : str
                    The database schema name.
                - table : str
                    The database table name.
                - use_without_schema : bool
                    This attribute is no longer available; defaults to false but cannot
                    be used.
            - google_worksheet : dict
                - spreadsheet : str
                    The spreadsheet document name.
                - spreadsheet_id : str
                    The spreadsheet document id.
                - worksheet : str
                    The worksheet tab name.
                - worksheet_id : int
                    The worksheet tab id.
        advanced_options : dict, optional
            - max_errors : int
            - existing_table_rows : str
            - diststyle : str
            - distkey : str
            - sortkey1 : str
            - sortkey2 : str
            - column_delimiter : str
            - column_overrides : dict
                Hash used for overriding auto-detected names and types, with keys being
                the index of the column being overridden.
            - escaped : bool
                If true, escape quotes with a backslash; otherwise, escape quotes by
                double-quoting. Defaults to false.
            - identity_column : str
            - row_chunk_size : int
            - wipe_destination_table : bool
            - truncate_long_lines : bool
            - invalid_char_replacement : str
            - verify_table_row_counts : bool
            - partition_column_name : str
                This parameter is deprecated
            - partition_schema_name : str
                This parameter is deprecated
            - partition_table_name : str
                This parameter is deprecated
            - partition_table_partition_column_min_name : str
                This parameter is deprecated
            - partition_table_partition_column_max_name : str
                This parameter is deprecated
            - last_modified_column : str
            - mysql_catalog_matches_schema : bool
                This attribute is no longer available; defaults to true but cannot be
                used.
            - chunking_method : str
                This parameter is deprecated
            - first_row_is_header : bool
            - export_action : str
                The kind of export action you want to have the export execute. Set to
                "newsprsht" if you want a new worksheet inside a new spreadsheet. Set
                to "newwksht" if you want a new worksheet inside an existing
                spreadsheet. Set to "updatewksht" if you want to overwrite an existing
                worksheet inside an existing spreadsheet. Set to "appendwksht" if you
                want to append to the end of an existing worksheet inside an existing
                spreadsheet. Default is set to "newsprsht"
            - sql_query : str
                If you are doing a Google Sheet export, this is your SQL query.
            - contact_lists : str
            - soql_query : str
            - include_deleted_records : bool

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - source : dict
                - id : int
                    The ID of the table or file, if available.
                - path : str
                    The path of the dataset to sync from; for a database source,
                    schema.tablename. If you are doing a Google Sheet export, this can
                    be blank. This is a legacy parameter, it is recommended you use one
                    of the following: databaseTable, file, googleWorksheet
                - database_table : dict
                    - schema : str
                        The database schema name.
                    - table : str
                        The database table name.
                    - use_without_schema : bool
                        This attribute is no longer available; defaults to false but
                        cannot be used.
                - file : dict
                    - id : int
                        The file id.
                - google_worksheet : dict
                    - spreadsheet : str
                        The spreadsheet document name.
                    - spreadsheet_id : str
                        The spreadsheet document id.
                    - worksheet : str
                        The worksheet tab name.
                    - worksheet_id : int
                        The worksheet tab id.
                - salesforce : dict
                    - object_name : str
                        The Salesforce object name.
            - destination : dict
                - path : str
                    The schema.tablename to sync to. If you are doing a Google Sheet
                    export, this is the spreadsheet and sheet name separated by a
                    period. i.e. if you have a spreadsheet named "MySpreadsheet" and a
                    sheet called "Sheet1" this field would be "MySpreadsheet.Sheet1".
                    This is a legacy parameter, it is recommended you use one of the
                    following: databaseTable, googleWorksheet
                - database_table : dict
                    - schema : str
                        The database schema name.
                    - table : str
                        The database table name.
                    - use_without_schema : bool
                        This attribute is no longer available; defaults to false but
                        cannot be used.
                - google_worksheet : dict
                    - spreadsheet : str
                        The spreadsheet document name.
                    - spreadsheet_id : str
                        The spreadsheet document id.
                    - worksheet : str
                        The worksheet tab name.
                    - worksheet_id : int
                        The worksheet tab id.
            - advanced_options : dict
                - max_errors : int
                - existing_table_rows : str
                - diststyle : str
                - distkey : str
                - sortkey1 : str
                - sortkey2 : str
                - column_delimiter : str
                - column_overrides : dict
                    Hash used for overriding auto-detected names and types, with keys
                    being the index of the column being overridden.
                - escaped : bool
                    If true, escape quotes with a backslash; otherwise, escape quotes
                    by double-quoting. Defaults to false.
                - identity_column : str
                - row_chunk_size : int
                - wipe_destination_table : bool
                - truncate_long_lines : bool
                - invalid_char_replacement : str
                - verify_table_row_counts : bool
                - partition_column_name : str
                    This parameter is deprecated
                - partition_schema_name : str
                    This parameter is deprecated
                - partition_table_name : str
                    This parameter is deprecated
                - partition_table_partition_column_min_name : str
                    This parameter is deprecated
                - partition_table_partition_column_max_name : str
                    This parameter is deprecated
                - last_modified_column : str
                - mysql_catalog_matches_schema : bool
                    This attribute is no longer available; defaults to true but cannot
                    be used.
                - chunking_method : str
                    This parameter is deprecated
                - first_row_is_header : bool
                - export_action : str
                    The kind of export action you want to have the export execute. Set
                    to "newsprsht" if you want a new worksheet inside a new
                    spreadsheet. Set to "newwksht" if you want a new worksheet inside
                    an existing spreadsheet. Set to "updatewksht" if you want to
                    overwrite an existing worksheet inside an existing spreadsheet. Set
                    to "appendwksht" if you want to append to the end of an existing
                    worksheet inside an existing spreadsheet. Default is set to
                    "newsprsht"
                - sql_query : str
                    If you are doing a Google Sheet export, this is your SQL query.
                - contact_lists : str
                - soql_query : str
                - include_deleted_records : bool
        """
        ...

    def put_syncs(
        self,
        id: int,
        sync_id: int,
        source: dict,
        destination: dict,
        advanced_options: dict | None = ...,
    ) -> Response:
        """Update a sync

        Parameters
        ----------
        id : int
            The ID of the import to fetch.
        sync_id : int
            The ID of the sync to fetch.
        source : dict
            - path : str
                The path of the dataset to sync from; for a database source,
                schema.tablename. If you are doing a Google Sheet export, this can be
                blank. This is a legacy parameter, it is recommended you use one of the
                following: databaseTable, file, googleWorksheet
            - database_table : dict
                - schema : str
                    The database schema name.
                - table : str
                    The database table name.
                - use_without_schema : bool
                    This attribute is no longer available; defaults to false but cannot
                    be used.
            - file : dict
            - google_worksheet : dict
                - spreadsheet : str
                    The spreadsheet document name.
                - spreadsheet_id : str
                    The spreadsheet document id.
                - worksheet : str
                    The worksheet tab name.
                - worksheet_id : int
                    The worksheet tab id.
            - salesforce : dict
                - object_name : str
                    The Salesforce object name.
        destination : dict
            - path : str
                The schema.tablename to sync to. If you are doing a Google Sheet
                export, this is the spreadsheet and sheet name separated by a period.
                i.e. if you have a spreadsheet named "MySpreadsheet" and a sheet called
                "Sheet1" this field would be "MySpreadsheet.Sheet1". This is a legacy
                parameter, it is recommended you use one of the following:
                databaseTable, googleWorksheet
            - database_table : dict
                - schema : str
                    The database schema name.
                - table : str
                    The database table name.
                - use_without_schema : bool
                    This attribute is no longer available; defaults to false but cannot
                    be used.
            - google_worksheet : dict
                - spreadsheet : str
                    The spreadsheet document name.
                - spreadsheet_id : str
                    The spreadsheet document id.
                - worksheet : str
                    The worksheet tab name.
                - worksheet_id : int
                    The worksheet tab id.
        advanced_options : dict, optional
            - max_errors : int
            - existing_table_rows : str
            - diststyle : str
            - distkey : str
            - sortkey1 : str
            - sortkey2 : str
            - column_delimiter : str
            - column_overrides : dict
                Hash used for overriding auto-detected names and types, with keys being
                the index of the column being overridden.
            - escaped : bool
                If true, escape quotes with a backslash; otherwise, escape quotes by
                double-quoting. Defaults to false.
            - identity_column : str
            - row_chunk_size : int
            - wipe_destination_table : bool
            - truncate_long_lines : bool
            - invalid_char_replacement : str
            - verify_table_row_counts : bool
            - partition_column_name : str
                This parameter is deprecated
            - partition_schema_name : str
                This parameter is deprecated
            - partition_table_name : str
                This parameter is deprecated
            - partition_table_partition_column_min_name : str
                This parameter is deprecated
            - partition_table_partition_column_max_name : str
                This parameter is deprecated
            - last_modified_column : str
            - mysql_catalog_matches_schema : bool
                This attribute is no longer available; defaults to true but cannot be
                used.
            - chunking_method : str
                This parameter is deprecated
            - first_row_is_header : bool
            - export_action : str
                The kind of export action you want to have the export execute. Set to
                "newsprsht" if you want a new worksheet inside a new spreadsheet. Set
                to "newwksht" if you want a new worksheet inside an existing
                spreadsheet. Set to "updatewksht" if you want to overwrite an existing
                worksheet inside an existing spreadsheet. Set to "appendwksht" if you
                want to append to the end of an existing worksheet inside an existing
                spreadsheet. Default is set to "newsprsht"
            - sql_query : str
                If you are doing a Google Sheet export, this is your SQL query.
            - contact_lists : str
            - soql_query : str
            - include_deleted_records : bool

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - source : dict
                - id : int
                    The ID of the table or file, if available.
                - path : str
                    The path of the dataset to sync from; for a database source,
                    schema.tablename. If you are doing a Google Sheet export, this can
                    be blank. This is a legacy parameter, it is recommended you use one
                    of the following: databaseTable, file, googleWorksheet
                - database_table : dict
                    - schema : str
                        The database schema name.
                    - table : str
                        The database table name.
                    - use_without_schema : bool
                        This attribute is no longer available; defaults to false but
                        cannot be used.
                - file : dict
                    - id : int
                        The file id.
                - google_worksheet : dict
                    - spreadsheet : str
                        The spreadsheet document name.
                    - spreadsheet_id : str
                        The spreadsheet document id.
                    - worksheet : str
                        The worksheet tab name.
                    - worksheet_id : int
                        The worksheet tab id.
                - salesforce : dict
                    - object_name : str
                        The Salesforce object name.
            - destination : dict
                - path : str
                    The schema.tablename to sync to. If you are doing a Google Sheet
                    export, this is the spreadsheet and sheet name separated by a
                    period. i.e. if you have a spreadsheet named "MySpreadsheet" and a
                    sheet called "Sheet1" this field would be "MySpreadsheet.Sheet1".
                    This is a legacy parameter, it is recommended you use one of the
                    following: databaseTable, googleWorksheet
                - database_table : dict
                    - schema : str
                        The database schema name.
                    - table : str
                        The database table name.
                    - use_without_schema : bool
                        This attribute is no longer available; defaults to false but
                        cannot be used.
                - google_worksheet : dict
                    - spreadsheet : str
                        The spreadsheet document name.
                    - spreadsheet_id : str
                        The spreadsheet document id.
                    - worksheet : str
                        The worksheet tab name.
                    - worksheet_id : int
                        The worksheet tab id.
            - advanced_options : dict
                - max_errors : int
                - existing_table_rows : str
                - diststyle : str
                - distkey : str
                - sortkey1 : str
                - sortkey2 : str
                - column_delimiter : str
                - column_overrides : dict
                    Hash used for overriding auto-detected names and types, with keys
                    being the index of the column being overridden.
                - escaped : bool
                    If true, escape quotes with a backslash; otherwise, escape quotes
                    by double-quoting. Defaults to false.
                - identity_column : str
                - row_chunk_size : int
                - wipe_destination_table : bool
                - truncate_long_lines : bool
                - invalid_char_replacement : str
                - verify_table_row_counts : bool
                - partition_column_name : str
                    This parameter is deprecated
                - partition_schema_name : str
                    This parameter is deprecated
                - partition_table_name : str
                    This parameter is deprecated
                - partition_table_partition_column_min_name : str
                    This parameter is deprecated
                - partition_table_partition_column_max_name : str
                    This parameter is deprecated
                - last_modified_column : str
                - mysql_catalog_matches_schema : bool
                    This attribute is no longer available; defaults to true but cannot
                    be used.
                - chunking_method : str
                    This parameter is deprecated
                - first_row_is_header : bool
                - export_action : str
                    The kind of export action you want to have the export execute. Set
                    to "newsprsht" if you want a new worksheet inside a new
                    spreadsheet. Set to "newwksht" if you want a new worksheet inside
                    an existing spreadsheet. Set to "updatewksht" if you want to
                    overwrite an existing worksheet inside an existing spreadsheet. Set
                    to "appendwksht" if you want to append to the end of an existing
                    worksheet inside an existing spreadsheet. Default is set to
                    "newsprsht"
                - sql_query : str
                    If you are doing a Google Sheet export, this is your SQL query.
                - contact_lists : str
                - soql_query : str
                - include_deleted_records : bool
        """
        ...

    def put_syncs_archive(
        self,
        id: int,
        sync_id: int,
        status: bool | None = ...,
    ) -> Response:
        """Update the archive status of this sync

        Parameters
        ----------
        id : int
            The ID of the import to fetch.
        sync_id : int
            The ID of the sync to fetch.
        status : bool, optional
            The desired archived status of the sync.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - source : dict
                - id : int
                    The ID of the table or file, if available.
                - path : str
                    The path of the dataset to sync from; for a database source,
                    schema.tablename. If you are doing a Google Sheet export, this can
                    be blank. This is a legacy parameter, it is recommended you use one
                    of the following: databaseTable, file, googleWorksheet
                - database_table : dict
                    - schema : str
                        The database schema name.
                    - table : str
                        The database table name.
                    - use_without_schema : bool
                        This attribute is no longer available; defaults to false but
                        cannot be used.
                - file : dict
                    - id : int
                        The file id.
                - google_worksheet : dict
                    - spreadsheet : str
                        The spreadsheet document name.
                    - spreadsheet_id : str
                        The spreadsheet document id.
                    - worksheet : str
                        The worksheet tab name.
                    - worksheet_id : int
                        The worksheet tab id.
                - salesforce : dict
                    - object_name : str
                        The Salesforce object name.
            - destination : dict
                - path : str
                    The schema.tablename to sync to. If you are doing a Google Sheet
                    export, this is the spreadsheet and sheet name separated by a
                    period. i.e. if you have a spreadsheet named "MySpreadsheet" and a
                    sheet called "Sheet1" this field would be "MySpreadsheet.Sheet1".
                    This is a legacy parameter, it is recommended you use one of the
                    following: databaseTable, googleWorksheet
                - database_table : dict
                    - schema : str
                        The database schema name.
                    - table : str
                        The database table name.
                    - use_without_schema : bool
                        This attribute is no longer available; defaults to false but
                        cannot be used.
                - google_worksheet : dict
                    - spreadsheet : str
                        The spreadsheet document name.
                    - spreadsheet_id : str
                        The spreadsheet document id.
                    - worksheet : str
                        The worksheet tab name.
                    - worksheet_id : int
                        The worksheet tab id.
            - advanced_options : dict
                - max_errors : int
                - existing_table_rows : str
                - diststyle : str
                - distkey : str
                - sortkey1 : str
                - sortkey2 : str
                - column_delimiter : str
                - column_overrides : dict
                    Hash used for overriding auto-detected names and types, with keys
                    being the index of the column being overridden.
                - escaped : bool
                    If true, escape quotes with a backslash; otherwise, escape quotes
                    by double-quoting. Defaults to false.
                - identity_column : str
                - row_chunk_size : int
                - wipe_destination_table : bool
                - truncate_long_lines : bool
                - invalid_char_replacement : str
                - verify_table_row_counts : bool
                - partition_column_name : str
                    This parameter is deprecated
                - partition_schema_name : str
                    This parameter is deprecated
                - partition_table_name : str
                    This parameter is deprecated
                - partition_table_partition_column_min_name : str
                    This parameter is deprecated
                - partition_table_partition_column_max_name : str
                    This parameter is deprecated
                - last_modified_column : str
                - mysql_catalog_matches_schema : bool
                    This attribute is no longer available; defaults to true but cannot
                    be used.
                - chunking_method : str
                    This parameter is deprecated
                - first_row_is_header : bool
                - export_action : str
                    The kind of export action you want to have the export execute. Set
                    to "newsprsht" if you want a new worksheet inside a new
                    spreadsheet. Set to "newwksht" if you want a new worksheet inside
                    an existing spreadsheet. Set to "updatewksht" if you want to
                    overwrite an existing worksheet inside an existing spreadsheet. Set
                    to "appendwksht" if you want to append to the end of an existing
                    worksheet inside an existing spreadsheet. Default is set to
                    "newsprsht"
                - sql_query : str
                    If you are doing a Google Sheet export, this is your SQL query.
                - contact_lists : str
                - soql_query : str
                - include_deleted_records : bool
        """
        ...

class _Jobs:
    def list(
        self,
        state: str | None = ...,
        type: str | None = ...,
        q: str | None = ...,
        permission: str | None = ...,
        scheduled: bool | None = ...,
        hidden: bool | None = ...,
        archived: str | None = ...,
        author: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Jobs

        Parameters
        ----------
        state : str, optional
            The job's state. One or more of queued, running, succeeded, failed, and
            cancelled. Specify multiple values as a comma-separated list (e.g., "A,B").
        type : str, optional
            The job's type. Specify multiple values as a comma-separated list (e.g.,
            "A,B").
        q : str, optional
            Query string to search on the id, name, and job type.
        permission : str, optional
            A permissions string, one of "read", "write", or "manage". Lists only jobs
            for which the current user has that permission.
        scheduled : bool, optional
            If the item is scheduled.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.
        archived : str, optional
            The archival status of the requested item(s).
        author : str, optional
            If specified, return items from any of these authors. It accepts a comma-
            separated list of user IDs.
        limit : int, optional
            Number of results to return. Defaults to its maximum of 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to updated_at. Must be
            one of: updated_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
            - name : str
            - type : str
            - from_template_id : int
            - state : str
                Whether the job is idle, queued, running, cancelled, or failed.
            - created_at : str (date-time)
            - updated_at : str (date-time)
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - archived : str
                The archival status of the requested item(s).
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Show basic job info

        Parameters
        ----------
        id : int
            The ID for this job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - name : str
            - type : str
            - from_template_id : int
            - state : str
                Whether the job is idle, queued, running, cancelled, or failed.
            - created_at : str (date-time)
            - updated_at : str (date-time)
            - runs : list[dict]
                Information about the most recent runs of the job.

                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - success_email_subject : str
            - success_email_body : str
            - running_as_user : str
            - run_by_user : str
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
        """
        ...

    def post_trigger_email(
        self,
        id: int,
    ) -> Response:
        """Generate and retrieve trigger email address

        Parameters
        ----------
        id : int
            The ID for this job.

        Returns
        -------
        :class:`civis.response.Response`
            - trigger_email : str
                Email address which may be used to trigger this job to run.
        """
        ...

    def list_parents(
        self,
        id: int,
    ) -> Response:
        """Show chain of parents as a list that this job triggers from

        Parameters
        ----------
        id : int
            The ID for this job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - name : str
            - type : str
            - from_template_id : int
            - state : str
                Whether the job is idle, queued, running, cancelled, or failed.
            - created_at : str (date-time)
            - updated_at : str (date-time)
            - runs : list[dict]
                Information about the most recent runs of the job.

                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - success_email_subject : str
            - success_email_body : str
            - running_as_user : str
            - run_by_user : str
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
        """
        ...

    def list_children(
        self,
        id: int,
    ) -> Response:
        """Show nested tree of children that this job triggers

        Parameters
        ----------
        id : int
            The ID for this job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - name : str
            - type : str
            - from_template_id : int
            - state : str
            - created_at : str (date-time)
            - updated_at : str (date-time)
            - runs : list[dict]
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - children : list[dict]
        """
        ...

    def list_runs(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List runs for the given job

        Parameters
        ----------
        id : int
            The ID for this job.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
            - state : str
            - created_at : str (time)
                The time that the run was queued.
            - started_at : str (time)
                The time that the run started.
            - finished_at : str (time)
                The time that the run completed.
            - error : str
                The error message for this run, if present.
        """
        ...

    def post_runs(
        self,
        id: int,
    ) -> Response:
        """Run a job

        Parameters
        ----------
        id : int
            The ID for this job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - state : str
            - created_at : str (time)
                The time that the run was queued.
            - started_at : str (time)
                The time that the run started.
            - finished_at : str (time)
                The time that the run completed.
            - error : str
                The error message for this run, if present.
        """
        ...

    def get_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Check status of a job

        Parameters
        ----------
        id : int
            The ID of the Job.
        run_id : int
            The ID of the Run.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - state : str
            - created_at : str (time)
                The time that the run was queued.
            - started_at : str (time)
                The time that the run started.
            - finished_at : str (time)
                The time that the run completed.
            - error : str
                The error message for this run, if present.
        """
        ...

    def delete_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the Job.
        run_id : int
            The ID of the Run.

        Returns
        -------
        None
            Response code 202: success
        """
        ...

    def list_runs_outputs(
        self,
        id: int,
        run_id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List the outputs for a run

        Parameters
        ----------
        id : int
            The ID of the job.
        run_id : int
            The ID of the run.
        limit : int, optional
            Number of results to return. Defaults to its maximum of 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to created_at. Must be
            one of: created_at, id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - object_type : str
                The type of the output. Valid values are File, Table, Report, Project,
                Credential, or JSONValue
            - object_id : int
                The ID of the output.
            - name : str
                The name of the output.
            - link : str
                The hypermedia link to the output.
            - value : str
        """
        ...

    def list_runs_logs(
        self,
        id: int,
        run_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a run

        Parameters
        ----------
        id : int
            The ID of the job job.
        run_id : int
            The ID of the run.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def list_workflows(
        self,
        id: int,
        archived: str | None = ...,
    ) -> Response:
        """List the workflows a job belongs to

        Parameters
        ----------
        id : int
        archived : str, optional
            The archival status of the requested item(s).

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this workflow.
            - name : str
                The name of this workflow.
            - description : str
                A description of the workflow.
            - valid : bool
                The validity of the workflow definition.
            - file_id : str
                The file id for the s3 file containing the workflow configuration.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The state of the workflow. State is "running" if any execution is
                running, otherwise reflects most recent execution state.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - allow_concurrent_executions : bool
                Whether the workflow can execute when already running.
            - time_zone : str
                The time zone of this workflow.
            - next_execution_at : str (time)
                The time of the next scheduled execution.
            - archived : str
                The archival status of the requested item(s).
            - created_at : str (time)
            - updated_at : str (time)
        """
        ...

    def list_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def list_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a Job belongs to

        Parameters
        ----------
        id : int
            The ID of the Job.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a Job to a project

        Parameters
        ----------
        id : int
            The ID of the Job.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a Job from a project

        Parameters
        ----------
        id : int
            The ID of the Job.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - name : str
            - type : str
            - from_template_id : int
            - state : str
                Whether the job is idle, queued, running, cancelled, or failed.
            - created_at : str (date-time)
            - updated_at : str (date-time)
            - runs : list[dict]
                Information about the most recent runs of the job.

                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - success_email_subject : str
            - success_email_body : str
            - running_as_user : str
            - run_by_user : str
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
        """
        ...

class _Json_Values:
    def post(
        self,
        value_str: str,
        name: str | None = ...,
    ) -> Response:
        """Create a JSON Value

        Parameters
        ----------
        value_str : str
            The JSON value to store. Should be a serialized JSON string. Limited to
            1000000 bytes.
        name : str, optional
            The name of the JSON Value.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the JSON Value.
            - name : str
                The name of the JSON Value.
            - value : str
                The deserialized JSON value.
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Get details about a JSON Value

        Parameters
        ----------
        id : int
            The ID of the JSON Value.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the JSON Value.
            - name : str
                The name of the JSON Value.
            - value : str
                The deserialized JSON value.
        """
        ...

    def patch(
        self,
        id: int,
        name: str | None = ...,
        value_str: str | None = ...,
    ) -> Response:
        """Update some attributes of this JSON Value

        Parameters
        ----------
        id : int
            The ID of the JSON Value.
        name : str, optional
            The name of the JSON Value.
        value_str : str, optional
            The JSON value to store. Should be a serialized JSON string. Limited to
            1000000 bytes.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the JSON Value.
            - name : str
                The name of the JSON Value.
            - value : str
                The deserialized JSON value.
        """
        ...

    def list_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

class _Match_Targets:
    def list_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the match target
            - name : str
                The name of the match target
            - target_file_name : str
                The name of the target file
            - created_at : str (time)
            - updated_at : str (time)
            - archived : bool
                Whether the match target has been archived.
        """
        ...

    def list(
        self,
    ) -> Response:
        """List match targets

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the match target
            - name : str
                The name of the match target
            - target_file_name : str
                The name of the target file
            - created_at : str (time)
            - updated_at : str (time)
            - archived : bool
                Whether the match target has been archived.
        """
        ...

    def post(
        self,
        name: str,
        target_file_name: str | None = ...,
        archived: bool | None = ...,
    ) -> Response:
        """Create a new match target

        Parameters
        ----------
        name : str
            The name of the match target
        target_file_name : str, optional
            The name of the target file
        archived : bool, optional
            Whether the match target has been archived.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the match target
            - name : str
                The name of the match target
            - target_file_name : str
                The name of the target file
            - created_at : str (time)
            - updated_at : str (time)
            - archived : bool
                Whether the match target has been archived.
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Show Match Target info

        Parameters
        ----------
        id : int
            The ID of the match target

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the match target
            - name : str
                The name of the match target
            - target_file_name : str
                The name of the target file
            - created_at : str (time)
            - updated_at : str (time)
            - archived : bool
                Whether the match target has been archived.
        """
        ...

    def patch(
        self,
        id: int,
        name: str | None = ...,
        target_file_name: str | None = ...,
        archived: bool | None = ...,
    ) -> Response:
        """Update a match target

        Parameters
        ----------
        id : int
            The ID of the match target
        name : str, optional
            The name of the match target
        target_file_name : str, optional
            The name of the target file
        archived : bool, optional
            Whether the match target has been archived.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the match target
            - name : str
                The name of the match target
            - target_file_name : str
                The name of the target file
            - created_at : str (time)
            - updated_at : str (time)
            - archived : bool
                Whether the match target has been archived.
        """
        ...

class _Media:
    def list_spot_orders_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_spot_orders_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_spot_orders_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_spot_orders_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_spot_orders_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_spot_orders_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the spot order.
            - archived : str
                The archival status of the requested item(s).
            - csv_s3_uri : str
                S3 URI for the spot order CSV file.
            - json_s3_uri : str
                S3 URI for the spot order JSON file.
            - xml_archive_s3_uri : str
                S3 URI for the spot order XML archive.
            - last_transform_job_id : int
                ID of the spot order transformation job.
        """
        ...

    def list_optimizations_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_optimizations_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_optimizations_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_optimizations_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_optimizations_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_optimizations_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The optimization ID.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of the optimization.
            - created_at : str (time)
            - updated_at : str (time)
            - finished_at : str (date-time)
                The end time of the last run.
            - state : str
                The state of the last run.
            - last_run_id : int
                The ID of the last run.
            - spot_order_id : int
                The ID for the spot order produced by the optimization.
            - archived : str
                The archival status of the requested item(s).
            - report_link : str
                A link to the visual report for the optimization.
            - spot_order_link : str
                A link to the json version of the spot order.
            - file_links : list[str]
                Links to the csv and xml versions of the spot order.
            - runs : list[dict]
                The runs of the optimization.

                - market_id : int
                    The market ID.
                - start_date : str (date)
                    The start date for the media run.
                - end_date : str (date)
                    The end date for the media run.
                - force_cpm : bool
                    Whether to force optimization to use CPM data even if partition
                    data is available.
                - reach_alpha : float (float)
                    A tuning parameter used to adjust RF.
                - syscodes : list[int]
                    The syscodes for the media run.
                - rate_cards : list[str]
                    The ratecards for the media run.
                - constraints : list[dict]
                    The constraints for the media run.

                    - targets : list[str]
                        The targets to constrain.
                    - budget : float (float)
                        The maximum budget for these targets.
                    - frequency : float (float)
                        The maximum frequency for these targets.
            - programs : list[str]
                An array of programs that the Civis Media Optimizer either exclude or
                limit to.An error will be thrown if exclude_programs is not also set.
            - networks : list[str]
                An array of networks that the Civis Media Optimizer either exclude or
                limit to.An error will be thrown if exclude_networks is not also set.
            - exclude_programs : bool
                If Civis Media Optimizer should exclude the programs in the programs
                parameter.If this value is set to false, it will make the optimization
                limit itself to the programs supplied through the programs parameter.An
                error will be thrown if programs is not also set.
            - exclude_networks : bool
                If Civis Media Optimizer should exclude the networks in the networks
                parameter.If this value is set to false, it will make the optimization
                limit itself to the networks supplied through the networks.An error
                will be thrown if networks is not also set.
            - time_slot_percentages : dict
                The maximum amount of the budget spent on that particular day of the
                week, daypart, or specific time slot for broadcast and cable.
        """
        ...

    def list_ratecards_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_ratecards_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_ratecards_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_ratecards_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_ratecards_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_ratecards_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ratecard ID.
            - filename : str
                Name of the ratecard file.
            - start_on : str (date)
                First day to which the ratecard applies.
            - end_on : str (date)
                Last day to which the ratecard applies.
            - dma_number : int
                Number of the DMA associated with the ratecard.
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def list_optimizations(
        self,
        archived: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List all optimizations

        Parameters
        ----------
        archived : str, optional
            The archival status of the requested item(s).
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to created_at. Must be
            one of: created_at, author, name.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The optimization ID.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of the optimization.
            - created_at : str (time)
            - updated_at : str (time)
            - finished_at : str (date-time)
                The end time of the last run.
            - state : str
                The state of the last run.
            - last_run_id : int
                The ID of the last run.
            - spot_order_id : int
                The ID for the spot order produced by the optimization.
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def post_optimizations(
        self,
        runs: list[dict],
        name: str | None = ...,
        programs: list[str] | None = ...,
        networks: list[str] | None = ...,
        exclude_programs: bool | None = ...,
        exclude_networks: bool | None = ...,
        time_slot_percentages: dict | None = ...,
    ) -> Response:
        """Create a new optimization

        Parameters
        ----------
        runs : list[dict]
            The runs of the optimization.

            - market_id : int
                The market ID.
            - start_date : str (date)
                The start date for the media run.
            - end_date : str (date)
                The end date for the media run.
            - force_cpm : bool
                Whether to force optimization to use CPM data even if partition data is
                available.
            - reach_alpha : float (float)
                A tuning parameter used to adjust RF.
            - syscodes : list[int]
                The syscodes for the media run.
            - rate_cards : list[str]
                The ratecards for the media run.
            - constraints : list[dict]
                The constraints for the media run.

                - targets : list[str]
                    The targets to constrain.
                - budget : float (float)
                    The maximum budget for these targets.
                - frequency : float (float)
                    The maximum frequency for these targets.
        name : str, optional
            The name of the optimization.
        programs : list[str], optional
            An array of programs that the Civis Media Optimizer either exclude or limit
            to.An error will be thrown if exclude_programs is not also set.
        networks : list[str], optional
            An array of networks that the Civis Media Optimizer either exclude or limit
            to.An error will be thrown if exclude_networks is not also set.
        exclude_programs : bool, optional
            If Civis Media Optimizer should exclude the programs in the programs
            parameter.If this value is set to false, it will make the optimization
            limit itself to the programs supplied through the programs parameter.An
            error will be thrown if programs is not also set.
        exclude_networks : bool, optional
            If Civis Media Optimizer should exclude the networks in the networks
            parameter.If this value is set to false, it will make the optimization
            limit itself to the networks supplied through the networks.An error will be
            thrown if networks is not also set.
        time_slot_percentages : dict, optional
            The maximum amount of the budget spent on that particular day of the week,
            daypart, or specific time slot for broadcast and cable.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The optimization ID.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of the optimization.
            - created_at : str (time)
            - updated_at : str (time)
            - finished_at : str (date-time)
                The end time of the last run.
            - state : str
                The state of the last run.
            - last_run_id : int
                The ID of the last run.
            - spot_order_id : int
                The ID for the spot order produced by the optimization.
            - archived : str
                The archival status of the requested item(s).
            - report_link : str
                A link to the visual report for the optimization.
            - spot_order_link : str
                A link to the json version of the spot order.
            - file_links : list[str]
                Links to the csv and xml versions of the spot order.
            - runs : list[dict]
                The runs of the optimization.

                - market_id : int
                    The market ID.
                - start_date : str (date)
                    The start date for the media run.
                - end_date : str (date)
                    The end date for the media run.
                - force_cpm : bool
                    Whether to force optimization to use CPM data even if partition
                    data is available.
                - reach_alpha : float (float)
                    A tuning parameter used to adjust RF.
                - syscodes : list[int]
                    The syscodes for the media run.
                - rate_cards : list[str]
                    The ratecards for the media run.
                - constraints : list[dict]
                    The constraints for the media run.

                    - targets : list[str]
                        The targets to constrain.
                    - budget : float (float)
                        The maximum budget for these targets.
                    - frequency : float (float)
                        The maximum frequency for these targets.
            - programs : list[str]
                An array of programs that the Civis Media Optimizer either exclude or
                limit to.An error will be thrown if exclude_programs is not also set.
            - networks : list[str]
                An array of networks that the Civis Media Optimizer either exclude or
                limit to.An error will be thrown if exclude_networks is not also set.
            - exclude_programs : bool
                If Civis Media Optimizer should exclude the programs in the programs
                parameter.If this value is set to false, it will make the optimization
                limit itself to the programs supplied through the programs parameter.An
                error will be thrown if programs is not also set.
            - exclude_networks : bool
                If Civis Media Optimizer should exclude the networks in the networks
                parameter.If this value is set to false, it will make the optimization
                limit itself to the networks supplied through the networks.An error
                will be thrown if networks is not also set.
            - time_slot_percentages : dict
                The maximum amount of the budget spent on that particular day of the
                week, daypart, or specific time slot for broadcast and cable.
        """
        ...

    def get_optimizations(
        self,
        id: int,
    ) -> Response:
        """Show a single optimization

        Parameters
        ----------
        id : int
            The optimization ID.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The optimization ID.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of the optimization.
            - created_at : str (time)
            - updated_at : str (time)
            - finished_at : str (date-time)
                The end time of the last run.
            - state : str
                The state of the last run.
            - last_run_id : int
                The ID of the last run.
            - spot_order_id : int
                The ID for the spot order produced by the optimization.
            - archived : str
                The archival status of the requested item(s).
            - report_link : str
                A link to the visual report for the optimization.
            - spot_order_link : str
                A link to the json version of the spot order.
            - file_links : list[str]
                Links to the csv and xml versions of the spot order.
            - runs : list[dict]
                The runs of the optimization.

                - market_id : int
                    The market ID.
                - start_date : str (date)
                    The start date for the media run.
                - end_date : str (date)
                    The end date for the media run.
                - force_cpm : bool
                    Whether to force optimization to use CPM data even if partition
                    data is available.
                - reach_alpha : float (float)
                    A tuning parameter used to adjust RF.
                - syscodes : list[int]
                    The syscodes for the media run.
                - rate_cards : list[str]
                    The ratecards for the media run.
                - constraints : list[dict]
                    The constraints for the media run.

                    - targets : list[str]
                        The targets to constrain.
                    - budget : float (float)
                        The maximum budget for these targets.
                    - frequency : float (float)
                        The maximum frequency for these targets.
            - programs : list[str]
                An array of programs that the Civis Media Optimizer either exclude or
                limit to.An error will be thrown if exclude_programs is not also set.
            - networks : list[str]
                An array of networks that the Civis Media Optimizer either exclude or
                limit to.An error will be thrown if exclude_networks is not also set.
            - exclude_programs : bool
                If Civis Media Optimizer should exclude the programs in the programs
                parameter.If this value is set to false, it will make the optimization
                limit itself to the programs supplied through the programs parameter.An
                error will be thrown if programs is not also set.
            - exclude_networks : bool
                If Civis Media Optimizer should exclude the networks in the networks
                parameter.If this value is set to false, it will make the optimization
                limit itself to the networks supplied through the networks.An error
                will be thrown if networks is not also set.
            - time_slot_percentages : dict
                The maximum amount of the budget spent on that particular day of the
                week, daypart, or specific time slot for broadcast and cable.
        """
        ...

    def patch_optimizations(
        self,
        id: int,
        name: str | None = ...,
        runs: list[dict] | None = ...,
        programs: list[str] | None = ...,
        networks: list[str] | None = ...,
        exclude_programs: bool | None = ...,
        exclude_networks: bool | None = ...,
        time_slot_percentages: dict | None = ...,
    ) -> Response:
        """Edit an existing optimization

        Parameters
        ----------
        id : int
            The optimization ID.
        name : str, optional
            The name of the optimization.
        runs : list[dict], optional
            The runs of the optimization.

            - market_id : int
                The market ID.
            - start_date : str (date)
                The start date for the media run.
            - end_date : str (date)
                The end date for the media run.
            - force_cpm : bool
                Whether to force optimization to use CPM data even if partition data is
                available.
            - reach_alpha : float (float)
                A tuning parameter used to adjust RF.
            - syscodes : list[int]
                The syscodes for the media run.
            - rate_cards : list[str]
                The ratecards for the media run.
            - constraints : list[dict]
                The constraints for the media run.

                - targets : list[str]
                    The targets to constrain.
                - budget : float (float)
                    The maximum budget for these targets.
                - frequency : float (float)
                    The maximum frequency for these targets.
        programs : list[str], optional
            An array of programs that the Civis Media Optimizer either exclude or limit
            to.An error will be thrown if exclude_programs is not also set.
        networks : list[str], optional
            An array of networks that the Civis Media Optimizer either exclude or limit
            to.An error will be thrown if exclude_networks is not also set.
        exclude_programs : bool, optional
            If Civis Media Optimizer should exclude the programs in the programs
            parameter.If this value is set to false, it will make the optimization
            limit itself to the programs supplied through the programs parameter.An
            error will be thrown if programs is not also set.
        exclude_networks : bool, optional
            If Civis Media Optimizer should exclude the networks in the networks
            parameter.If this value is set to false, it will make the optimization
            limit itself to the networks supplied through the networks.An error will be
            thrown if networks is not also set.
        time_slot_percentages : dict, optional
            The maximum amount of the budget spent on that particular day of the week,
            daypart, or specific time slot for broadcast and cable.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The optimization ID.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of the optimization.
            - created_at : str (time)
            - updated_at : str (time)
            - finished_at : str (date-time)
                The end time of the last run.
            - state : str
                The state of the last run.
            - last_run_id : int
                The ID of the last run.
            - spot_order_id : int
                The ID for the spot order produced by the optimization.
            - archived : str
                The archival status of the requested item(s).
            - report_link : str
                A link to the visual report for the optimization.
            - spot_order_link : str
                A link to the json version of the spot order.
            - file_links : list[str]
                Links to the csv and xml versions of the spot order.
            - runs : list[dict]
                The runs of the optimization.

                - market_id : int
                    The market ID.
                - start_date : str (date)
                    The start date for the media run.
                - end_date : str (date)
                    The end date for the media run.
                - force_cpm : bool
                    Whether to force optimization to use CPM data even if partition
                    data is available.
                - reach_alpha : float (float)
                    A tuning parameter used to adjust RF.
                - syscodes : list[int]
                    The syscodes for the media run.
                - rate_cards : list[str]
                    The ratecards for the media run.
                - constraints : list[dict]
                    The constraints for the media run.

                    - targets : list[str]
                        The targets to constrain.
                    - budget : float (float)
                        The maximum budget for these targets.
                    - frequency : float (float)
                        The maximum frequency for these targets.
            - programs : list[str]
                An array of programs that the Civis Media Optimizer either exclude or
                limit to.An error will be thrown if exclude_programs is not also set.
            - networks : list[str]
                An array of networks that the Civis Media Optimizer either exclude or
                limit to.An error will be thrown if exclude_networks is not also set.
            - exclude_programs : bool
                If Civis Media Optimizer should exclude the programs in the programs
                parameter.If this value is set to false, it will make the optimization
                limit itself to the programs supplied through the programs parameter.An
                error will be thrown if programs is not also set.
            - exclude_networks : bool
                If Civis Media Optimizer should exclude the networks in the networks
                parameter.If this value is set to false, it will make the optimization
                limit itself to the networks supplied through the networks.An error
                will be thrown if networks is not also set.
            - time_slot_percentages : dict
                The maximum amount of the budget spent on that particular day of the
                week, daypart, or specific time slot for broadcast and cable.
        """
        ...

    def post_optimizations_clone(
        self,
        id: int,
    ) -> Response:
        """Clone an existing optimization

        Parameters
        ----------
        id : int
            The optimization ID.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The optimization ID.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of the optimization.
            - created_at : str (time)
            - updated_at : str (time)
            - finished_at : str (date-time)
                The end time of the last run.
            - state : str
                The state of the last run.
            - last_run_id : int
                The ID of the last run.
            - spot_order_id : int
                The ID for the spot order produced by the optimization.
            - archived : str
                The archival status of the requested item(s).
            - report_link : str
                A link to the visual report for the optimization.
            - spot_order_link : str
                A link to the json version of the spot order.
            - file_links : list[str]
                Links to the csv and xml versions of the spot order.
            - runs : list[dict]
                The runs of the optimization.

                - market_id : int
                    The market ID.
                - start_date : str (date)
                    The start date for the media run.
                - end_date : str (date)
                    The end date for the media run.
                - force_cpm : bool
                    Whether to force optimization to use CPM data even if partition
                    data is available.
                - reach_alpha : float (float)
                    A tuning parameter used to adjust RF.
                - syscodes : list[int]
                    The syscodes for the media run.
                - rate_cards : list[str]
                    The ratecards for the media run.
                - constraints : list[dict]
                    The constraints for the media run.

                    - targets : list[str]
                        The targets to constrain.
                    - budget : float (float)
                        The maximum budget for these targets.
                    - frequency : float (float)
                        The maximum frequency for these targets.
            - programs : list[str]
                An array of programs that the Civis Media Optimizer either exclude or
                limit to.An error will be thrown if exclude_programs is not also set.
            - networks : list[str]
                An array of networks that the Civis Media Optimizer either exclude or
                limit to.An error will be thrown if exclude_networks is not also set.
            - exclude_programs : bool
                If Civis Media Optimizer should exclude the programs in the programs
                parameter.If this value is set to false, it will make the optimization
                limit itself to the programs supplied through the programs parameter.An
                error will be thrown if programs is not also set.
            - exclude_networks : bool
                If Civis Media Optimizer should exclude the networks in the networks
                parameter.If this value is set to false, it will make the optimization
                limit itself to the networks supplied through the networks.An error
                will be thrown if networks is not also set.
            - time_slot_percentages : dict
                The maximum amount of the budget spent on that particular day of the
                week, daypart, or specific time slot for broadcast and cable.
        """
        ...

    def post_optimizations_runs(
        self,
        id: int,
    ) -> Response:
        """Start a run

        Parameters
        ----------
        id : int
            The ID of the Optimization job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - optimization_id : int
                The ID of the Optimization job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def list_optimizations_runs(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List runs for the given Optimization job

        Parameters
        ----------
        id : int
            The ID of the Optimization job.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the run.
            - optimization_id : int
                The ID of the Optimization job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def get_optimizations_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Check status of a run

        Parameters
        ----------
        id : int
            The ID of the Optimization job.
        run_id : int
            The ID of the run.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - optimization_id : int
                The ID of the Optimization job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def delete_optimizations_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the Optimization job.
        run_id : int
            The ID of the run.

        Returns
        -------
        None
            Response code 202: success
        """
        ...

    def list_optimizations_runs_logs(
        self,
        id: int,
        run_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a run

        Parameters
        ----------
        id : int
            The ID of the Optimization job.
        run_id : int
            The ID of the run.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def list_spot_orders(
        self,
        id: int | None = ...,
        archived: str | None = ...,
    ) -> Response:
        """List all spot orders

        Parameters
        ----------
        id : int, optional
            The ID for the spot order.
        archived : str, optional
            The archival status of the requested item(s).

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the spot order.
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def post_spot_orders(
        self,
        body: str | None = ...,
    ) -> Response:
        """Create a spot order

        Parameters
        ----------
        body : str, optional
            CSV body of a spot order.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the spot order.
            - archived : str
                The archival status of the requested item(s).
            - csv_s3_uri : str
                S3 URI for the spot order CSV file.
            - json_s3_uri : str
                S3 URI for the spot order JSON file.
            - xml_archive_s3_uri : str
                S3 URI for the spot order XML archive.
            - last_transform_job_id : int
                ID of the spot order transformation job.
        """
        ...

    def get_spot_orders(
        self,
        id: int,
    ) -> Response:
        """Show a single spot order

        Parameters
        ----------
        id : int
            The ID for the spot order.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the spot order.
            - archived : str
                The archival status of the requested item(s).
            - csv_s3_uri : str
                S3 URI for the spot order CSV file.
            - json_s3_uri : str
                S3 URI for the spot order JSON file.
            - xml_archive_s3_uri : str
                S3 URI for the spot order XML archive.
            - last_transform_job_id : int
                ID of the spot order transformation job.
        """
        ...

    def put_spot_orders(
        self,
        id: int,
        body: str | None = ...,
    ) -> Response:
        """Edit the specified spot order

        Parameters
        ----------
        id : int
            The ID for the spot order.
        body : str, optional
            CSV body of a spot order.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the spot order.
            - archived : str
                The archival status of the requested item(s).
            - csv_s3_uri : str
                S3 URI for the spot order CSV file.
            - json_s3_uri : str
                S3 URI for the spot order JSON file.
            - xml_archive_s3_uri : str
                S3 URI for the spot order XML archive.
            - last_transform_job_id : int
                ID of the spot order transformation job.
        """
        ...

    def list_ratecards(
        self,
        archived: str | None = ...,
        filename: str | None = ...,
        dma_number: int | None = ...,
    ) -> Response:
        """List all ratecards

        Parameters
        ----------
        archived : str, optional
            The archival status of the requested item(s).
        filename : str, optional
            If specified, will be used to filter the ratecards returned. Substring
            matching is supported with "%" and "*" wildcards (e.g.,
            "filename=%ratecard%" will return both "ratecard 1" and "my ratecard").
        dma_number : int, optional
            If specified, will be used to filter the ratecards by DMA.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ratecard ID.
            - filename : str
                Name of the ratecard file.
            - start_on : str (date)
                First day to which the ratecard applies.
            - end_on : str (date)
                Last day to which the ratecard applies.
            - dma_number : int
                Number of the DMA associated with the ratecard.
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def post_ratecards(
        self,
        filename: str,
        start_on: str,
        end_on: str,
        dma_number: int,
    ) -> Response:
        """Create a Ratecard

        Parameters
        ----------
        filename : str
            Name of the ratecard file.
        start_on : str (date)
            First day to which the ratecard applies.
        end_on : str (date)
            Last day to which the ratecard applies.
        dma_number : int
            Number of the DMA associated with the ratecard.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ratecard ID.
            - filename : str
                Name of the ratecard file.
            - start_on : str (date)
                First day to which the ratecard applies.
            - end_on : str (date)
                Last day to which the ratecard applies.
            - dma_number : int
                Number of the DMA associated with the ratecard.
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def get_ratecards(
        self,
        id: int,
    ) -> Response:
        """Get a Ratecard

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ratecard ID.
            - filename : str
                Name of the ratecard file.
            - start_on : str (date)
                First day to which the ratecard applies.
            - end_on : str (date)
                Last day to which the ratecard applies.
            - dma_number : int
                Number of the DMA associated with the ratecard.
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_ratecards(
        self,
        id: int,
        filename: str,
        start_on: str,
        end_on: str,
        dma_number: int,
    ) -> Response:
        """Replace all attributes of this Ratecard

        Parameters
        ----------
        id : int
            The ratecard ID.
        filename : str
            Name of the ratecard file.
        start_on : str (date)
            First day to which the ratecard applies.
        end_on : str (date)
            Last day to which the ratecard applies.
        dma_number : int
            Number of the DMA associated with the ratecard.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ratecard ID.
            - filename : str
                Name of the ratecard file.
            - start_on : str (date)
                First day to which the ratecard applies.
            - end_on : str (date)
                Last day to which the ratecard applies.
            - dma_number : int
                Number of the DMA associated with the ratecard.
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def patch_ratecards(
        self,
        id: int,
        filename: str | None = ...,
        start_on: str | None = ...,
        end_on: str | None = ...,
        dma_number: int | None = ...,
    ) -> Response:
        """Update some attributes of this Ratecard

        Parameters
        ----------
        id : int
            The ratecard ID.
        filename : str, optional
            Name of the ratecard file.
        start_on : str (date), optional
            First day to which the ratecard applies.
        end_on : str (date), optional
            Last day to which the ratecard applies.
        dma_number : int, optional
            Number of the DMA associated with the ratecard.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ratecard ID.
            - filename : str
                Name of the ratecard file.
            - start_on : str (date)
                First day to which the ratecard applies.
            - end_on : str (date)
                Last day to which the ratecard applies.
            - dma_number : int
                Number of the DMA associated with the ratecard.
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def list_dmas(
        self,
        name: str | None = ...,
        number: int | None = ...,
    ) -> Response:
        """List all Designated Market Areas

        Parameters
        ----------
        name : str, optional
            If specified, will be used to filter the DMAs returned. Substring matching
            is supported with "%" and "*" wildcards (e.g., "name=%region%" will return
            both "region1" and "my region").
        number : int, optional
            If specified, will be used to filter the DMAS by number.

        Returns
        -------
        :class:`civis.response.Response`
            - name : str
                Name for the DMA region.
            - number : int
                Identifier number for a DMA.
        """
        ...

    def list_targets(
        self,
        name: str | None = ...,
        identifier: str | None = ...,
        data_source: str | None = ...,
    ) -> Response:
        """List all Media Targets

        Parameters
        ----------
        name : str, optional
            The name of the target.
        identifier : str, optional
            A unique identifier for this target.
        data_source : str, optional
            The source of viewership data for this target.

        Returns
        -------
        :class:`civis.response.Response`
            - name : str
                The name of the target.
            - identifier : str
                A unique identifier for this target.
            - data_source : str
                The source of viewership data for this target.
        """
        ...

class _Models:
    def list_types(
        self,
    ) -> Response:
        """List all available model types

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the model type.
            - algorithm : str
                The name of the algorithm used to train the model.
            - dv_type : str
                The type of dependent variable predicted by the model.
            - fint_allowed : bool
                Whether this model type supports searching for interaction terms.
        """
        ...

    def list(
        self,
        model_name: str | None = ...,
        training_table_name: str | None = ...,
        dependent_variable: str | None = ...,
        status: str | None = ...,
        author: str | None = ...,
        hidden: bool | None = ...,
        archived: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List

        Parameters
        ----------
        model_name : str, optional
            If specified, will be used to filter the models returned. Substring
            matching is supported. (e.g., "modelName=model" will return both "model1"
            and "my model").
        training_table_name : str, optional
            If specified, will be used to filter the models returned by the training
            dataset table name. Substring matching is supported. (e.g.,
            "trainingTableName=table" will return both "table1" and "my_table").
        dependent_variable : str, optional
            If specified, will be used to filter the models returned by the dependent
            variable column name. Substring matching is supported. (e.g.,
            "dependentVariable=predictor" will return both "predictor" and "my
            predictor").
        status : str, optional
            If specified, returns models with one of these statuses. It accepts a
            comma-separated list, possible values are 'running', 'failed', 'succeeded',
            'idle', 'scheduled'.
        author : str, optional
            If specified, return items from any of these authors. It accepts a comma-
            separated list of user IDs.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.
        archived : str, optional
            The archival status of the requested item(s).
        limit : int, optional
            Number of results to return. Defaults to its maximum of 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to updated_at. Must be
            one of: updated_at, name, created_at, last_run.updated_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the model.
            - table_name : str
                The qualified name of the table containing the training set from which
                to build the model.
            - database_id : int
                The ID of the database holding the training set table used to build the
                model.
            - credential_id : int
                The ID of the credential used to read the target table. Defaults to the
                user's default credential.
            - model_name : str
                The name of the model.
            - description : str
                A description of the model.
            - interaction_terms : bool
                Whether to search for interaction terms.
            - box_cox_transformation : bool
                Whether to transform data so that it assumes a normal distribution.
                Valid only with continuous models.
            - model_type_id : int
                The ID of the model's type.
            - primary_key : str
                The unique ID (primary key) of the training dataset.
            - dependent_variable : str
                The dependent variable of the training dataset.
            - dependent_variable_order : list[str]
                The order of dependent variables, especially useful for Ordinal
                Modeling.
            - excluded_columns : list[str]
                A list of columns which will be considered ineligible to be independent
                variables.
            - limiting_sql : str
                A custom SQL WHERE clause used to filter the rows used to build the
                model. (e.g., "id > 105").
            - cross_validation_parameters : dict
                Cross validation parameter grid for tree methods, e.g. {"n_estimators":
                [100, 200, 500], "learning_rate": [0.01, 0.1], "max_depth": [2, 3]}.
            - number_of_folds : int
                Number of folds for cross validation. Default value is 5.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - parent_id : int
                The ID of the parent job that will trigger this model.
            - time_zone : str
                The time zone of this model.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (date-time)
                The time the model was created.
            - updated_at : str (date-time)
                The time the model was updated.
            - current_build_state : str
                The status of the current model build. One of "succeeded", "failed",
                "queued", or "running,"or "idle", if no build has been attempted.
            - current_build_exception : str
                Exception message, if applicable, of the current model build.
            - builds : list[dict]
                A list of trained models available for making predictions.

                - id : int
                    The ID of the model build.
                - name : str
                    The name of the model build.
                - created_at : str
                    The time the model build was created.
                - description : str
                    A description of the model build.
                - root_mean_squared_error : float (float)
                    A key metric for continuous models. Nil for other model types.
                - r_squared_error : float (float)
                    A key metric for continuous models. Nil for other model types.
                - roc_auc : float (float)
                    A key metric for binary, multinomial, and ordinal models. Nil for
                    other model types.
            - predictions : list[dict]
                The tables upon which the model will be applied.

                - id : int
                    The ID of the model to which to apply the prediction.
                - table_name : str
                    The qualified name of the table on which to apply the predictive
                    model.
                - primary_key : list[str]
                    The primary key or composite keys of the table being predicted.
                - limiting_sql : str
                    A SQL WHERE clause used to scope the rows to be predicted.
                - output_table : str
                    The qualified name of the table to be created which will contain
                    the model's predictions.
                - state : str
                    The status of the prediction. One of: "succeeded", "failed",
                    "queued", or "running,"or "idle", if no build has been attempted.
            - last_output_location : str
                The output JSON for the last build.
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Retrieve model configuration

        Parameters
        ----------
        id : int
            The ID of the model.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the model.
            - table_name : str
                The qualified name of the table containing the training set from which
                to build the model.
            - database_id : int
                The ID of the database holding the training set table used to build the
                model.
            - credential_id : int
                The ID of the credential used to read the target table. Defaults to the
                user's default credential.
            - model_name : str
                The name of the model.
            - description : str
                A description of the model.
            - interaction_terms : bool
                Whether to search for interaction terms.
            - box_cox_transformation : bool
                Whether to transform data so that it assumes a normal distribution.
                Valid only with continuous models.
            - model_type_id : int
                The ID of the model's type.
            - primary_key : str
                The unique ID (primary key) of the training dataset.
            - dependent_variable : str
                The dependent variable of the training dataset.
            - dependent_variable_order : list[str]
                The order of dependent variables, especially useful for Ordinal
                Modeling.
            - excluded_columns : list[str]
                A list of columns which will be considered ineligible to be independent
                variables.
            - limiting_sql : str
                A custom SQL WHERE clause used to filter the rows used to build the
                model. (e.g., "id > 105").
            - active_build_id : int
                The ID of the current active build, the build used to score
                predictions.
            - cross_validation_parameters : dict
                Cross validation parameter grid for tree methods, e.g. {"n_estimators":
                [100, 200, 500], "learning_rate": [0.01, 0.1], "max_depth": [2, 3]}.
            - number_of_folds : int
                Number of folds for cross validation. Default value is 5.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - parent_id : int
                The ID of the parent job that will trigger this model.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - time_zone : str
                The time zone of this model.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - hidden : bool
                The hidden status of the item.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (date-time)
                The time the model was created.
            - updated_at : str (date-time)
                The time the model was updated.
            - current_build_state : str
                The status of the current model build. One of "succeeded", "failed",
                "queued", or "running,"or "idle", if no build has been attempted.
            - current_build_exception : str
                Exception message, if applicable, of the current model build.
            - builds : list[dict]
                A list of trained models available for making predictions.

                - id : int
                    The ID of the model build.
                - name : str
                    The name of the model build.
                - created_at : str
                    The time the model build was created.
                - description : str
                    A description of the model build.
                - root_mean_squared_error : float (float)
                    A key metric for continuous models. Nil for other model types.
                - r_squared_error : float (float)
                    A key metric for continuous models. Nil for other model types.
                - roc_auc : float (float)
                    A key metric for binary, multinomial, and ordinal models. Nil for
                    other model types.
            - predictions : list[dict]
                The tables upon which the model will be applied.

                - id : int
                    The ID of the model to which to apply the prediction.
                - table_name : str
                    The qualified name of the table on which to apply the predictive
                    model.
                - primary_key : list[str]
                    The primary key or composite keys of the table being predicted.
                - limiting_sql : str
                    A SQL WHERE clause used to scope the rows to be predicted.
                - output_table : str
                    The qualified name of the table to be created which will contain
                    the model's predictions.
                - schedule : dict
                    - scheduled : bool
                        If the item is scheduled.
                    - scheduled_days : list[int]
                        Days of the week, based on numeric value starting at 0 for
                        Sunday. Mutually exclusive with scheduledDaysOfMonth
                    - scheduled_hours : list[int]
                        Hours of the day it is scheduled on.
                    - scheduled_minutes : list[int]
                        Minutes of the day it is scheduled on.
                    - scheduled_runs_per_hour : int
                        Deprecated in favor of scheduled minutes.
                    - scheduled_days_of_month : list[int]
                        Days of the month it is scheduled on, mutually exclusive with
                        scheduledDays.
                - state : str
                    The status of the prediction. One of: "succeeded", "failed",
                    "queued", or "running,"or "idle", if no build has been attempted.
            - last_output_location : str
                The output JSON for the last build.
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def get_builds(
        self,
        id: int,
        build_id: int,
    ) -> Response:
        """Check status of a build

        Parameters
        ----------
        id : int
            The ID of the Model job.
        build_id : int
            The ID of the build.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the model build.
            - state : str
                The state of the model build.one of 'queued' 'running' 'succeeded'
                'failed' or 'cancelled'.
            - error : str
                The error, if any, returned by the build.
            - name : str
                The name of the model build.
            - created_at : str
                The time the model build was created.
            - description : str
                A description of the model build.
            - root_mean_squared_error : float (float)
                A key metric for continuous models. Nil for other model types.
            - r_squared_error : float (float)
                A key metric for continuous models. Nil for other model types.
            - roc_auc : float (float)
                A key metric for binary, multinomial, and ordinal models. Nil for other
                model types.
            - transformation_metadata : str
                A string representing the full JSON output of the metadata for
                transformation of column names
            - output : str
                A string representing the JSON output for the specified build. Only
                present when smaller than 10KB in size.
            - output_location : str
                A URL representing the location of the full JSON output for the
                specified build.The URL link will be valid for 5 minutes.
        """
        ...

    def delete_builds(
        self,
        id: int,
        build_id: int,
    ) -> Response:
        """Cancel a build

        Parameters
        ----------
        id : int
            The ID of the Model job.
        build_id : int
            The ID of the build.

        Returns
        -------
        None
            Response code 202: success
        """
        ...

    def list_builds(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List builds for the given Model job

        Parameters
        ----------
        id : int
            The ID of the Model job.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the model build.
            - state : str
                The state of the model build.one of 'queued' 'running' 'succeeded'
                'failed' or 'cancelled'.
            - error : str
                The error, if any, returned by the build.
            - name : str
                The name of the model build.
            - created_at : str
                The time the model build was created.
            - description : str
                A description of the model build.
            - root_mean_squared_error : float (float)
                A key metric for continuous models. Nil for other model types.
            - r_squared_error : float (float)
                A key metric for continuous models. Nil for other model types.
            - roc_auc : float (float)
                A key metric for binary, multinomial, and ordinal models. Nil for other
                model types.
            - transformation_metadata : str
                A string representing the full JSON output of the metadata for
                transformation of column names
            - output : str
                A string representing the JSON output for the specified build. Only
                present when smaller than 10KB in size.
            - output_location : str
                A URL representing the location of the full JSON output for the
                specified build.The URL link will be valid for 5 minutes.
        """
        ...

    def list_builds_logs(
        self,
        id: int,
        build_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a build

        Parameters
        ----------
        id : int
            The ID of the Model job.
        build_id : int
            The ID of the build.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def list_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def list_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a Model belongs to

        Parameters
        ----------
        id : int
            The ID of the Model.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a Model to a project

        Parameters
        ----------
        id : int
            The ID of the Model.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a Model from a project

        Parameters
        ----------
        id : int
            The ID of the Model.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the model.
            - table_name : str
                The qualified name of the table containing the training set from which
                to build the model.
            - database_id : int
                The ID of the database holding the training set table used to build the
                model.
            - credential_id : int
                The ID of the credential used to read the target table. Defaults to the
                user's default credential.
            - model_name : str
                The name of the model.
            - description : str
                A description of the model.
            - interaction_terms : bool
                Whether to search for interaction terms.
            - box_cox_transformation : bool
                Whether to transform data so that it assumes a normal distribution.
                Valid only with continuous models.
            - model_type_id : int
                The ID of the model's type.
            - primary_key : str
                The unique ID (primary key) of the training dataset.
            - dependent_variable : str
                The dependent variable of the training dataset.
            - dependent_variable_order : list[str]
                The order of dependent variables, especially useful for Ordinal
                Modeling.
            - excluded_columns : list[str]
                A list of columns which will be considered ineligible to be independent
                variables.
            - limiting_sql : str
                A custom SQL WHERE clause used to filter the rows used to build the
                model. (e.g., "id > 105").
            - active_build_id : int
                The ID of the current active build, the build used to score
                predictions.
            - cross_validation_parameters : dict
                Cross validation parameter grid for tree methods, e.g. {"n_estimators":
                [100, 200, 500], "learning_rate": [0.01, 0.1], "max_depth": [2, 3]}.
            - number_of_folds : int
                Number of folds for cross validation. Default value is 5.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - parent_id : int
                The ID of the parent job that will trigger this model.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - time_zone : str
                The time zone of this model.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - hidden : bool
                The hidden status of the item.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (date-time)
                The time the model was created.
            - updated_at : str (date-time)
                The time the model was updated.
            - current_build_state : str
                The status of the current model build. One of "succeeded", "failed",
                "queued", or "running,"or "idle", if no build has been attempted.
            - current_build_exception : str
                Exception message, if applicable, of the current model build.
            - builds : list[dict]
                A list of trained models available for making predictions.

                - id : int
                    The ID of the model build.
                - name : str
                    The name of the model build.
                - created_at : str
                    The time the model build was created.
                - description : str
                    A description of the model build.
                - root_mean_squared_error : float (float)
                    A key metric for continuous models. Nil for other model types.
                - r_squared_error : float (float)
                    A key metric for continuous models. Nil for other model types.
                - roc_auc : float (float)
                    A key metric for binary, multinomial, and ordinal models. Nil for
                    other model types.
            - predictions : list[dict]
                The tables upon which the model will be applied.

                - id : int
                    The ID of the model to which to apply the prediction.
                - table_name : str
                    The qualified name of the table on which to apply the predictive
                    model.
                - primary_key : list[str]
                    The primary key or composite keys of the table being predicted.
                - limiting_sql : str
                    A SQL WHERE clause used to scope the rows to be predicted.
                - output_table : str
                    The qualified name of the table to be created which will contain
                    the model's predictions.
                - schedule : dict
                    - scheduled : bool
                        If the item is scheduled.
                    - scheduled_days : list[int]
                        Days of the week, based on numeric value starting at 0 for
                        Sunday. Mutually exclusive with scheduledDaysOfMonth
                    - scheduled_hours : list[int]
                        Hours of the day it is scheduled on.
                    - scheduled_minutes : list[int]
                        Minutes of the day it is scheduled on.
                    - scheduled_runs_per_hour : int
                        Deprecated in favor of scheduled minutes.
                    - scheduled_days_of_month : list[int]
                        Days of the month it is scheduled on, mutually exclusive with
                        scheduledDays.
                - state : str
                    The status of the prediction. One of: "succeeded", "failed",
                    "queued", or "running,"or "idle", if no build has been attempted.
            - last_output_location : str
                The output JSON for the last build.
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def list_schedules(
        self,
        id: int,
    ) -> Response:
        """Show the model build schedule

        Parameters
        ----------
        id : int
            The ID of the model associated with this schedule.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the model associated with this schedule.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
        """
        ...

class _Notebooks:
    def list(
        self,
        hidden: bool | None = ...,
        archived: str | None = ...,
        author: str | None = ...,
        status: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Notebooks

        Parameters
        ----------
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.
        archived : str, optional
            The archival status of the requested item(s).
        author : str, optional
            If specified, return items from any of these authors. It accepts a comma-
            separated list of user IDs.
        status : str, optional
            If specified, returns notebooks with one of these statuses. It accepts a
            comma-separated list, possible values are 'running', 'pending', 'idle'.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to updated_at. Must be
            one of: updated_at, name, created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID for this notebook.
            - name : str
                The name of this notebook.
            - language : str
                The kernel language of this notebook.
            - description : str
                The description of this notebook.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
            - updated_at : str (time)
            - most_recent_deployment : dict
                - deployment_id : int
                    The ID for this deployment.
                - user_id : int
                    The ID of the owner.
                - host : str
                    Domain of the deployment.
                - name : str
                    Name of the deployment.
                - docker_image_name : str
                    The name of the docker image to pull from DockerHub.
                - docker_image_tag : str
                    The tag of the docker image to pull from DockerHub (default:
                    latest).
                - instance_type : str
                    The EC2 instance type requested for the deployment.
                - memory : int
                    The memory allocated to the deployment, in MB.
                - cpu : int
                    The cpu allocated to the deployment, in millicores.
                - state : str
                    The state of the deployment.
                - state_message : str
                    A detailed description of the state.
                - max_memory_usage : float (float)
                    If the deployment has finished, the maximum amount of memory used
                    during the deployment, in MB.
                - max_cpu_usage : float (float)
                    If the deployment has finished, the maximum amount of cpu used
                    during the deployment, in millicores.
                - created_at : str (time)
                - updated_at : str (time)
                - notebook_id : int
                    The ID of owning Notebook
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def post(
        self,
        name: str | None = ...,
        language: str | None = ...,
        description: str | None = ...,
        file_id: str | None = ...,
        requirements_file_id: str | None = ...,
        requirements: str | None = ...,
        docker_image_name: str | None = ...,
        docker_image_tag: str | None = ...,
        instance_type: str | None = ...,
        memory: int | None = ...,
        cpu: int | None = ...,
        credentials: list[int] | None = ...,
        environment_variables: dict | None = ...,
        idle_timeout: int | None = ...,
        partition_label: str | None = ...,
        git_repo_url: str | None = ...,
        git_ref: str | None = ...,
        git_path: str | None = ...,
        hidden: bool | None = ...,
    ) -> Response:
        """Create a Notebook

        Parameters
        ----------
        name : str, optional
            The name of this notebook.
        language : str, optional
            The kernel language of this notebook.
        description : str, optional
            The description of this notebook.
        file_id : str, optional
            The file ID for the S3 file containing the .ipynb file.
        requirements_file_id : str, optional
            The file ID for the S3 file containing the requirements.txt file.
        requirements : str, optional
            The requirements txt file.
        docker_image_name : str, optional
            The name of the docker image to pull from DockerHub.
        docker_image_tag : str, optional
            The tag of the docker image to pull from DockerHub (default: latest).
        instance_type : str, optional
            The EC2 instance type to deploy to.
        memory : int, optional
            The amount of memory allocated to the notebook.
        cpu : int, optional
            The amount of cpu allocated to the the notebook.
        credentials : list[int], optional
            A list of credential IDs to pass to the notebook.
        environment_variables : dict, optional
            Environment variables to be passed into the Notebook.
        idle_timeout : int, optional
            How long the notebook will stay alive without any kernel activity.
        partition_label : str, optional
            The partition label used to run this object.
        git_repo_url : str, optional
            The url of the git repository
        git_ref : str, optional
            The git reference if git repo is specified
        git_path : str, optional
            The path to the .ipynb file in the git repo that will be started up on
            notebook launch
        hidden : bool, optional
            The hidden status of the item.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this notebook.
            - name : str
                The name of this notebook.
            - language : str
                The kernel language of this notebook.
            - description : str
                The description of this notebook.
            - notebook_url : str
                Time-limited URL to get the .ipynb file for this notebook.
            - notebook_preview_url : str
                Time-limited URL to get the .htm preview file for this notebook.
            - requirements_url : str
                Time-limited URL to get the requirements.txt file for this notebook.
            - file_id : str
                The file ID for the S3 file containing the .ipynb file.
            - requirements_file_id : str
                The file ID for the S3 file containing the requirements.txt file.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - instance_type : str
                The EC2 instance type to deploy to.
            - memory : int
                The amount of memory allocated to the notebook.
            - cpu : int
                The amount of cpu allocated to the the notebook.
            - created_at : str (time)
            - updated_at : str (time)
            - most_recent_deployment : dict
                - deployment_id : int
                    The ID for this deployment.
                - user_id : int
                    The ID of the owner.
                - host : str
                    Domain of the deployment.
                - name : str
                    Name of the deployment.
                - docker_image_name : str
                    The name of the docker image to pull from DockerHub.
                - docker_image_tag : str
                    The tag of the docker image to pull from DockerHub (default:
                    latest).
                - display_url : str
                    A signed URL for viewing the deployed item.
                - instance_type : str
                    The EC2 instance type requested for the deployment.
                - memory : int
                    The memory allocated to the deployment, in MB.
                - cpu : int
                    The cpu allocated to the deployment, in millicores.
                - state : str
                    The state of the deployment.
                - state_message : str
                    A detailed description of the state.
                - max_memory_usage : float (float)
                    If the deployment has finished, the maximum amount of memory used
                    during the deployment, in MB.
                - max_cpu_usage : float (float)
                    If the deployment has finished, the maximum amount of cpu used
                    during the deployment, in millicores.
                - created_at : str (time)
                - updated_at : str (time)
                - notebook_id : int
                    The ID of owning Notebook
            - credentials : list[int]
                A list of credential IDs to pass to the notebook.
            - environment_variables : dict
                Environment variables to be passed into the Notebook.
            - idle_timeout : int
                How long the notebook will stay alive without any kernel activity.
            - partition_label : str
                The partition label used to run this object.
            - git_repo_id : int
                The ID of the git repository.
            - git_repo_url : str
                The url of the git repository
            - git_ref : str
                The git reference if git repo is specified
            - git_path : str
                The path to the .ipynb file in the git repo that will be started up on
                notebook launch
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Get a Notebook

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this notebook.
            - name : str
                The name of this notebook.
            - language : str
                The kernel language of this notebook.
            - description : str
                The description of this notebook.
            - notebook_url : str
                Time-limited URL to get the .ipynb file for this notebook.
            - notebook_preview_url : str
                Time-limited URL to get the .htm preview file for this notebook.
            - requirements_url : str
                Time-limited URL to get the requirements.txt file for this notebook.
            - file_id : str
                The file ID for the S3 file containing the .ipynb file.
            - requirements_file_id : str
                The file ID for the S3 file containing the requirements.txt file.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - instance_type : str
                The EC2 instance type to deploy to.
            - memory : int
                The amount of memory allocated to the notebook.
            - cpu : int
                The amount of cpu allocated to the the notebook.
            - created_at : str (time)
            - updated_at : str (time)
            - most_recent_deployment : dict
                - deployment_id : int
                    The ID for this deployment.
                - user_id : int
                    The ID of the owner.
                - host : str
                    Domain of the deployment.
                - name : str
                    Name of the deployment.
                - docker_image_name : str
                    The name of the docker image to pull from DockerHub.
                - docker_image_tag : str
                    The tag of the docker image to pull from DockerHub (default:
                    latest).
                - display_url : str
                    A signed URL for viewing the deployed item.
                - instance_type : str
                    The EC2 instance type requested for the deployment.
                - memory : int
                    The memory allocated to the deployment, in MB.
                - cpu : int
                    The cpu allocated to the deployment, in millicores.
                - state : str
                    The state of the deployment.
                - state_message : str
                    A detailed description of the state.
                - max_memory_usage : float (float)
                    If the deployment has finished, the maximum amount of memory used
                    during the deployment, in MB.
                - max_cpu_usage : float (float)
                    If the deployment has finished, the maximum amount of cpu used
                    during the deployment, in millicores.
                - created_at : str (time)
                - updated_at : str (time)
                - notebook_id : int
                    The ID of owning Notebook
            - credentials : list[int]
                A list of credential IDs to pass to the notebook.
            - environment_variables : dict
                Environment variables to be passed into the Notebook.
            - idle_timeout : int
                How long the notebook will stay alive without any kernel activity.
            - partition_label : str
                The partition label used to run this object.
            - git_repo_id : int
                The ID of the git repository.
            - git_repo_url : str
                The url of the git repository
            - git_ref : str
                The git reference if git repo is specified
            - git_path : str
                The path to the .ipynb file in the git repo that will be started up on
                notebook launch
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def put(
        self,
        id: int,
        name: str | None = ...,
        language: str | None = ...,
        description: str | None = ...,
        file_id: str | None = ...,
        requirements_file_id: str | None = ...,
        requirements: str | None = ...,
        docker_image_name: str | None = ...,
        docker_image_tag: str | None = ...,
        instance_type: str | None = ...,
        memory: int | None = ...,
        cpu: int | None = ...,
        credentials: list[int] | None = ...,
        environment_variables: dict | None = ...,
        idle_timeout: int | None = ...,
        partition_label: str | None = ...,
        git_repo_url: str | None = ...,
        git_ref: str | None = ...,
        git_path: str | None = ...,
    ) -> Response:
        """Replace all attributes of this Notebook

        Parameters
        ----------
        id : int
            The ID for this notebook.
        name : str, optional
            The name of this notebook.
        language : str, optional
            The kernel language of this notebook.
        description : str, optional
            The description of this notebook.
        file_id : str, optional
            The file ID for the S3 file containing the .ipynb file.
        requirements_file_id : str, optional
            The file ID for the S3 file containing the requirements.txt file.
        requirements : str, optional
            The requirements txt file.
        docker_image_name : str, optional
            The name of the docker image to pull from DockerHub.
        docker_image_tag : str, optional
            The tag of the docker image to pull from DockerHub (default: latest).
        instance_type : str, optional
            The EC2 instance type to deploy to.
        memory : int, optional
            The amount of memory allocated to the notebook.
        cpu : int, optional
            The amount of cpu allocated to the the notebook.
        credentials : list[int], optional
            A list of credential IDs to pass to the notebook.
        environment_variables : dict, optional
            Environment variables to be passed into the Notebook.
        idle_timeout : int, optional
            How long the notebook will stay alive without any kernel activity.
        partition_label : str, optional
            The partition label used to run this object.
        git_repo_url : str, optional
            The url of the git repository
        git_ref : str, optional
            The git reference if git repo is specified
        git_path : str, optional
            The path to the .ipynb file in the git repo that will be started up on
            notebook launch

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this notebook.
            - name : str
                The name of this notebook.
            - language : str
                The kernel language of this notebook.
            - description : str
                The description of this notebook.
            - notebook_url : str
                Time-limited URL to get the .ipynb file for this notebook.
            - notebook_preview_url : str
                Time-limited URL to get the .htm preview file for this notebook.
            - requirements_url : str
                Time-limited URL to get the requirements.txt file for this notebook.
            - file_id : str
                The file ID for the S3 file containing the .ipynb file.
            - requirements_file_id : str
                The file ID for the S3 file containing the requirements.txt file.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - instance_type : str
                The EC2 instance type to deploy to.
            - memory : int
                The amount of memory allocated to the notebook.
            - cpu : int
                The amount of cpu allocated to the the notebook.
            - created_at : str (time)
            - updated_at : str (time)
            - most_recent_deployment : dict
                - deployment_id : int
                    The ID for this deployment.
                - user_id : int
                    The ID of the owner.
                - host : str
                    Domain of the deployment.
                - name : str
                    Name of the deployment.
                - docker_image_name : str
                    The name of the docker image to pull from DockerHub.
                - docker_image_tag : str
                    The tag of the docker image to pull from DockerHub (default:
                    latest).
                - display_url : str
                    A signed URL for viewing the deployed item.
                - instance_type : str
                    The EC2 instance type requested for the deployment.
                - memory : int
                    The memory allocated to the deployment, in MB.
                - cpu : int
                    The cpu allocated to the deployment, in millicores.
                - state : str
                    The state of the deployment.
                - state_message : str
                    A detailed description of the state.
                - max_memory_usage : float (float)
                    If the deployment has finished, the maximum amount of memory used
                    during the deployment, in MB.
                - max_cpu_usage : float (float)
                    If the deployment has finished, the maximum amount of cpu used
                    during the deployment, in millicores.
                - created_at : str (time)
                - updated_at : str (time)
                - notebook_id : int
                    The ID of owning Notebook
            - credentials : list[int]
                A list of credential IDs to pass to the notebook.
            - environment_variables : dict
                Environment variables to be passed into the Notebook.
            - idle_timeout : int
                How long the notebook will stay alive without any kernel activity.
            - partition_label : str
                The partition label used to run this object.
            - git_repo_id : int
                The ID of the git repository.
            - git_repo_url : str
                The url of the git repository
            - git_ref : str
                The git reference if git repo is specified
            - git_path : str
                The path to the .ipynb file in the git repo that will be started up on
                notebook launch
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def patch(
        self,
        id: int,
        name: str | None = ...,
        language: str | None = ...,
        description: str | None = ...,
        file_id: str | None = ...,
        requirements_file_id: str | None = ...,
        requirements: str | None = ...,
        docker_image_name: str | None = ...,
        docker_image_tag: str | None = ...,
        instance_type: str | None = ...,
        memory: int | None = ...,
        cpu: int | None = ...,
        credentials: list[int] | None = ...,
        environment_variables: dict | None = ...,
        idle_timeout: int | None = ...,
        partition_label: str | None = ...,
        git_repo_url: str | None = ...,
        git_ref: str | None = ...,
        git_path: str | None = ...,
    ) -> Response:
        """Update some attributes of this Notebook

        Parameters
        ----------
        id : int
            The ID for this notebook.
        name : str, optional
            The name of this notebook.
        language : str, optional
            The kernel language of this notebook.
        description : str, optional
            The description of this notebook.
        file_id : str, optional
            The file ID for the S3 file containing the .ipynb file.
        requirements_file_id : str, optional
            The file ID for the S3 file containing the requirements.txt file.
        requirements : str, optional
            The requirements txt file.
        docker_image_name : str, optional
            The name of the docker image to pull from DockerHub.
        docker_image_tag : str, optional
            The tag of the docker image to pull from DockerHub (default: latest).
        instance_type : str, optional
            The EC2 instance type to deploy to.
        memory : int, optional
            The amount of memory allocated to the notebook.
        cpu : int, optional
            The amount of cpu allocated to the the notebook.
        credentials : list[int], optional
            A list of credential IDs to pass to the notebook.
        environment_variables : dict, optional
            Environment variables to be passed into the Notebook.
        idle_timeout : int, optional
            How long the notebook will stay alive without any kernel activity.
        partition_label : str, optional
            The partition label used to run this object.
        git_repo_url : str, optional
            The url of the git repository
        git_ref : str, optional
            The git reference if git repo is specified
        git_path : str, optional
            The path to the .ipynb file in the git repo that will be started up on
            notebook launch

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this notebook.
            - name : str
                The name of this notebook.
            - language : str
                The kernel language of this notebook.
            - description : str
                The description of this notebook.
            - notebook_url : str
                Time-limited URL to get the .ipynb file for this notebook.
            - notebook_preview_url : str
                Time-limited URL to get the .htm preview file for this notebook.
            - requirements_url : str
                Time-limited URL to get the requirements.txt file for this notebook.
            - file_id : str
                The file ID for the S3 file containing the .ipynb file.
            - requirements_file_id : str
                The file ID for the S3 file containing the requirements.txt file.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - instance_type : str
                The EC2 instance type to deploy to.
            - memory : int
                The amount of memory allocated to the notebook.
            - cpu : int
                The amount of cpu allocated to the the notebook.
            - created_at : str (time)
            - updated_at : str (time)
            - most_recent_deployment : dict
                - deployment_id : int
                    The ID for this deployment.
                - user_id : int
                    The ID of the owner.
                - host : str
                    Domain of the deployment.
                - name : str
                    Name of the deployment.
                - docker_image_name : str
                    The name of the docker image to pull from DockerHub.
                - docker_image_tag : str
                    The tag of the docker image to pull from DockerHub (default:
                    latest).
                - display_url : str
                    A signed URL for viewing the deployed item.
                - instance_type : str
                    The EC2 instance type requested for the deployment.
                - memory : int
                    The memory allocated to the deployment, in MB.
                - cpu : int
                    The cpu allocated to the deployment, in millicores.
                - state : str
                    The state of the deployment.
                - state_message : str
                    A detailed description of the state.
                - max_memory_usage : float (float)
                    If the deployment has finished, the maximum amount of memory used
                    during the deployment, in MB.
                - max_cpu_usage : float (float)
                    If the deployment has finished, the maximum amount of cpu used
                    during the deployment, in millicores.
                - created_at : str (time)
                - updated_at : str (time)
                - notebook_id : int
                    The ID of owning Notebook
            - credentials : list[int]
                A list of credential IDs to pass to the notebook.
            - environment_variables : dict
                Environment variables to be passed into the Notebook.
            - idle_timeout : int
                How long the notebook will stay alive without any kernel activity.
            - partition_label : str
                The partition label used to run this object.
            - git_repo_id : int
                The ID of the git repository.
            - git_repo_url : str
                The url of the git repository
            - git_ref : str
                The git reference if git repo is specified
            - git_path : str
                The path to the .ipynb file in the git repo that will be started up on
                notebook launch
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def list_update_links(
        self,
        id: int,
    ) -> Response:
        """Get URLs to update notebook

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - update_url : str
                Time-limited URL to PUT new contents of the .ipynb file for this
                notebook.
            - update_preview_url : str
                Time-limited URL to PUT new contents of the .htm preview file for this
                notebook.
        """
        ...

    def post_clone(
        self,
        id: int,
    ) -> Response:
        """Clone this Notebook

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this notebook.
            - name : str
                The name of this notebook.
            - language : str
                The kernel language of this notebook.
            - description : str
                The description of this notebook.
            - notebook_url : str
                Time-limited URL to get the .ipynb file for this notebook.
            - notebook_preview_url : str
                Time-limited URL to get the .htm preview file for this notebook.
            - requirements_url : str
                Time-limited URL to get the requirements.txt file for this notebook.
            - file_id : str
                The file ID for the S3 file containing the .ipynb file.
            - requirements_file_id : str
                The file ID for the S3 file containing the requirements.txt file.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - instance_type : str
                The EC2 instance type to deploy to.
            - memory : int
                The amount of memory allocated to the notebook.
            - cpu : int
                The amount of cpu allocated to the the notebook.
            - created_at : str (time)
            - updated_at : str (time)
            - most_recent_deployment : dict
                - deployment_id : int
                    The ID for this deployment.
                - user_id : int
                    The ID of the owner.
                - host : str
                    Domain of the deployment.
                - name : str
                    Name of the deployment.
                - docker_image_name : str
                    The name of the docker image to pull from DockerHub.
                - docker_image_tag : str
                    The tag of the docker image to pull from DockerHub (default:
                    latest).
                - display_url : str
                    A signed URL for viewing the deployed item.
                - instance_type : str
                    The EC2 instance type requested for the deployment.
                - memory : int
                    The memory allocated to the deployment, in MB.
                - cpu : int
                    The cpu allocated to the deployment, in millicores.
                - state : str
                    The state of the deployment.
                - state_message : str
                    A detailed description of the state.
                - max_memory_usage : float (float)
                    If the deployment has finished, the maximum amount of memory used
                    during the deployment, in MB.
                - max_cpu_usage : float (float)
                    If the deployment has finished, the maximum amount of cpu used
                    during the deployment, in millicores.
                - created_at : str (time)
                - updated_at : str (time)
                - notebook_id : int
                    The ID of owning Notebook
            - credentials : list[int]
                A list of credential IDs to pass to the notebook.
            - environment_variables : dict
                Environment variables to be passed into the Notebook.
            - idle_timeout : int
                How long the notebook will stay alive without any kernel activity.
            - partition_label : str
                The partition label used to run this object.
            - git_repo_id : int
                The ID of the git repository.
            - git_repo_url : str
                The url of the git repository
            - git_ref : str
                The git reference if git repo is specified
            - git_path : str
                The path to the .ipynb file in the git repo that will be started up on
                notebook launch
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def list_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def put_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this notebook.
            - name : str
                The name of this notebook.
            - language : str
                The kernel language of this notebook.
            - description : str
                The description of this notebook.
            - notebook_url : str
                Time-limited URL to get the .ipynb file for this notebook.
            - notebook_preview_url : str
                Time-limited URL to get the .htm preview file for this notebook.
            - requirements_url : str
                Time-limited URL to get the requirements.txt file for this notebook.
            - file_id : str
                The file ID for the S3 file containing the .ipynb file.
            - requirements_file_id : str
                The file ID for the S3 file containing the requirements.txt file.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - instance_type : str
                The EC2 instance type to deploy to.
            - memory : int
                The amount of memory allocated to the notebook.
            - cpu : int
                The amount of cpu allocated to the the notebook.
            - created_at : str (time)
            - updated_at : str (time)
            - most_recent_deployment : dict
                - deployment_id : int
                    The ID for this deployment.
                - user_id : int
                    The ID of the owner.
                - host : str
                    Domain of the deployment.
                - name : str
                    Name of the deployment.
                - docker_image_name : str
                    The name of the docker image to pull from DockerHub.
                - docker_image_tag : str
                    The tag of the docker image to pull from DockerHub (default:
                    latest).
                - display_url : str
                    A signed URL for viewing the deployed item.
                - instance_type : str
                    The EC2 instance type requested for the deployment.
                - memory : int
                    The memory allocated to the deployment, in MB.
                - cpu : int
                    The cpu allocated to the deployment, in millicores.
                - state : str
                    The state of the deployment.
                - state_message : str
                    A detailed description of the state.
                - max_memory_usage : float (float)
                    If the deployment has finished, the maximum amount of memory used
                    during the deployment, in MB.
                - max_cpu_usage : float (float)
                    If the deployment has finished, the maximum amount of cpu used
                    during the deployment, in millicores.
                - created_at : str (time)
                - updated_at : str (time)
                - notebook_id : int
                    The ID of owning Notebook
            - credentials : list[int]
                A list of credential IDs to pass to the notebook.
            - environment_variables : dict
                Environment variables to be passed into the Notebook.
            - idle_timeout : int
                How long the notebook will stay alive without any kernel activity.
            - partition_label : str
                The partition label used to run this object.
            - git_repo_id : int
                The ID of the git repository.
            - git_repo_url : str
                The url of the git repository
            - git_ref : str
                The git reference if git repo is specified
            - git_path : str
                The path to the .ipynb file in the git repo that will be started up on
                notebook launch
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def list_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a Notebook belongs to

        Parameters
        ----------
        id : int
            The ID of the Notebook.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a Notebook to a project

        Parameters
        ----------
        id : int
            The ID of the Notebook.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a Notebook from a project

        Parameters
        ----------
        id : int
            The ID of the Notebook.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_deployments(
        self,
        notebook_id: int,
        deployment_id: int | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List deployments for a Notebook

        Parameters
        ----------
        notebook_id : int
            The ID of the owning Notebook
        deployment_id : int, optional
            The ID for this deployment
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to created_at. Must be
            one of: created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - deployment_id : int
                The ID for this deployment.
            - user_id : int
                The ID of the owner.
            - host : str
                Domain of the deployment.
            - name : str
                Name of the deployment.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - instance_type : str
                The EC2 instance type requested for the deployment.
            - memory : int
                The memory allocated to the deployment, in MB.
            - cpu : int
                The cpu allocated to the deployment, in millicores.
            - state : str
                The state of the deployment.
            - state_message : str
                A detailed description of the state.
            - max_memory_usage : float (float)
                If the deployment has finished, the maximum amount of memory used
                during the deployment, in MB.
            - max_cpu_usage : float (float)
                If the deployment has finished, the maximum amount of cpu used during
                the deployment, in millicores.
            - created_at : str (time)
            - updated_at : str (time)
            - notebook_id : int
                The ID of owning Notebook
        """
        ...

    def post_deployments(
        self,
        notebook_id: int,
        deployment_id: int | None = ...,
    ) -> Response:
        """Deploy a Notebook

        Parameters
        ----------
        notebook_id : int
            The ID of the owning Notebook
        deployment_id : int, optional
            The ID for this deployment

        Returns
        -------
        :class:`civis.response.Response`
            - deployment_id : int
                The ID for this deployment.
            - user_id : int
                The ID of the owner.
            - host : str
                Domain of the deployment.
            - name : str
                Name of the deployment.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - display_url : str
                A signed URL for viewing the deployed item.
            - instance_type : str
                The EC2 instance type requested for the deployment.
            - memory : int
                The memory allocated to the deployment, in MB.
            - cpu : int
                The cpu allocated to the deployment, in millicores.
            - state : str
                The state of the deployment.
            - state_message : str
                A detailed description of the state.
            - max_memory_usage : float (float)
                If the deployment has finished, the maximum amount of memory used
                during the deployment, in MB.
            - max_cpu_usage : float (float)
                If the deployment has finished, the maximum amount of cpu used during
                the deployment, in millicores.
            - created_at : str (time)
            - updated_at : str (time)
            - notebook_id : int
                The ID of owning Notebook
        """
        ...

    def get_deployments(
        self,
        notebook_id: int,
        deployment_id: int,
    ) -> Response:
        """Get details about a Notebook deployment

        Parameters
        ----------
        notebook_id : int
            The ID of the owning Notebook
        deployment_id : int
            The ID for this deployment

        Returns
        -------
        :class:`civis.response.Response`
            - deployment_id : int
                The ID for this deployment.
            - user_id : int
                The ID of the owner.
            - host : str
                Domain of the deployment.
            - name : str
                Name of the deployment.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - display_url : str
                A signed URL for viewing the deployed item.
            - instance_type : str
                The EC2 instance type requested for the deployment.
            - memory : int
                The memory allocated to the deployment, in MB.
            - cpu : int
                The cpu allocated to the deployment, in millicores.
            - state : str
                The state of the deployment.
            - state_message : str
                A detailed description of the state.
            - max_memory_usage : float (float)
                If the deployment has finished, the maximum amount of memory used
                during the deployment, in MB.
            - max_cpu_usage : float (float)
                If the deployment has finished, the maximum amount of cpu used during
                the deployment, in millicores.
            - created_at : str (time)
            - updated_at : str (time)
            - notebook_id : int
                The ID of owning Notebook
        """
        ...

    def delete_deployments(
        self,
        notebook_id: int,
        deployment_id: int,
    ) -> Response:
        """Delete a Notebook deployment

        Parameters
        ----------
        notebook_id : int
            The ID of the owning Notebook
        deployment_id : int
            The ID for this deployment

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_deployments_logs(
        self,
        id: int,
        deployment_id: int,
        start_at: str | None = ...,
        end_at: str | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a Notebook deployment

        Parameters
        ----------
        id : int
            The ID of the owning Notebook.
        deployment_id : int
            The ID for this deployment.
        start_at : str, optional
            Log entries with a lower timestamp will be omitted.
        end_at : str, optional
            Log entries with a higher timestamp will be omitted.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - message : str
                The log message.
            - stream : str
                The stream of the log. One of "stdout", "stderr".
            - created_at : str (date-time)
                The time the log was created.
            - source : str
                The source of the log. One of "system", "user".
        """
        ...

    def list_git(
        self,
        id: int,
    ) -> Response:
        """Get the git metadata attached to an item

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def put_git(
        self,
        id: int,
        git_ref: str | None = ...,
        git_branch: str | None = ...,
        git_path: str | None = ...,
        git_repo_url: str | None = ...,
        git_ref_type: str | None = ...,
        pull_from_git: bool | None = ...,
    ) -> Response:
        """Attach an item to a file in a git repo

        Parameters
        ----------
        id : int
            The ID of the file.
        git_ref : str, optional
            A git reference specifying an unambiguous version of the file. Can be a
            branch name, or the full or shortened SHA of a commit.
        git_branch : str, optional
            The git branch that the file is on.
        git_path : str, optional
            The path of the file in the repository.
        git_repo_url : str, optional
            The URL of the git repository.
        git_ref_type : str, optional
            Specifies if the file is versioned by branch or tag.
        pull_from_git : bool, optional
            Automatically pull latest commit from git. Only works for scripts.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def patch_git(
        self,
        id: int,
        git_ref: str | None = ...,
        git_branch: str | None = ...,
        git_path: str | None = ...,
        git_repo_url: str | None = ...,
        git_ref_type: str | None = ...,
        pull_from_git: bool | None = ...,
    ) -> Response:
        """Update an attached git file

        Parameters
        ----------
        id : int
            The ID of the file.
        git_ref : str, optional
            A git reference specifying an unambiguous version of the file. Can be a
            branch name, or the full or shortened SHA of a commit.
        git_branch : str, optional
            The git branch that the file is on.
        git_path : str, optional
            The path of the file in the repository.
        git_repo_url : str, optional
            The URL of the git repository.
        git_ref_type : str, optional
            Specifies if the file is versioned by branch or tag.
        pull_from_git : bool, optional
            Automatically pull latest commit from git. Only works for scripts.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def list_git_commits(
        self,
        id: int,
    ) -> Response:
        """Get the git commits for an item on the current branch

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - commit_hash : str
                The SHA of the commit.
            - author_name : str
                The name of the commit's author.
            - date : str (time)
                The commit's timestamp.
            - message : str
                The commit message.
        """
        ...

    def post_git_commits(
        self,
        id: int,
        content: str,
        message: str,
        file_hash: str,
    ) -> Response:
        """Commit and push a new version of the file

        Parameters
        ----------
        id : int
            The ID of the file.
        content : str
            The contents to commit to the file.
        message : str
            A commit message describing the changes being made.
        file_hash : str
            The full SHA of the file being replaced.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def get_git_commits(
        self,
        id: int,
        commit_hash: str,
    ) -> Response:
        """Get file contents at git ref

        Parameters
        ----------
        id : int
            The ID of the file.
        commit_hash : str
            The SHA (full or shortened) of the desired git commit.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def post_git_checkout_latest(
        self,
        id: int,
    ) -> Response:
        """Checkout latest commit on the current branch of a script or workflow

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def post_git_checkout(
        self,
        id: int,
    ) -> Response:
        """Checkout content that the existing git_ref points to and save to the object

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

class _Notifications:
    def list(
        self,
        last_event_id: str | None = ...,
        r: str | None = ...,
        mock: str | None = ...,
    ) -> Response:
        """Receive a stream of notifications as they come in

        Parameters
        ----------
        last_event_id : str, optional
            allows browser to keep track of last event fired
        r : str, optional
            specifies retry/reconnect timeout
        mock : str, optional
            used for testing

        Returns
        -------
        None
            Response code 200: success
        """
        ...

class _Ontology:
    def list(
        self,
        subset: str | None = ...,
    ) -> Response:
        """List the ontology of column names Civis uses

        Parameters
        ----------
        subset : str, optional
            A subset of fields to return.

        Returns
        -------
        :class:`civis.response.Response`
            - key : str
            - title : str
            - desc : str
                A description of this field.
            - aliases : list[str]
        """
        ...

class _Permission_Sets:
    def list(
        self,
        archived: str | None = ...,
        author: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Permission Sets

        Parameters
        ----------
        archived : str, optional
            The archival status of the requested item(s).
        author : str, optional
            If specified, return items from any of these authors. It accepts a comma-
            separated list of user IDs.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to updated_at. Must be
            one of: updated_at, name, created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID for this permission set.
            - name : str
                The name of this permission set.
            - description : str
                A description of this permission set.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def post(
        self,
        name: str,
        description: str | None = ...,
    ) -> Response:
        """Create a Permission Set

        Parameters
        ----------
        name : str
            The name of this permission set.
        description : str, optional
            A description of this permission set.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this permission set.
            - name : str
                The name of this permission set.
            - description : str
                A description of this permission set.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Get a Permission Set

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this permission set.
            - name : str
                The name of this permission set.
            - description : str
                A description of this permission set.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put(
        self,
        id: int,
        name: str,
        description: str | None = ...,
    ) -> Response:
        """Replace all attributes of this Permission Set

        Parameters
        ----------
        id : int
            The ID for this permission set.
        name : str
            The name of this permission set.
        description : str, optional
            A description of this permission set.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this permission set.
            - name : str
                The name of this permission set.
            - description : str
                A description of this permission set.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def patch(
        self,
        id: int,
        name: str | None = ...,
        description: str | None = ...,
    ) -> Response:
        """Update some attributes of this Permission Set

        Parameters
        ----------
        id : int
            The ID for this permission set.
        name : str, optional
            The name of this permission set.
        description : str, optional
            A description of this permission set.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this permission set.
            - name : str
                The name of this permission set.
            - description : str
                A description of this permission set.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def list_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def put_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this permission set.
            - name : str
                The name of this permission set.
            - description : str
                A description of this permission set.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def list_users_permissions(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Get all permissions for a user, in this permission set

        Parameters
        ----------
        id : int
            The ID for this permission set.
        user_id : int
            The ID for the user.

        Returns
        -------
        :class:`civis.response.Response`
            - resource_name : str
                The name of the resource.
            - read : bool
                If true, the user has read permission on this resource.
            - write : bool
                If true, the user has write permission on this resource.
            - manage : bool
                If true, the user has manage permission on this resource.
        """
        ...

    def list_resources(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List resources in a permission set

        Parameters
        ----------
        id : int
            The ID for this permission set.
        limit : int, optional
            Number of results to return. Defaults to 50. Maximum allowed is 1000.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to name. Must be one
            of: name, id, updated_at, created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to asc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - permission_set_id : int
                The ID for the permission set this resource belongs to.
            - name : str
                The name of this resource.
            - description : str
                A description of this resource.
            - created_at : str (time)
            - updated_at : str (time)
        """
        ...

    def post_resources(
        self,
        id: int,
        name: str,
        description: str | None = ...,
    ) -> Response:
        """Create a resource in a permission set

        Parameters
        ----------
        id : int
            The ID for this permission set.
        name : str
            The name of this resource.
        description : str, optional
            A description of this resource.

        Returns
        -------
        :class:`civis.response.Response`
            - permission_set_id : int
                The ID for the permission set this resource belongs to.
            - name : str
                The name of this resource.
            - description : str
                A description of this resource.
            - created_at : str (time)
            - updated_at : str (time)
        """
        ...

    def get_resources(
        self,
        id: int,
        name: str,
    ) -> Response:
        """Get a resource in a permission set

        Parameters
        ----------
        id : int
            The ID for this permission set.
        name : str
            The name of this resource.

        Returns
        -------
        :class:`civis.response.Response`
            - permission_set_id : int
                The ID for the permission set this resource belongs to.
            - name : str
                The name of this resource.
            - description : str
                A description of this resource.
            - created_at : str (time)
            - updated_at : str (time)
        """
        ...

    def patch_resources(
        self,
        id: int,
        name: str,
        description: str | None = ...,
    ) -> Response:
        """Update a resource in a permission set

        Parameters
        ----------
        id : int
            The ID for this permission set.
        name : str
            The name of this resource.
        description : str, optional
            A description of this resource.

        Returns
        -------
        :class:`civis.response.Response`
            - permission_set_id : int
                The ID for the permission set this resource belongs to.
            - name : str
                The name of this resource.
            - description : str
                A description of this resource.
            - created_at : str (time)
            - updated_at : str (time)
        """
        ...

    def delete_resources(
        self,
        id: int,
        name: str,
    ) -> Response:
        """Delete a resource in a permission set

        Parameters
        ----------
        id : int
            The ID for this permission set.
        name : str
            The name of this resource.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_resources_shares(
        self,
        id: int,
        name: str,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID for this permission set.
        name : str
            The name of this resource.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_resources_shares_users(
        self,
        id: int,
        name: str,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID for this permission set.
        name : str
            The name of this resource.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_resources_shares_users(
        self,
        id: int,
        name: str,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID for this permission set.
        name : str
            The name of this resource.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_resources_shares_groups(
        self,
        id: int,
        name: str,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID for this permission set.
        name : str
            The name of this resource.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_resources_shares_groups(
        self,
        id: int,
        name: str,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID for this permission set.
        name : str
            The name of this resource.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

class _Predictions:
    def list(
        self,
        model_id: int | None = ...,
    ) -> Response:
        """List predictions

        Parameters
        ----------
        model_id : int, optional
            If specified, only return predictions associated with this model ID.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the prediction.
            - model_id : int
                The ID of the model used for this prediction.
            - scored_table_id : int
                The ID of the source table for this prediction.
            - scored_table_name : str
                The name of the source table for this prediction.
            - output_table_name : str
                The name of the output table for this prediction.
            - state : str
                The state of the last run of this prediction.
            - error : str
                The error, if any, of the last run of this prediction.
            - started_at : str (date-time)
                The start time of the last run of this prediction.
            - finished_at : str (date-time)
                The end time of the last run of this prediction.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Show the specified prediction

        Parameters
        ----------
        id : int
            The ID of the prediction.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the prediction.
            - model_id : int
                The ID of the model used for this prediction.
            - scored_table_id : int
                The ID of the source table for this prediction.
            - scored_table_name : str
                The name of the source table for this prediction.
            - output_table_name : str
                The name of the output table for this prediction.
            - state : str
                The state of the last run of this prediction.
            - error : str
                The error, if any, of the last run of this prediction.
            - started_at : str (date-time)
                The start time of the last run of this prediction.
            - finished_at : str (date-time)
                The end time of the last run of this prediction.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - scored_tables : list[dict]
                An array of created prediction tables.

                - id : int
                    The ID of the table with created predictions.
                - schema : str
                    The schema of table with created predictions.
                - name : str
                    The name of table with created predictions.
                - created_at : str (date-time)
                    The time when the table with created predictions was created.
                - score_stats : list[dict]
                    An array of metrics on the created predictions.

                    - score_name : str
                        The name of the score.
                    - histogram : list[int]
                        The histogram of the distribution of scores.
                    - avg_score : float (float)
                        The average score.
                    - min_score : float (float)
                        The minimum score.
                    - max_score : float (float)
                        The maximum score.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - limiting_sql : str
                A SQL WHERE clause used to scope the rows to be predicted.
            - primary_key : list[str]
                The primary key or composite keys of the table being predicted.
        """
        ...

    def list_schedules(
        self,
        id: int,
    ) -> Response:
        """Show the prediction schedule

        Parameters
        ----------
        id : int
            ID of the prediction associated with this schedule.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                ID of the prediction associated with this schedule.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - score_on_model_build : bool
                Whether the prediction will run after a rebuild of the associated
                model.
        """
        ...

class _Projects:
    def list(
        self,
        permission: str | None = ...,
        auto_share: bool | None = ...,
        author: str | None = ...,
        hidden: bool | None = ...,
        archived: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List projects

        Parameters
        ----------
        permission : str, optional
            A permissions string, one of "read", "write", or "manage". Lists only
            projects for which the current user has that permission.
        auto_share : bool, optional
            Used to filter projects based on whether the project is autoshare enabled
            or not.
        author : str, optional
            If specified, return items from any of these authors. It accepts a comma-
            separated list of user IDs.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.
        archived : str, optional
            The archival status of the requested item(s).
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 1000.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to updated_at. Must be
            one of: updated_at, name, created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def post(
        self,
        name: str,
        description: str,
        note: str | None = ...,
        auto_share: bool | None = ...,
        hidden: bool | None = ...,
    ) -> Response:
        """Create a project

        Parameters
        ----------
        name : str
            The name of this project.
        description : str
            A description of the project.
        note : str, optional
            Notes for the project.
        auto_share : bool, optional
            If true, objects within the project will be automatically shared when the
            project is shared or objects are added.
        hidden : bool, optional
            The hidden status of the item.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - tables : list[dict]
                - schema : str
                - name : str
                - row_count : int
                - column_count : int
                - created_at : str (time)
                - updated_at : str (time)
            - surveys : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
            - scripts : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - type : str
                - finished_at : str (time)
                - state : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - imports : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - type : str
                - finished_at : str (time)
                - state : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - exports : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - type : str
                - finished_at : str (time)
                - state : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - models : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - state : str
            - notebooks : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - current_deployment_id : int
                - last_deploy : dict
                    - state : str
                    - updated_at : str (time)
            - services : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - current_deployment_id : int
                - last_deploy : dict
                    - state : str
                    - updated_at : str (time)
            - workflows : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - state : str
                - last_execution : dict
                    - state : str
                    - updated_at : str (time)
            - reports : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - state : str
            - script_templates : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
            - files : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - file_name : str
                - file_size : int
                - expired : bool
            - enhancements : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - projects : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - description : str
            - all_objects : list[dict]
                - project_id : int
                - object_id : int
                - object_type : str
                - fco_type : str
                - sub_type : str
                - name : str
                - icon : str
                - author : str
                - updated_at : str (time)
                - auto_share : bool
                - archived : str
                    The archival status of the requested item(s).
                - hidden : bool
                    The hidden status of the item.
                - my_permission_level : str
                    Your permission level on the object. One of "read", "write", or
                    "manage".
            - note : str
            - can_current_user_enable_auto_share : bool
                A flag for if the current user can enable auto-sharing mode for this
                project.
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - parent_project : dict
                - id : int
                    The parent project's ID.
                - name : int
                    The parent project's name.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def post_clone(
        self,
        id: int,
        clone_schedule: bool | None = ...,
        clone_notifications: bool | None = ...,
    ) -> Response:
        """Clone this

        Parameters
        ----------
        id : int
            The ID for this project.
        clone_schedule : bool, optional
            If true, also copy the schedule for all applicable project objects.
        clone_notifications : bool, optional
            If true, also copy the notifications for all applicable project objects.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - tables : list[dict]
                - schema : str
                - name : str
                - row_count : int
                - column_count : int
                - created_at : str (time)
                - updated_at : str (time)
            - surveys : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
            - scripts : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - type : str
                - finished_at : str (time)
                - state : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - imports : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - type : str
                - finished_at : str (time)
                - state : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - exports : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - type : str
                - finished_at : str (time)
                - state : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - models : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - state : str
            - notebooks : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - current_deployment_id : int
                - last_deploy : dict
                    - state : str
                    - updated_at : str (time)
            - services : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - current_deployment_id : int
                - last_deploy : dict
                    - state : str
                    - updated_at : str (time)
            - workflows : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - state : str
                - last_execution : dict
                    - state : str
                    - updated_at : str (time)
            - reports : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - state : str
            - script_templates : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
            - files : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - file_name : str
                - file_size : int
                - expired : bool
            - enhancements : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - projects : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - description : str
            - all_objects : list[dict]
                - project_id : int
                - object_id : int
                - object_type : str
                - fco_type : str
                - sub_type : str
                - name : str
                - icon : str
                - author : str
                - updated_at : str (time)
                - auto_share : bool
                - archived : str
                    The archival status of the requested item(s).
                - hidden : bool
                    The hidden status of the item.
                - my_permission_level : str
                    Your permission level on the object. One of "read", "write", or
                    "manage".
            - note : str
            - can_current_user_enable_auto_share : bool
                A flag for if the current user can enable auto-sharing mode for this
                project.
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - parent_project : dict
                - id : int
                    The parent project's ID.
                - name : int
                    The parent project's name.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def get(
        self,
        project_id: int,
    ) -> Response:
        """Get a detailed view of a project and the objects in it

        Parameters
        ----------
        project_id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - tables : list[dict]
                - schema : str
                - name : str
                - row_count : int
                - column_count : int
                - created_at : str (time)
                - updated_at : str (time)
            - surveys : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
            - scripts : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - type : str
                - finished_at : str (time)
                - state : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - imports : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - type : str
                - finished_at : str (time)
                - state : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - exports : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - type : str
                - finished_at : str (time)
                - state : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - models : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - state : str
            - notebooks : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - current_deployment_id : int
                - last_deploy : dict
                    - state : str
                    - updated_at : str (time)
            - services : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - current_deployment_id : int
                - last_deploy : dict
                    - state : str
                    - updated_at : str (time)
            - workflows : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - state : str
                - last_execution : dict
                    - state : str
                    - updated_at : str (time)
            - reports : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - state : str
            - script_templates : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
            - files : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - file_name : str
                - file_size : int
                - expired : bool
            - enhancements : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - projects : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - description : str
            - all_objects : list[dict]
                - project_id : int
                - object_id : int
                - object_type : str
                - fco_type : str
                - sub_type : str
                - name : str
                - icon : str
                - author : str
                - updated_at : str (time)
                - auto_share : bool
                - archived : str
                    The archival status of the requested item(s).
                - hidden : bool
                    The hidden status of the item.
                - my_permission_level : str
                    Your permission level on the object. One of "read", "write", or
                    "manage".
            - note : str
            - can_current_user_enable_auto_share : bool
                A flag for if the current user can enable auto-sharing mode for this
                project.
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - parent_project : dict
                - id : int
                    The parent project's ID.
                - name : int
                    The parent project's name.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def put(
        self,
        project_id: int,
        name: str | None = ...,
        description: str | None = ...,
        note: str | None = ...,
    ) -> Response:
        """Update a project

        Parameters
        ----------
        project_id : int
        name : str, optional
            The name of this project.
        description : str, optional
            A description of the project.
        note : str, optional
            Notes for the project.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - tables : list[dict]
                - schema : str
                - name : str
                - row_count : int
                - column_count : int
                - created_at : str (time)
                - updated_at : str (time)
            - surveys : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
            - scripts : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - type : str
                - finished_at : str (time)
                - state : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - imports : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - type : str
                - finished_at : str (time)
                - state : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - exports : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - type : str
                - finished_at : str (time)
                - state : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - models : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - state : str
            - notebooks : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - current_deployment_id : int
                - last_deploy : dict
                    - state : str
                    - updated_at : str (time)
            - services : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - current_deployment_id : int
                - last_deploy : dict
                    - state : str
                    - updated_at : str (time)
            - workflows : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - state : str
                - last_execution : dict
                    - state : str
                    - updated_at : str (time)
            - reports : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - state : str
            - script_templates : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
            - files : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - file_name : str
                - file_size : int
                - expired : bool
            - enhancements : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - projects : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - description : str
            - all_objects : list[dict]
                - project_id : int
                - object_id : int
                - object_type : str
                - fco_type : str
                - sub_type : str
                - name : str
                - icon : str
                - author : str
                - updated_at : str (time)
                - auto_share : bool
                - archived : str
                    The archival status of the requested item(s).
                - hidden : bool
                    The hidden status of the item.
                - my_permission_level : str
                    Your permission level on the object. One of "read", "write", or
                    "manage".
            - note : str
            - can_current_user_enable_auto_share : bool
                A flag for if the current user can enable auto-sharing mode for this
                project.
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - parent_project : dict
                - id : int
                    The parent project's ID.
                - name : int
                    The parent project's name.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def put_auto_share(
        self,
        project_id: int,
        auto_share: bool,
    ) -> Response:
        """Enable or disable Auto-Share on a project

        Parameters
        ----------
        project_id : int
        auto_share : bool
            A toggle for sharing the objects within the project when the project is
            shared or objects are added.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - tables : list[dict]
                - schema : str
                - name : str
                - row_count : int
                - column_count : int
                - created_at : str (time)
                - updated_at : str (time)
            - surveys : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
            - scripts : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - type : str
                - finished_at : str (time)
                - state : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - imports : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - type : str
                - finished_at : str (time)
                - state : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - exports : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - type : str
                - finished_at : str (time)
                - state : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - models : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - state : str
            - notebooks : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - current_deployment_id : int
                - last_deploy : dict
                    - state : str
                    - updated_at : str (time)
            - services : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - current_deployment_id : int
                - last_deploy : dict
                    - state : str
                    - updated_at : str (time)
            - workflows : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - state : str
                - last_execution : dict
                    - state : str
                    - updated_at : str (time)
            - reports : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - state : str
            - script_templates : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
            - files : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - file_name : str
                - file_size : int
                - expired : bool
            - enhancements : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - projects : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - description : str
            - all_objects : list[dict]
                - project_id : int
                - object_id : int
                - object_type : str
                - fco_type : str
                - sub_type : str
                - name : str
                - icon : str
                - author : str
                - updated_at : str (time)
                - auto_share : bool
                - archived : str
                    The archival status of the requested item(s).
                - hidden : bool
                    The hidden status of the item.
                - my_permission_level : str
                    Your permission level on the object. One of "read", "write", or
                    "manage".
            - note : str
            - can_current_user_enable_auto_share : bool
                A flag for if the current user can enable auto-sharing mode for this
                project.
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - parent_project : dict
                - id : int
                    The parent project's ID.
                - name : int
                    The parent project's name.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def list_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def put_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - tables : list[dict]
                - schema : str
                - name : str
                - row_count : int
                - column_count : int
                - created_at : str (time)
                - updated_at : str (time)
            - surveys : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
            - scripts : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - type : str
                - finished_at : str (time)
                - state : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - imports : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - type : str
                - finished_at : str (time)
                - state : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - exports : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - type : str
                - finished_at : str (time)
                - state : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - models : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - state : str
            - notebooks : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - current_deployment_id : int
                - last_deploy : dict
                    - state : str
                    - updated_at : str (time)
            - services : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - current_deployment_id : int
                - last_deploy : dict
                    - state : str
                    - updated_at : str (time)
            - workflows : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - state : str
                - last_execution : dict
                    - state : str
                    - updated_at : str (time)
            - reports : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - state : str
            - script_templates : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
            - files : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - file_name : str
                - file_size : int
                - expired : bool
            - enhancements : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - last_run : dict
                    - state : str
                    - updated_at : str (time)
            - projects : list[dict]
                - id : int
                    The item's ID.
                - created_at : str (time)
                - updated_at : str (time)
                - name : str
                - description : str
            - all_objects : list[dict]
                - project_id : int
                - object_id : int
                - object_type : str
                - fco_type : str
                - sub_type : str
                - name : str
                - icon : str
                - author : str
                - updated_at : str (time)
                - auto_share : bool
                - archived : str
                    The archival status of the requested item(s).
                - hidden : bool
                    The hidden status of the item.
                - my_permission_level : str
                    Your permission level on the object. One of "read", "write", or
                    "manage".
            - note : str
            - can_current_user_enable_auto_share : bool
                A flag for if the current user can enable auto-sharing mode for this
                project.
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - parent_project : dict
                - id : int
                    The parent project's ID.
                - name : int
                    The parent project's name.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def list_parent_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the Parent Projects an item belongs to

        Parameters
        ----------
        id : int
            The ID of the item.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_parent_projects(
        self,
        id: int,
        parent_project_id: int,
    ) -> Response:
        """Add an item to a Parent Project

        Parameters
        ----------
        id : int
            The ID of the item.
        parent_project_id : int
            The ID of the Parent Project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_parent_projects(
        self,
        id: int,
        parent_project_id: int,
    ) -> Response:
        """Remove an item from a Parent Project

        Parameters
        ----------
        id : int
            The ID of the item.
        parent_project_id : int
            The ID of the Parent Project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

class _Queries:
    def list(
        self,
        query: str | None = ...,
        database_id: int | None = ...,
        credential_id: int | None = ...,
        author_id: int | None = ...,
        created_before: str | None = ...,
        created_after: str | None = ...,
        started_before: str | None = ...,
        started_after: str | None = ...,
        state: list[str] | None = ...,
        exclude_results: bool | None = ...,
        hidden: bool | None = ...,
        archived: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List queries

        Parameters
        ----------
        query : str, optional
            Space delimited query for searching queries by their SQL. Supports wild
            card characters "?" for any single character, and "*" for zero or more
            characters.
        database_id : int, optional
            The database ID.
        credential_id : int, optional
            The credential ID.
        author_id : int, optional
            The author of the query.
        created_before : str, optional
            An upper bound for the creation date of the query.
        created_after : str, optional
            A lower bound for the creation date of the query.
        started_before : str, optional
            An upper bound for the start date of the last run.
        started_after : str, optional
            A lower bound for the start date of the last run.
        state : list[str], optional
            The state of the last run. One or more of queued, running, succeeded,
            failed, and cancelled. Specify multiple values as a comma-separated list
            (e.g., "A,B").
        exclude_results : bool, optional
            If true, does not return cached query results.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.
        archived : str, optional
            The archival status of the requested item(s).
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to created_at. Must be
            one of: created_at, started_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The query ID.
            - database : int
                The database ID.
            - sql : str
                The SQL to execute.
            - credential : int
                The credential ID.
            - result_rows : list[list]
                A preview of rows returned by the query.
            - result_columns : list[str]
                A preview of columns returned by the query.
            - error : str
                The error message for this run, if present.
            - started_at : str (date-time)
                The start time of the last run.
            - finished_at : str (date-time)
                The end time of the last run.
            - state : str
                The state of the last run. One of queued, running, succeeded, failed,
                and cancelled.
            - script_id : int
                The ID of the script associated with this query.
            - exception : str
                Deprecated and not used.
            - created_at : str (time)
            - updated_at : str (time)
            - last_run_id : int
                The ID of the last run.
            - archived : str
                The archival status of the requested item(s).
            - preview_rows : int
                The number of rows to save from the query's result (maximum: 1000).
            - report_id : int
                The ID of the report associated with this query.
        """
        ...

    def post(
        self,
        database: int,
        sql: str,
        preview_rows: int,
        credential: int | None = ...,
        hidden: bool | None = ...,
        interactive: bool | None = ...,
        include_header: bool | None = ...,
        compression: str | None = ...,
        column_delimiter: str | None = ...,
        unquoted: bool | None = ...,
        filename_prefix: str | None = ...,
    ) -> Response:
        """Execute a query

        Parameters
        ----------
        database : int
            The database ID.
        sql : str
            The SQL to execute.
        preview_rows : int
            The number of rows to save from the query's result (maximum: 1000).
        credential : int, optional
            The credential ID.
        hidden : bool, optional
            The hidden status of the item.
        interactive : bool, optional
            Deprecated and not used.
        include_header : bool, optional
            Whether the CSV output should include a header row [default: true].
        compression : str, optional
            The type of compression. One of gzip or zip, or none [default: gzip].
        column_delimiter : str, optional
            The delimiter to use. One of comma or tab, or pipe [default: comma].
        unquoted : bool, optional
            If true, will not quote fields.
        filename_prefix : str, optional
            The output filename prefix.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The query ID.
            - database : int
                The database ID.
            - sql : str
                The SQL to execute.
            - credential : int
                The credential ID.
            - result_rows : list[list]
                A preview of rows returned by the query.
            - result_columns : list[str]
                A preview of columns returned by the query.
            - error : str
                The error message for this run, if present.
            - started_at : str (date-time)
                The start time of the last run.
            - finished_at : str (date-time)
                The end time of the last run.
            - state : str
                The state of the last run. One of queued, running, succeeded, failed,
                and cancelled.
            - script_id : int
                The ID of the script associated with this query.
            - exception : str
                Deprecated and not used.
            - created_at : str (time)
            - updated_at : str (time)
            - last_run_id : int
                The ID of the last run.
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - interactive : bool
                Deprecated and not used.
            - preview_rows : int
                The number of rows to save from the query's result (maximum: 1000).
            - include_header : bool
                Whether the CSV output should include a header row [default: true].
            - compression : str
                The type of compression. One of gzip or zip, or none [default: gzip].
            - column_delimiter : str
                The delimiter to use. One of comma or tab, or pipe [default: comma].
            - unquoted : bool
                If true, will not quote fields.
            - filename_prefix : str
                The output filename prefix.
            - report_id : int
                The ID of the report associated with this query.
        """
        ...

    def post_runs(
        self,
        id: int,
    ) -> Response:
        """Start a run

        Parameters
        ----------
        id : int
            The ID of the Query job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - query_id : int
                The ID of the Query job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def list_runs(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List runs for the given Query job

        Parameters
        ----------
        id : int
            The ID of the Query job.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the run.
            - query_id : int
                The ID of the Query job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def get_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Check status of a run

        Parameters
        ----------
        id : int
            The ID of the Query job.
        run_id : int
            The ID of the run.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - query_id : int
                The ID of the Query job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def delete_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the Query job.
        run_id : int
            The ID of the run.

        Returns
        -------
        None
            Response code 202: success
        """
        ...

    def list_runs_logs(
        self,
        id: int,
        run_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a run

        Parameters
        ----------
        id : int
            The ID of the Query job.
        run_id : int
            The ID of the run.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def put_scripts(
        self,
        id: int,
        script_id: int,
    ) -> Response:
        """Update the query's associated script

        Parameters
        ----------
        id : int
            The query ID.
        script_id : int
            The ID of the script associated with this query.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The query ID.
            - database : int
                The database ID.
            - sql : str
                The SQL to execute.
            - credential : int
                The credential ID.
            - result_rows : list[list]
                A preview of rows returned by the query.
            - result_columns : list[str]
                A preview of columns returned by the query.
            - error : str
                The error message for this run, if present.
            - started_at : str (date-time)
                The start time of the last run.
            - finished_at : str (date-time)
                The end time of the last run.
            - state : str
                The state of the last run. One of queued, running, succeeded, failed,
                and cancelled.
            - script_id : int
                The ID of the script associated with this query.
            - exception : str
                Deprecated and not used.
            - created_at : str (time)
            - updated_at : str (time)
            - last_run_id : int
                The ID of the last run.
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - name : str
                The name of the query.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - report_id : int
                The ID of the report associated with this query.
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Get details about a query

        Parameters
        ----------
        id : int
            The query ID.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The query ID.
            - database : int
                The database ID.
            - sql : str
                The SQL to execute.
            - credential : int
                The credential ID.
            - result_rows : list[list]
                A preview of rows returned by the query.
            - result_columns : list[str]
                A preview of columns returned by the query.
            - error : str
                The error message for this run, if present.
            - started_at : str (date-time)
                The start time of the last run.
            - finished_at : str (date-time)
                The end time of the last run.
            - state : str
                The state of the last run. One of queued, running, succeeded, failed,
                and cancelled.
            - script_id : int
                The ID of the script associated with this query.
            - exception : str
                Deprecated and not used.
            - created_at : str (time)
            - updated_at : str (time)
            - last_run_id : int
                The ID of the last run.
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - name : str
                The name of the query.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - report_id : int
                The ID of the report associated with this query.
        """
        ...

    def delete(
        self,
        id: int,
    ) -> Response:
        """Sets Query Hidden to true

        Parameters
        ----------
        id : int
            The query ID.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The query ID.
            - database : int
                The database ID.
            - sql : str
                The SQL to execute.
            - credential : int
                The credential ID.
            - result_rows : list[list]
                A preview of rows returned by the query.
            - result_columns : list[str]
                A preview of columns returned by the query.
            - error : str
                The error message for this run, if present.
            - started_at : str (date-time)
                The start time of the last run.
            - finished_at : str (date-time)
                The end time of the last run.
            - state : str
                The state of the last run. One of queued, running, succeeded, failed,
                and cancelled.
            - script_id : int
                The ID of the script associated with this query.
            - exception : str
                Deprecated and not used.
            - created_at : str (time)
            - updated_at : str (time)
            - last_run_id : int
                The ID of the last run.
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - name : str
                The name of the query.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - report_id : int
                The ID of the report associated with this query.
        """
        ...

class _Remote_Hosts:
    def list(
        self,
        type: str | None = ...,
    ) -> Response:
        """List Remote Hosts

        Parameters
        ----------
        type : str, optional
            The type of remote host. One of: RemoteHostTypes::Bigquery,
            RemoteHostTypes::Bitbucket, RemoteHostTypes::GitSSH,
            RemoteHostTypes::Github, RemoteHostTypes::GoogleDoc, RemoteHostTypes::JDBC,
            RemoteHostTypes::Postgres, RemoteHostTypes::Redshift,
            RemoteHostTypes::S3Storage, and RemoteHostTypes::Salesforce

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the remote host.
            - name : str
                The human readable name for the remote host.
            - type : str
                The type of remote host. One of: RemoteHostTypes::Bigquery,
                RemoteHostTypes::Bitbucket, RemoteHostTypes::GitSSH,
                RemoteHostTypes::Github, RemoteHostTypes::GoogleDoc,
                RemoteHostTypes::JDBC, RemoteHostTypes::Postgres,
                RemoteHostTypes::Redshift, RemoteHostTypes::S3Storage, and
                RemoteHostTypes::Salesforce
            - url : str
                The URL for the remote host.
        """
        ...

    def post(
        self,
        name: str,
        url: str,
        type: str,
    ) -> Response:
        """Create a Remote Host

        Parameters
        ----------
        name : str
            The human readable name for the remote host.
        url : str
            The URL for the remote host.
        type : str
            The type of remote host. One of: RemoteHostTypes::Bigquery,
            RemoteHostTypes::Bitbucket, RemoteHostTypes::GitSSH,
            RemoteHostTypes::Github, RemoteHostTypes::GoogleDoc, RemoteHostTypes::JDBC,
            RemoteHostTypes::Postgres, RemoteHostTypes::Redshift,
            RemoteHostTypes::S3Storage, and RemoteHostTypes::Salesforce

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the remote host.
            - name : str
                The human readable name for the remote host.
            - type : str
                The type of remote host. One of: RemoteHostTypes::Bigquery,
                RemoteHostTypes::Bitbucket, RemoteHostTypes::GitSSH,
                RemoteHostTypes::Github, RemoteHostTypes::GoogleDoc,
                RemoteHostTypes::JDBC, RemoteHostTypes::Postgres,
                RemoteHostTypes::Redshift, RemoteHostTypes::S3Storage, and
                RemoteHostTypes::Salesforce
            - url : str
                The URL for the remote host.
            - description : str
                The description of the remote host.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (date-time)
            - updated_at : str (date-time)
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Get a Remote Host

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the remote host.
            - name : str
                The human readable name for the remote host.
            - type : str
                The type of remote host. One of: RemoteHostTypes::Bigquery,
                RemoteHostTypes::Bitbucket, RemoteHostTypes::GitSSH,
                RemoteHostTypes::Github, RemoteHostTypes::GoogleDoc,
                RemoteHostTypes::JDBC, RemoteHostTypes::Postgres,
                RemoteHostTypes::Redshift, RemoteHostTypes::S3Storage, and
                RemoteHostTypes::Salesforce
            - url : str
                The URL for the remote host.
            - description : str
                The description of the remote host.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (date-time)
            - updated_at : str (date-time)
        """
        ...

    def put(
        self,
        id: int,
        name: str,
        type: str,
        url: str,
        description: str,
    ) -> Response:
        """Replace all attributes of this Remote Host

        Parameters
        ----------
        id : int
            The ID of the remote host.
        name : str
            The human readable name for the remote host.
        type : str
            The type of remote host. One of: RemoteHostTypes::Bigquery,
            RemoteHostTypes::Bitbucket, RemoteHostTypes::GitSSH,
            RemoteHostTypes::Github, RemoteHostTypes::GoogleDoc, RemoteHostTypes::JDBC,
            RemoteHostTypes::Postgres, RemoteHostTypes::Redshift,
            RemoteHostTypes::S3Storage, and RemoteHostTypes::Salesforce
        url : str
            The URL for the remote host.
        description : str
            The description of the remote host.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the remote host.
            - name : str
                The human readable name for the remote host.
            - type : str
                The type of remote host. One of: RemoteHostTypes::Bigquery,
                RemoteHostTypes::Bitbucket, RemoteHostTypes::GitSSH,
                RemoteHostTypes::Github, RemoteHostTypes::GoogleDoc,
                RemoteHostTypes::JDBC, RemoteHostTypes::Postgres,
                RemoteHostTypes::Redshift, RemoteHostTypes::S3Storage, and
                RemoteHostTypes::Salesforce
            - url : str
                The URL for the remote host.
            - description : str
                The description of the remote host.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (date-time)
            - updated_at : str (date-time)
        """
        ...

    def patch(
        self,
        id: int,
        name: str | None = ...,
        type: str | None = ...,
        url: str | None = ...,
        description: str | None = ...,
    ) -> Response:
        """Update some attributes of this Remote Host

        Parameters
        ----------
        id : int
            The ID of the remote host.
        name : str, optional
            The human readable name for the remote host.
        type : str, optional
            The type of remote host. One of: RemoteHostTypes::Bigquery,
            RemoteHostTypes::Bitbucket, RemoteHostTypes::GitSSH,
            RemoteHostTypes::Github, RemoteHostTypes::GoogleDoc, RemoteHostTypes::JDBC,
            RemoteHostTypes::Postgres, RemoteHostTypes::Redshift,
            RemoteHostTypes::S3Storage, and RemoteHostTypes::Salesforce
        url : str, optional
            The URL for the remote host.
        description : str, optional
            The description of the remote host.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the remote host.
            - name : str
                The human readable name for the remote host.
            - type : str
                The type of remote host. One of: RemoteHostTypes::Bigquery,
                RemoteHostTypes::Bitbucket, RemoteHostTypes::GitSSH,
                RemoteHostTypes::Github, RemoteHostTypes::GoogleDoc,
                RemoteHostTypes::JDBC, RemoteHostTypes::Postgres,
                RemoteHostTypes::Redshift, RemoteHostTypes::S3Storage, and
                RemoteHostTypes::Salesforce
            - url : str
                The URL for the remote host.
            - description : str
                The description of the remote host.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (date-time)
            - updated_at : str (date-time)
        """
        ...

    def list_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def post_authenticate(
        self,
        id: int,
        credential_id: int | None = ...,
        username: str | None = ...,
        password: str | None = ...,
    ) -> Response:
        """Authenticate against a remote host using either a credential or a user name and
        password

        Parameters
        ----------
        id : int
            The ID of the remote host.
        credential_id : int, optional
            The credential ID.
        username : str, optional
            The user name for remote host.
        password : str, optional
            The password for remote host.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_data_sets(
        self,
        id: int,
        credential_id: int | None = ...,
        username: str | None = ...,
        password: str | None = ...,
        q: str | None = ...,
        s: bool | None = ...,
    ) -> Response:
        """List data sets available from a remote host

        Parameters
        ----------
        id : int
            The ID of the remote host.
        credential_id : int, optional
            The credential ID.
        username : str, optional
            The user name for remote host.
        password : str, optional
            The password for remote host.
        q : str, optional
            The query string for data set.
        s : bool, optional
            If true will only return schemas, otherwise, the results will be the full
            path.

        Returns
        -------
        :class:`civis.response.Response`
            - name : str
                The path to a data_set.
            - full_path : bool
                Boolean that indicates whether further querying needs to be done before
                the table can be selected.
        """
        ...

class _Reports:
    def list(
        self,
        type: str | None = ...,
        template_id: int | None = ...,
        author: str | None = ...,
        hidden: bool | None = ...,
        archived: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Reports

        Parameters
        ----------
        type : str, optional
            If specified, return report of these types. It accepts a comma-separated
            list, possible values are 'tableau' or 'other'.
        template_id : int, optional
            If specified, return reports using the provided Template.
        author : str, optional
            If specified, return items from any of these authors. It accepts a comma-
            separated list of user IDs.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.
        archived : str, optional
            The archival status of the requested item(s).
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to updated_at. Must be
            one of: updated_at, name, created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of this report.
            - name : str
                The name of the report.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
                The creation time for this report.
            - updated_at : str (time)
                The last updated at time for this report.
            - type : str
                The type of the report. One of: ReportTypes::HTML,
                ReportTypes::Tableau, ReportTypes::ShinyApp, ReportTypes::SQL
            - archived : str
                The archival status of the requested item(s).
            - projects : list[dict]
                A list of projects containing the report.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - state : str
                The status of the report's last run.
            - finished_at : str (time)
                The time that the report's last run finished.
            - viz_updated_at : str (time)
                The time that the report's visualization was last updated.
            - script : dict
                - id : int
                    The ID for the script.
                - name : str
                    The name of the script.
                - sql : str
                    The raw SQL query for the script.
            - job_path : str
                The link to details of the job that backs this report.
            - tableau_id : int
            - template_id : int
                The ID of the template used for this report.
            - auth_thumbnail_url : str
                URL for a thumbnail of the report.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
        """
        ...

    def post(
        self,
        script_id: int | None = ...,
        name: str | None = ...,
        code_body: str | None = ...,
        app_state: dict | None = ...,
        provide_api_key: bool | None = ...,
        template_id: int | None = ...,
        description: str | None = ...,
        hidden: bool | None = ...,
    ) -> Response:
        """Create an HTML report

        Parameters
        ----------
        script_id : int, optional
            The ID of the job (a script or a query) used to create this report.
        name : str, optional
            The name of the report.
        code_body : str, optional
            The code for the report visualization.
        app_state : dict, optional
            Any application state blob for this report.
        provide_api_key : bool, optional
            Allow the report to provide an API key to front-end code.
        template_id : int, optional
            The ID of the template used for this report.
        description : str, optional
            The user-defined description of the report.
        hidden : bool, optional
            The hidden status of the item.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this report.
            - name : str
                The name of the report.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
                The creation time for this report.
            - updated_at : str (time)
                The last updated at time for this report.
            - type : str
                The type of the report. One of: ReportTypes::HTML,
                ReportTypes::Tableau, ReportTypes::ShinyApp, ReportTypes::SQL
            - description : str
                The user-defined description of the report.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - projects : list[dict]
                A list of projects containing the report.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - state : str
                The status of the report's last run.
            - finished_at : str (time)
                The time that the report's last run finished.
            - viz_updated_at : str (time)
                The time that the report's visualization was last updated.
            - script : dict
                - id : int
                    The ID for the script.
                - name : str
                    The name of the script.
                - sql : str
                    The raw SQL query for the script.
            - job_path : str
                The link to details of the job that backs this report.
            - tableau_id : int
            - template_id : int
                The ID of the template used for this report.
            - auth_thumbnail_url : str
                URL for a thumbnail of the report.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - hidden : bool
                The hidden status of the item.
            - auth_data_url : str
            - auth_code_url : str
            - config : str
                Any configuration metadata for this report.
            - valid_output_file : bool
                Whether the job (a script or a query) that backs the report currently
                has a valid output file.
            - provide_api_key : bool
                Whether the report requests an API Key from the report viewer.
            - api_key : str
                A Civis API key that can be used by this report.
            - api_key_id : int
                The ID of the API key. Can be used for auditing API use by this report.
            - app_state : dict
                Any application state blob for this report.
            - use_viewers_tableau_username : bool
                Apply user level filtering on Tableau reports.
        """
        ...

    def list_git(
        self,
        id: int,
    ) -> Response:
        """Get the git metadata attached to an item

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def put_git(
        self,
        id: int,
        git_ref: str | None = ...,
        git_branch: str | None = ...,
        git_path: str | None = ...,
        git_repo_url: str | None = ...,
        git_ref_type: str | None = ...,
        pull_from_git: bool | None = ...,
    ) -> Response:
        """Attach an item to a file in a git repo

        Parameters
        ----------
        id : int
            The ID of the file.
        git_ref : str, optional
            A git reference specifying an unambiguous version of the file. Can be a
            branch name, or the full or shortened SHA of a commit.
        git_branch : str, optional
            The git branch that the file is on.
        git_path : str, optional
            The path of the file in the repository.
        git_repo_url : str, optional
            The URL of the git repository.
        git_ref_type : str, optional
            Specifies if the file is versioned by branch or tag.
        pull_from_git : bool, optional
            Automatically pull latest commit from git. Only works for scripts.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def patch_git(
        self,
        id: int,
        git_ref: str | None = ...,
        git_branch: str | None = ...,
        git_path: str | None = ...,
        git_repo_url: str | None = ...,
        git_ref_type: str | None = ...,
        pull_from_git: bool | None = ...,
    ) -> Response:
        """Update an attached git file

        Parameters
        ----------
        id : int
            The ID of the file.
        git_ref : str, optional
            A git reference specifying an unambiguous version of the file. Can be a
            branch name, or the full or shortened SHA of a commit.
        git_branch : str, optional
            The git branch that the file is on.
        git_path : str, optional
            The path of the file in the repository.
        git_repo_url : str, optional
            The URL of the git repository.
        git_ref_type : str, optional
            Specifies if the file is versioned by branch or tag.
        pull_from_git : bool, optional
            Automatically pull latest commit from git. Only works for scripts.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def list_git_commits(
        self,
        id: int,
    ) -> Response:
        """Get the git commits for an item on the current branch

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - commit_hash : str
                The SHA of the commit.
            - author_name : str
                The name of the commit's author.
            - date : str (time)
                The commit's timestamp.
            - message : str
                The commit message.
        """
        ...

    def post_git_commits(
        self,
        id: int,
        content: str,
        message: str,
        file_hash: str,
    ) -> Response:
        """Commit and push a new version of the file

        Parameters
        ----------
        id : int
            The ID of the file.
        content : str
            The contents to commit to the file.
        message : str
            A commit message describing the changes being made.
        file_hash : str
            The full SHA of the file being replaced.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def get_git_commits(
        self,
        id: int,
        commit_hash: str,
    ) -> Response:
        """Get file contents at git ref

        Parameters
        ----------
        id : int
            The ID of the file.
        commit_hash : str
            The SHA (full or shortened) of the desired git commit.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def post_git_checkout_latest(
        self,
        id: int,
    ) -> Response:
        """Checkout latest commit on the current branch of a script or workflow

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def post_git_checkout(
        self,
        id: int,
    ) -> Response:
        """Checkout content that the existing git_ref points to and save to the object

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Get a single report

        Parameters
        ----------
        id : int
            The ID of this report.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this report.
            - name : str
                The name of the report.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
                The creation time for this report.
            - updated_at : str (time)
                The last updated at time for this report.
            - type : str
                The type of the report. One of: ReportTypes::HTML,
                ReportTypes::Tableau, ReportTypes::ShinyApp, ReportTypes::SQL
            - description : str
                The user-defined description of the report.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - projects : list[dict]
                A list of projects containing the report.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - state : str
                The status of the report's last run.
            - finished_at : str (time)
                The time that the report's last run finished.
            - viz_updated_at : str (time)
                The time that the report's visualization was last updated.
            - script : dict
                - id : int
                    The ID for the script.
                - name : str
                    The name of the script.
                - sql : str
                    The raw SQL query for the script.
            - job_path : str
                The link to details of the job that backs this report.
            - tableau_id : int
            - template_id : int
                The ID of the template used for this report.
            - auth_thumbnail_url : str
                URL for a thumbnail of the report.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - hidden : bool
                The hidden status of the item.
            - auth_data_url : str
            - auth_code_url : str
            - config : str
                Any configuration metadata for this report.
            - valid_output_file : bool
                Whether the job (a script or a query) that backs the report currently
                has a valid output file.
            - provide_api_key : bool
                Whether the report requests an API Key from the report viewer.
            - api_key : str
                A Civis API key that can be used by this report.
            - api_key_id : int
                The ID of the API key. Can be used for auditing API use by this report.
            - app_state : dict
                Any application state blob for this report.
            - use_viewers_tableau_username : bool
                Apply user level filtering on Tableau reports.
        """
        ...

    def patch(
        self,
        id: int,
        name: str | None = ...,
        script_id: int | None = ...,
        code_body: str | None = ...,
        config: str | None = ...,
        app_state: dict | None = ...,
        provide_api_key: bool | None = ...,
        template_id: int | None = ...,
        use_viewers_tableau_username: bool | None = ...,
        description: str | None = ...,
    ) -> Response:
        """Update a report

        Parameters
        ----------
        id : int
            The ID of the report to modify.
        name : str, optional
            The name of the report.
        script_id : int, optional
            The ID of the job (a script or a query) used to create this report.
        code_body : str, optional
            The code for the report visualization.
        config : str, optional
        app_state : dict, optional
            The application state blob for this report.
        provide_api_key : bool, optional
            Allow the report to provide an API key to front-end code.
        template_id : int, optional
            The ID of the template used for this report. If null is passed, no template
            will back this report. Changes to the backing template will reset the
            report appState.
        use_viewers_tableau_username : bool, optional
            Apply user level filtering on Tableau reports.
        description : str, optional
            The user-defined description of the report.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this report.
            - name : str
                The name of the report.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
                The creation time for this report.
            - updated_at : str (time)
                The last updated at time for this report.
            - type : str
                The type of the report. One of: ReportTypes::HTML,
                ReportTypes::Tableau, ReportTypes::ShinyApp, ReportTypes::SQL
            - description : str
                The user-defined description of the report.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - projects : list[dict]
                A list of projects containing the report.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - state : str
                The status of the report's last run.
            - finished_at : str (time)
                The time that the report's last run finished.
            - viz_updated_at : str (time)
                The time that the report's visualization was last updated.
            - script : dict
                - id : int
                    The ID for the script.
                - name : str
                    The name of the script.
                - sql : str
                    The raw SQL query for the script.
            - job_path : str
                The link to details of the job that backs this report.
            - tableau_id : int
            - template_id : int
                The ID of the template used for this report.
            - auth_thumbnail_url : str
                URL for a thumbnail of the report.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - hidden : bool
                The hidden status of the item.
            - auth_data_url : str
            - auth_code_url : str
            - config : str
                Any configuration metadata for this report.
            - valid_output_file : bool
                Whether the job (a script or a query) that backs the report currently
                has a valid output file.
            - provide_api_key : bool
                Whether the report requests an API Key from the report viewer.
            - api_key : str
                A Civis API key that can be used by this report.
            - api_key_id : int
                The ID of the API key. Can be used for auditing API use by this report.
            - app_state : dict
                Any application state blob for this report.
            - use_viewers_tableau_username : bool
                Apply user level filtering on Tableau reports.
        """
        ...

    def post_grants(
        self,
        id: int,
    ) -> Response:
        """Grant this report the ability to perform Civis platform API operations on your
        behalf

        Parameters
        ----------
        id : int
            The ID of this report.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this report.
            - name : str
                The name of the report.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
                The creation time for this report.
            - updated_at : str (time)
                The last updated at time for this report.
            - type : str
                The type of the report. One of: ReportTypes::HTML,
                ReportTypes::Tableau, ReportTypes::ShinyApp, ReportTypes::SQL
            - description : str
                The user-defined description of the report.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - projects : list[dict]
                A list of projects containing the report.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - state : str
                The status of the report's last run.
            - finished_at : str (time)
                The time that the report's last run finished.
            - viz_updated_at : str (time)
                The time that the report's visualization was last updated.
            - script : dict
                - id : int
                    The ID for the script.
                - name : str
                    The name of the script.
                - sql : str
                    The raw SQL query for the script.
            - job_path : str
                The link to details of the job that backs this report.
            - tableau_id : int
            - template_id : int
                The ID of the template used for this report.
            - auth_thumbnail_url : str
                URL for a thumbnail of the report.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - hidden : bool
                The hidden status of the item.
            - auth_data_url : str
            - auth_code_url : str
            - config : str
                Any configuration metadata for this report.
            - valid_output_file : bool
                Whether the job (a script or a query) that backs the report currently
                has a valid output file.
            - provide_api_key : bool
                Whether the report requests an API Key from the report viewer.
            - api_key : str
                A Civis API key that can be used by this report.
            - api_key_id : int
                The ID of the API key. Can be used for auditing API use by this report.
            - app_state : dict
                Any application state blob for this report.
            - use_viewers_tableau_username : bool
                Apply user level filtering on Tableau reports.
        """
        ...

    def delete_grants(
        self,
        id: int,
    ) -> Response:
        """Revoke permission for this report to perform Civis platform API operations on
        your behalf

        Parameters
        ----------
        id : int
            The ID of this report.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def list_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a Report belongs to

        Parameters
        ----------
        id : int
            The ID of the Report.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a Report to a project

        Parameters
        ----------
        id : int
            The ID of the Report.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a Report from a project

        Parameters
        ----------
        id : int
            The ID of the Report.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this report.
            - name : str
                The name of the report.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
                The creation time for this report.
            - updated_at : str (time)
                The last updated at time for this report.
            - type : str
                The type of the report. One of: ReportTypes::HTML,
                ReportTypes::Tableau, ReportTypes::ShinyApp, ReportTypes::SQL
            - description : str
                The user-defined description of the report.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - projects : list[dict]
                A list of projects containing the report.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - state : str
                The status of the report's last run.
            - finished_at : str (time)
                The time that the report's last run finished.
            - viz_updated_at : str (time)
                The time that the report's visualization was last updated.
            - script : dict
                - id : int
                    The ID for the script.
                - name : str
                    The name of the script.
                - sql : str
                    The raw SQL query for the script.
            - job_path : str
                The link to details of the job that backs this report.
            - tableau_id : int
            - template_id : int
                The ID of the template used for this report.
            - auth_thumbnail_url : str
                URL for a thumbnail of the report.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - hidden : bool
                The hidden status of the item.
            - auth_data_url : str
            - auth_code_url : str
            - config : str
                Any configuration metadata for this report.
            - valid_output_file : bool
                Whether the job (a script or a query) that backs the report currently
                has a valid output file.
            - provide_api_key : bool
                Whether the report requests an API Key from the report viewer.
            - api_key : str
                A Civis API key that can be used by this report.
            - api_key_id : int
                The ID of the API key. Can be used for auditing API use by this report.
            - app_state : dict
                Any application state blob for this report.
            - use_viewers_tableau_username : bool
                Apply user level filtering on Tableau reports.
        """
        ...

    def get_services(
        self,
        id: int,
    ) -> Response:
        """Get a single service report

        Parameters
        ----------
        id : int
            The ID of this report.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this report.
            - name : str
                The name of the report.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
                The creation time for this report.
            - updated_at : str (time)
                The last updated at time for this report.
            - type : str
                The type of the report. One of: ReportTypes::HTML,
                ReportTypes::Tableau, ReportTypes::ShinyApp, ReportTypes::SQL
            - description : str
                The user-defined description of the report.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - host : str
                The host for the service report
            - display_url : str
                The URL to display the service report.
            - service_id : int
                The id of the backing service
            - provide_api_key : bool
                Whether the report requests an API Key from the report viewer.
            - api_key : str
                A Civis API key that can be used by this report.
            - api_key_id : int
                The ID of the API key. Can be used for auditing API use by this report.
        """
        ...

    def patch_services(
        self,
        id: int,
        name: str | None = ...,
        provide_api_key: bool | None = ...,
    ) -> Response:
        """Update some attributes of this service report

        Parameters
        ----------
        id : int
            The ID of this report.
        name : str, optional
            The name of the service report.
        provide_api_key : bool, optional
            Whether the report requests an API Key from the report viewer.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this report.
            - name : str
                The name of the report.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
                The creation time for this report.
            - updated_at : str (time)
                The last updated at time for this report.
            - type : str
                The type of the report. One of: ReportTypes::HTML,
                ReportTypes::Tableau, ReportTypes::ShinyApp, ReportTypes::SQL
            - description : str
                The user-defined description of the report.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - host : str
                The host for the service report
            - display_url : str
                The URL to display the service report.
            - service_id : int
                The id of the backing service
            - provide_api_key : bool
                Whether the report requests an API Key from the report viewer.
            - api_key : str
                A Civis API key that can be used by this report.
            - api_key_id : int
                The ID of the API key. Can be used for auditing API use by this report.
        """
        ...

    def post_services(
        self,
        service_id: int,
        provide_api_key: bool | None = ...,
    ) -> Response:
        """Create a service report

        Parameters
        ----------
        service_id : int
            The id of the backing service
        provide_api_key : bool, optional
            Whether the report requests an API Key from the report viewer.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this report.
            - name : str
                The name of the report.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
                The creation time for this report.
            - updated_at : str (time)
                The last updated at time for this report.
            - type : str
                The type of the report. One of: ReportTypes::HTML,
                ReportTypes::Tableau, ReportTypes::ShinyApp, ReportTypes::SQL
            - description : str
                The user-defined description of the report.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - host : str
                The host for the service report
            - display_url : str
                The URL to display the service report.
            - service_id : int
                The id of the backing service
            - provide_api_key : bool
                Whether the report requests an API Key from the report viewer.
            - api_key : str
                A Civis API key that can be used by this report.
            - api_key_id : int
                The ID of the API key. Can be used for auditing API use by this report.
        """
        ...

    def list_services_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_services_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_services_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_services_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_services_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_services_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_services_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def list_services_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a Service Report belongs to

        Parameters
        ----------
        id : int
            The ID of the Service Report.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_services_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a Service Report to a project

        Parameters
        ----------
        id : int
            The ID of the Service Report.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_services_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a Service Report from a project

        Parameters
        ----------
        id : int
            The ID of the Service Report.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_services_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this report.
            - name : str
                The name of the report.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
                The creation time for this report.
            - updated_at : str (time)
                The last updated at time for this report.
            - type : str
                The type of the report. One of: ReportTypes::HTML,
                ReportTypes::Tableau, ReportTypes::ShinyApp, ReportTypes::SQL
            - description : str
                The user-defined description of the report.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - host : str
                The host for the service report
            - display_url : str
                The URL to display the service report.
            - service_id : int
                The id of the backing service
            - provide_api_key : bool
                Whether the report requests an API Key from the report viewer.
            - api_key : str
                A Civis API key that can be used by this report.
            - api_key_id : int
                The ID of the API key. Can be used for auditing API use by this report.
        """
        ...

    def post_refresh(
        self,
        id: int,
    ) -> Response:
        """Refresh the data in this Tableau report

        Parameters
        ----------
        id : int
            The ID of this report.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this report.
            - organization : dict
                - id : int
                    The ID of this organization.
                - tableau_refresh_usage : int
                    The number of tableau refreshes used this month.
                - tableau_refresh_limit : int
                    The number of monthly tableau refreshes permitted to this
                    organization.
                - tableau_refresh_history : list[dict]
                    The number of tableau refreshes used this month.
        """
        ...

    def post_sql(
        self,
        query_id: int,
        name: str,
        config: str,
        description: str | None = ...,
    ) -> Response:
        """Create a SQL report

        Parameters
        ----------
        query_id : int
            The ID of the query used to create this report.
        name : str
            The name of the report.
        config : str
            The configuration of the report visualization.
        description : str, optional
            The user-defined description of the report.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this report.
            - name : str
                The name of the report.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
                The creation time for this report.
            - updated_at : str (time)
                The last updated at time for this report.
            - type : str
                The type of the report. One of: ReportTypes::HTML,
                ReportTypes::Tableau, ReportTypes::ShinyApp, ReportTypes::SQL
            - description : str
                The user-defined description of the report.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - config : str
                The configuration of the report visualization.
            - query : dict
                - id : int
                    The query ID.
                - database : int
                    The database ID.
                - sql : str
                    The SQL to execute.
                - credential : int
                    The credential ID.
                - result_rows : list[list]
                    A preview of rows returned by the query.
                - result_columns : list[str]
                    A preview of columns returned by the query.
                - error : str
                    The error message for this run, if present.
                - started_at : str (date-time)
                    The start time of the last run.
                - finished_at : str (date-time)
                    The end time of the last run.
                - state : str
                    The state of the last run. One of queued, running, succeeded,
                    failed, and cancelled.
                - running_as : dict
                    - id : int
                        The ID of this user.
                    - name : str
                        This user's name.
                    - username : str
                        This user's username.
                    - initials : str
                        This user's initials.
                    - online : bool
                        Whether this user is online.
        """
        ...

    def get_sql(
        self,
        id: int,
    ) -> Response:
        """Get a single SQL report

        Parameters
        ----------
        id : int
            The ID of this report.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this report.
            - name : str
                The name of the report.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
                The creation time for this report.
            - updated_at : str (time)
                The last updated at time for this report.
            - type : str
                The type of the report. One of: ReportTypes::HTML,
                ReportTypes::Tableau, ReportTypes::ShinyApp, ReportTypes::SQL
            - description : str
                The user-defined description of the report.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - config : str
                The configuration of the report visualization.
            - query : dict
                - id : int
                    The query ID.
                - database : int
                    The database ID.
                - sql : str
                    The SQL to execute.
                - credential : int
                    The credential ID.
                - result_rows : list[list]
                    A preview of rows returned by the query.
                - result_columns : list[str]
                    A preview of columns returned by the query.
                - error : str
                    The error message for this run, if present.
                - started_at : str (date-time)
                    The start time of the last run.
                - finished_at : str (date-time)
                    The end time of the last run.
                - state : str
                    The state of the last run. One of queued, running, succeeded,
                    failed, and cancelled.
                - running_as : dict
                    - id : int
                        The ID of this user.
                    - name : str
                        This user's name.
                    - username : str
                        This user's username.
                    - initials : str
                        This user's initials.
                    - online : bool
                        Whether this user is online.
        """
        ...

    def patch_sql(
        self,
        id: int,
        query_id: int | None = ...,
        name: str | None = ...,
        config: str | None = ...,
        description: str | None = ...,
    ) -> Response:
        """Update a SQL report

        Parameters
        ----------
        id : int
            The ID of this report.
        query_id : int, optional
            The ID of the query used to create this report.
        name : str, optional
            The name of the report.
        config : str, optional
            The configuration of the report visualization.
        description : str, optional
            The user-defined description of the report.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this report.
            - name : str
                The name of the report.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
                The creation time for this report.
            - updated_at : str (time)
                The last updated at time for this report.
            - type : str
                The type of the report. One of: ReportTypes::HTML,
                ReportTypes::Tableau, ReportTypes::ShinyApp, ReportTypes::SQL
            - description : str
                The user-defined description of the report.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - config : str
                The configuration of the report visualization.
            - query : dict
                - id : int
                    The query ID.
                - database : int
                    The database ID.
                - sql : str
                    The SQL to execute.
                - credential : int
                    The credential ID.
                - result_rows : list[list]
                    A preview of rows returned by the query.
                - result_columns : list[str]
                    A preview of columns returned by the query.
                - error : str
                    The error message for this run, if present.
                - started_at : str (date-time)
                    The start time of the last run.
                - finished_at : str (date-time)
                    The end time of the last run.
                - state : str
                    The state of the last run. One of queued, running, succeeded,
                    failed, and cancelled.
                - running_as : dict
                    - id : int
                        The ID of this user.
                    - name : str
                        This user's name.
                    - username : str
                        This user's username.
                    - initials : str
                        This user's initials.
                    - online : bool
                        Whether this user is online.
        """
        ...

    def post_sql_refresh(
        self,
        id: int,
    ) -> Response:
        """Refresh the data in a SQL report

        Parameters
        ----------
        id : int
            The ID of this report.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this report.
            - name : str
                The name of the report.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
                The creation time for this report.
            - updated_at : str (time)
                The last updated at time for this report.
            - type : str
                The type of the report. One of: ReportTypes::HTML,
                ReportTypes::Tableau, ReportTypes::ShinyApp, ReportTypes::SQL
            - description : str
                The user-defined description of the report.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - config : str
                The configuration of the report visualization.
            - query : dict
                - id : int
                    The query ID.
                - database : int
                    The database ID.
                - sql : str
                    The SQL to execute.
                - credential : int
                    The credential ID.
                - result_rows : list[list]
                    A preview of rows returned by the query.
                - result_columns : list[str]
                    A preview of columns returned by the query.
                - error : str
                    The error message for this run, if present.
                - started_at : str (date-time)
                    The start time of the last run.
                - finished_at : str (date-time)
                    The end time of the last run.
                - state : str
                    The state of the last run. One of queued, running, succeeded,
                    failed, and cancelled.
                - running_as : dict
                    - id : int
                        The ID of this user.
                    - name : str
                        This user's name.
                    - username : str
                        This user's username.
                    - initials : str
                        This user's initials.
                    - online : bool
                        Whether this user is online.
        """
        ...

    def list_sql_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_sql_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_sql_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_sql_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_sql_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_sql_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_sql_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def list_sql_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a SQL Report belongs to

        Parameters
        ----------
        id : int
            The ID of the SQL Report.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_sql_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a SQL Report to a project

        Parameters
        ----------
        id : int
            The ID of the SQL Report.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_sql_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a SQL Report from a project

        Parameters
        ----------
        id : int
            The ID of the SQL Report.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_sql_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this report.
            - name : str
                The name of the report.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - created_at : str (time)
                The creation time for this report.
            - updated_at : str (time)
                The last updated at time for this report.
            - type : str
                The type of the report. One of: ReportTypes::HTML,
                ReportTypes::Tableau, ReportTypes::ShinyApp, ReportTypes::SQL
            - description : str
                The user-defined description of the report.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - config : str
                The configuration of the report visualization.
            - query : dict
                - id : int
                    The query ID.
                - database : int
                    The database ID.
                - sql : str
                    The SQL to execute.
                - credential : int
                    The credential ID.
                - result_rows : list[list]
                    A preview of rows returned by the query.
                - result_columns : list[str]
                    A preview of columns returned by the query.
                - error : str
                    The error message for this run, if present.
                - started_at : str (date-time)
                    The start time of the last run.
                - finished_at : str (date-time)
                    The end time of the last run.
                - state : str
                    The state of the last run. One of queued, running, succeeded,
                    failed, and cancelled.
                - running_as : dict
                    - id : int
                        The ID of this user.
                    - name : str
                        This user's name.
                    - username : str
                        This user's username.
                    - initials : str
                        This user's initials.
                    - online : bool
                        Whether this user is online.
        """
        ...

class _Roles:
    def list(
        self,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Roles

        Parameters
        ----------
        limit : int, optional
            Number of results to return. Defaults to 50. Maximum allowed is 1000.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to asc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                ID of the Role.
            - name : str
                The name of the Role.
            - slug : str
                The slug.
            - description : str
                The description of the Role.
        """
        ...

class _Scripts:
    def list_types(
        self,
    ) -> Response:
        """List available script types

        Returns
        -------
        :class:`civis.response.Response`
            - name : str
                The name of the type.
        """
        ...

    def list_history(
        self,
        id: int,
    ) -> Response:
        """Get the run history and outputs of this script

        Parameters
        ----------
        id : int
            The ID for the script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this run.
            - sql_id : int
                The ID of this sql.
            - state : str
                The state of this run.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - finished_at : str (time)
                The time that this run finished.
            - error : str
                The error message for this run, if present.
            - output : list[dict]
                A list of the outputs of this script.

                - output_name : str
                    The name of the output file.
                - file_id : int
                    The unique ID of the output file.
                - path : str
                    The temporary link to download this output file, valid for 36
                    hours.
        """
        ...

    def post(
        self,
        name: str,
        remote_host_id: int,
        credential_id: int,
        sql: str,
        params: list[dict] | None = ...,
        arguments: dict | None = ...,
        template_script_id: int | None = ...,
        notifications: dict | None = ...,
        hidden: bool | None = ...,
    ) -> Response:
        """Create a script

        Parameters
        ----------
        name : str
            The name of the script.
        remote_host_id : int
            The database ID.
        credential_id : int
            The credential ID.
        sql : str
            The raw SQL query for the script.
        params : list[dict], optional
            A definition of the parameters this script accepts in the arguments field.
            Cannot be set if this script uses a template script.

            - name : str
                The variable's name as used within your code.
            - label : str
                The label to present to users when asking them for the value.
            - description : str
                A short sentence or fragment describing this parameter to the end user.
            - type : str
                The type of parameter. Valid options: string, multi_line_string,
                integer, float, bool, file, table, database, credential_aws,
                credential_redshift, or credential_custom
            - required : bool
                Whether this param is required.
            - value : str
                The value you would like to set this param to. Setting this value makes
                this parameter a fixed param.
            - default : str
                If an argument for this parameter is not defined, it will use this
                default value. Use true, True, t, y, yes, or 1 for true bool's or
                false, False, f, n, no, or 0 for false bool's. Cannot be used for
                parameters that are required or a credential type.
            - allowed_values : list[dict]
                The possible values this parameter can take, effectively making this an
                enumerable parameter. Allowed values is an array of hashes of the
                following format: `{label: 'Import', 'value': 'import'}`
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        template_script_id : int, optional
            The ID of the template script, if any.  A script cannot both have a
            template script and be a template for other scripts.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        hidden : bool, optional
            The hidden status of the item.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - template_script_id : int
                The ID of the template script, if any.
        """
        ...

    def list(
        self,
        type: str | None = ...,
        category: str | None = ...,
        author: str | None = ...,
        status: str | None = ...,
        hidden: bool | None = ...,
        archived: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Scripts

        Parameters
        ----------
        type : str, optional
            If specified, return items of these types. The valid types are sql,
            python3, javascript, r, containers, and dbt.
        category : str, optional
            A job category for filtering scripts. Must be one of script, import,
            export, and enhancement.
        author : str, optional
            If specified, return items from any of these authors. It accepts a comma-
            separated list of user IDs.
        status : str, optional
            If specified, returns items with one of these statuses. It accepts a comma-
            separated list, possible values are 'running', 'failed', 'succeeded',
            'idle', 'scheduled'.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.
        archived : str, optional
            The archival status of the requested item(s).
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to updated_at. Must be
            one of: updated_at, name, created_at, last_run.updated_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - is_template : bool
                Whether others scripts use this one as a template.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - archived : str
                The archival status of the requested item(s).
            - template_script_id : int
                The ID of the template script, if any.
        """
        ...

    def patch(
        self,
        id: int,
        name: str | None = ...,
        sql: str | None = ...,
        params: list[dict] | None = ...,
        arguments: dict | None = ...,
        template_script_id: int | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        parent_id: int | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Update a script

        Parameters
        ----------
        id : int
            The ID for the script.
        name : str, optional
            The name of the script.
        sql : str, optional
            The raw SQL query for the script.
        params : list[dict], optional
            A definition of the parameters this script accepts in the arguments field.
            Cannot be set if this script uses a template script.

            - name : str
                The variable's name as used within your code.
            - label : str
                The label to present to users when asking them for the value.
            - description : str
                A short sentence or fragment describing this parameter to the end user.
            - type : str
                The type of parameter. Valid options: string, multi_line_string,
                integer, float, bool, file, table, database, credential_aws,
                credential_redshift, or credential_custom
            - required : bool
                Whether this param is required.
            - value : str
                The value you would like to set this param to. Setting this value makes
                this parameter a fixed param.
            - default : str
                If an argument for this parameter is not defined, it will use this
                default value. Use true, True, t, y, yes, or 1 for true bool's or
                false, False, f, n, no, or 0 for false bool's. Cannot be used for
                parameters that are required or a credential type.
            - allowed_values : list[dict]
                The possible values this parameter can take, effectively making this an
                enumerable parameter. Allowed values is an array of hashes of the
                following format: `{label: 'Import', 'value': 'import'}`
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        template_script_id : int, optional
            The ID of the template script, if any.  A script cannot both have a
            template script and be a template for other scripts.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of script.
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time this script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - sql : str
                The raw SQL query for the script.
            - expanded_arguments : dict
                Expanded arguments for use in injecting into different environments.
            - template_script_id : int
                The ID of the template script, if any.
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Get details about a script

        Parameters
        ----------
        id : int
            The ID for the script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of script.
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time this script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - sql : str
                The raw SQL query for the script.
            - expanded_arguments : dict
                Expanded arguments for use in injecting into different environments.
            - template_script_id : int
                The ID of the template script, if any.
        """
        ...

    def post_run(
        self,
        id: int,
    ) -> Response:
        """Run a script

        Parameters
        ----------
        id : int
            The ID for the script.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def post_cancel(
        self,
        id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - state : str
                The state of the run, one of 'queued', 'running' or 'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
        """
        ...

    def post_containers(
        self,
        required_resources: dict,
        docker_image_name: str,
        name: str | None = ...,
        parent_id: int | None = ...,
        user_context: str | None = ...,
        params: list[dict] | None = ...,
        arguments: dict | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        repo_http_uri: str | None = ...,
        repo_ref: str | None = ...,
        remote_host_credential_id: int | None = ...,
        git_credential_id: int | None = ...,
        docker_command: str | None = ...,
        docker_image_tag: str | None = ...,
        instance_type: str | None = ...,
        cancel_timeout: int | None = ...,
        time_zone: str | None = ...,
        partition_label: str | None = ...,
        hidden: bool | None = ...,
        target_project_id: int | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Create a container

        Parameters
        ----------
        required_resources : dict
            - cpu : int
                The number of CPU shares to allocate for the container. Each core has
                1000 shares. Must be at least 2 shares.
            - memory : int
                The amount of RAM to allocate for the container (in MB). Must be at
                least 4 MB.
            - disk_space : float (float)
                The amount of disk space, in GB, to allocate for the container. This
                space will be used to hold the git repo configured for the container
                and anything your container writes to /tmp or /data. Fractional values
                (e.g. 0.25) are supported.
        docker_image_name : str
            The name of the docker image to pull from DockerHub.
        name : str, optional
            The name of the container.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        user_context : str, optional
            "runner" or "author", who to execute the script as when run as a template.
        params : list[dict], optional
            A definition of the parameters this script accepts in the arguments field.

            - name : str
                The variable's name as used within your code.
            - label : str
                The label to present to users when asking them for the value.
            - description : str
                A short sentence or fragment describing this parameter to the end user.
            - type : str
                The type of parameter. Valid options: string, multi_line_string,
                integer, float, bool, file, table, database, credential_aws,
                credential_redshift, or credential_custom
            - required : bool
                Whether this param is required.
            - value : str
                The value you would like to set this param to. Setting this value makes
                this parameter a fixed param.
            - default : str
                If an argument for this parameter is not defined, it will use this
                default value. Use true, True, t, y, yes, or 1 for true bool's or
                false, False, f, n, no, or 0 for false bool's. Cannot be used for
                parameters that are required or a credential type.
            - allowed_values : list[dict]
                The possible values this parameter can take, effectively making this an
                enumerable parameter. Allowed values is an array of hashes of the
                following format: `{label: 'Import', 'value': 'import'}`
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        repo_http_uri : str, optional
            The location of a github repo to clone into the container, e.g.
            github.com/my-user/my-repo.git.
        repo_ref : str, optional
            The tag or branch of the github repo to clone into the container.
        remote_host_credential_id : int, optional
            The id of the database credentials to pass into the environment of the
            container.
        git_credential_id : int, optional
            The id of the git credential to be used when checking out the specified git
            repo. If not supplied, the first git credential you've submitted will be
            used. Unnecessary if no git repo is specified or the git repo is public.
        docker_command : str, optional
            The command to run on the container. Will be run via sh as: ["sh", "-c",
            dockerCommand]. Defaults to the Docker image's ENTRYPOINT/CMD.
        docker_image_tag : str, optional
            The tag of the docker image to pull from DockerHub.
        instance_type : str, optional
            The EC2 instance type to deploy to. Only available for jobs running on
            kubernetes.
        cancel_timeout : int, optional
            The amount of time (in seconds) to wait before forcibly terminating the
            script. When the script is cancelled, it is first sent a TERM signal. If
            the script is still running after the timeout, it is sent a KILL signal.
            Defaults to 0.
        time_zone : str, optional
            The time zone of this script.
        partition_label : str, optional
            The partition label used to run this object.
        hidden : bool, optional
            The hidden status of the item.
        target_project_id : int, optional
            Target project to which script outputs will be added.
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - from_template_aliases : list[dict]
                An array of the aliases of the template script.

                - id : int
                    The id of the Alias object.
                - object_id : int
                    The id of the object
                - alias : str
                    The alias of the object
            - name : str
                The name of the container.
            - type : str
                The type of the script (e.g Container)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template script.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares. Must be at least 2 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB). Must be at
                    least 4 MB.
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - repo_http_uri : str
                The location of a github repo to clone into the container, e.g.
                github.com/my-user/my-repo.git.
            - repo_ref : str
                The tag or branch of the github repo to clone into the container.
            - remote_host_credential_id : int
                The id of the database credentials to pass into the environment of the
                container.
            - git_credential_id : int
                The id of the git credential to be used when checking out the specified
                git repo. If not supplied, the first git credential you've submitted
                will be used. Unnecessary if no git repo is specified or the git repo
                is public.
            - docker_command : str
                The command to run on the container. Will be run via sh as: ["sh",
                "-c", dockerCommand]. Defaults to the Docker image's ENTRYPOINT/CMD.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub.
            - instance_type : str
                The EC2 instance type to deploy to. Only available for jobs running on
                kubernetes.
            - cancel_timeout : int
                The amount of time (in seconds) to wait before forcibly terminating the
                script. When the script is cancelled, it is first sent a TERM signal.
                If the script is still running after the timeout, it is sent a KILL
                signal. Defaults to 0.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - time_zone : str
                The time zone of this script.
            - partition_label : str
                The partition label used to run this object.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - target_project_id : int
                Target project to which script outputs will be added.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def get_containers(
        self,
        id: int,
    ) -> Response:
        """View a container

        Parameters
        ----------
        id : int
            The ID for the script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - from_template_aliases : list[dict]
                An array of the aliases of the template script.

                - id : int
                    The id of the Alias object.
                - object_id : int
                    The id of the object
                - alias : str
                    The alias of the object
            - name : str
                The name of the container.
            - type : str
                The type of the script (e.g Container)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template script.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares. Must be at least 2 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB). Must be at
                    least 4 MB.
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - repo_http_uri : str
                The location of a github repo to clone into the container, e.g.
                github.com/my-user/my-repo.git.
            - repo_ref : str
                The tag or branch of the github repo to clone into the container.
            - remote_host_credential_id : int
                The id of the database credentials to pass into the environment of the
                container.
            - git_credential_id : int
                The id of the git credential to be used when checking out the specified
                git repo. If not supplied, the first git credential you've submitted
                will be used. Unnecessary if no git repo is specified or the git repo
                is public.
            - docker_command : str
                The command to run on the container. Will be run via sh as: ["sh",
                "-c", dockerCommand]. Defaults to the Docker image's ENTRYPOINT/CMD.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub.
            - instance_type : str
                The EC2 instance type to deploy to. Only available for jobs running on
                kubernetes.
            - cancel_timeout : int
                The amount of time (in seconds) to wait before forcibly terminating the
                script. When the script is cancelled, it is first sent a TERM signal.
                If the script is still running after the timeout, it is sent a KILL
                signal. Defaults to 0.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - time_zone : str
                The time zone of this script.
            - partition_label : str
                The partition label used to run this object.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - target_project_id : int
                Target project to which script outputs will be added.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def put_containers(
        self,
        id: int,
        required_resources: dict,
        docker_image_name: str,
        name: str | None = ...,
        parent_id: int | None = ...,
        user_context: str | None = ...,
        params: list[dict] | None = ...,
        arguments: dict | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        repo_http_uri: str | None = ...,
        repo_ref: str | None = ...,
        remote_host_credential_id: int | None = ...,
        git_credential_id: int | None = ...,
        docker_command: str | None = ...,
        docker_image_tag: str | None = ...,
        instance_type: str | None = ...,
        cancel_timeout: int | None = ...,
        time_zone: str | None = ...,
        partition_label: str | None = ...,
        target_project_id: int | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Edit a container

        Parameters
        ----------
        id : int
            The ID for the script.
        required_resources : dict
            - cpu : int
                The number of CPU shares to allocate for the container. Each core has
                1000 shares. Must be at least 2 shares.
            - memory : int
                The amount of RAM to allocate for the container (in MB). Must be at
                least 4 MB.
            - disk_space : float (float)
                The amount of disk space, in GB, to allocate for the container. This
                space will be used to hold the git repo configured for the container
                and anything your container writes to /tmp or /data. Fractional values
                (e.g. 0.25) are supported.
        docker_image_name : str
            The name of the docker image to pull from DockerHub.
        name : str, optional
            The name of the container.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        user_context : str, optional
            "runner" or "author", who to execute the script as when run as a template.
        params : list[dict], optional
            A definition of the parameters this script accepts in the arguments field.

            - name : str
                The variable's name as used within your code.
            - label : str
                The label to present to users when asking them for the value.
            - description : str
                A short sentence or fragment describing this parameter to the end user.
            - type : str
                The type of parameter. Valid options: string, multi_line_string,
                integer, float, bool, file, table, database, credential_aws,
                credential_redshift, or credential_custom
            - required : bool
                Whether this param is required.
            - value : str
                The value you would like to set this param to. Setting this value makes
                this parameter a fixed param.
            - default : str
                If an argument for this parameter is not defined, it will use this
                default value. Use true, True, t, y, yes, or 1 for true bool's or
                false, False, f, n, no, or 0 for false bool's. Cannot be used for
                parameters that are required or a credential type.
            - allowed_values : list[dict]
                The possible values this parameter can take, effectively making this an
                enumerable parameter. Allowed values is an array of hashes of the
                following format: `{label: 'Import', 'value': 'import'}`
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        repo_http_uri : str, optional
            The location of a github repo to clone into the container, e.g.
            github.com/my-user/my-repo.git.
        repo_ref : str, optional
            The tag or branch of the github repo to clone into the container.
        remote_host_credential_id : int, optional
            The id of the database credentials to pass into the environment of the
            container.
        git_credential_id : int, optional
            The id of the git credential to be used when checking out the specified git
            repo. If not supplied, the first git credential you've submitted will be
            used. Unnecessary if no git repo is specified or the git repo is public.
        docker_command : str, optional
            The command to run on the container. Will be run via sh as: ["sh", "-c",
            dockerCommand]. Defaults to the Docker image's ENTRYPOINT/CMD.
        docker_image_tag : str, optional
            The tag of the docker image to pull from DockerHub.
        instance_type : str, optional
            The EC2 instance type to deploy to. Only available for jobs running on
            kubernetes.
        cancel_timeout : int, optional
            The amount of time (in seconds) to wait before forcibly terminating the
            script. When the script is cancelled, it is first sent a TERM signal. If
            the script is still running after the timeout, it is sent a KILL signal.
            Defaults to 0.
        time_zone : str, optional
            The time zone of this script.
        partition_label : str, optional
            The partition label used to run this object.
        target_project_id : int, optional
            Target project to which script outputs will be added.
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - from_template_aliases : list[dict]
                An array of the aliases of the template script.

                - id : int
                    The id of the Alias object.
                - object_id : int
                    The id of the object
                - alias : str
                    The alias of the object
            - name : str
                The name of the container.
            - type : str
                The type of the script (e.g Container)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template script.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares. Must be at least 2 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB). Must be at
                    least 4 MB.
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - repo_http_uri : str
                The location of a github repo to clone into the container, e.g.
                github.com/my-user/my-repo.git.
            - repo_ref : str
                The tag or branch of the github repo to clone into the container.
            - remote_host_credential_id : int
                The id of the database credentials to pass into the environment of the
                container.
            - git_credential_id : int
                The id of the git credential to be used when checking out the specified
                git repo. If not supplied, the first git credential you've submitted
                will be used. Unnecessary if no git repo is specified or the git repo
                is public.
            - docker_command : str
                The command to run on the container. Will be run via sh as: ["sh",
                "-c", dockerCommand]. Defaults to the Docker image's ENTRYPOINT/CMD.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub.
            - instance_type : str
                The EC2 instance type to deploy to. Only available for jobs running on
                kubernetes.
            - cancel_timeout : int
                The amount of time (in seconds) to wait before forcibly terminating the
                script. When the script is cancelled, it is first sent a TERM signal.
                If the script is still running after the timeout, it is sent a KILL
                signal. Defaults to 0.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - time_zone : str
                The time zone of this script.
            - partition_label : str
                The partition label used to run this object.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - target_project_id : int
                Target project to which script outputs will be added.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def patch_containers(
        self,
        id: int,
        name: str | None = ...,
        parent_id: int | None = ...,
        user_context: str | None = ...,
        params: list[dict] | None = ...,
        arguments: dict | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        required_resources: dict | None = ...,
        repo_http_uri: str | None = ...,
        repo_ref: str | None = ...,
        remote_host_credential_id: int | None = ...,
        git_credential_id: int | None = ...,
        docker_command: str | None = ...,
        docker_image_name: str | None = ...,
        docker_image_tag: str | None = ...,
        instance_type: str | None = ...,
        cancel_timeout: int | None = ...,
        time_zone: str | None = ...,
        partition_label: str | None = ...,
        target_project_id: int | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Update a container

        Parameters
        ----------
        id : int
            The ID for the script.
        name : str, optional
            The name of the container.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        user_context : str, optional
            "runner" or "author", who to execute the script as when run as a template.
        params : list[dict], optional
            A definition of the parameters this script accepts in the arguments field.

            - name : str
                The variable's name as used within your code.
            - label : str
                The label to present to users when asking them for the value.
            - description : str
                A short sentence or fragment describing this parameter to the end user.
            - type : str
                The type of parameter. Valid options: string, multi_line_string,
                integer, float, bool, file, table, database, credential_aws,
                credential_redshift, or credential_custom
            - required : bool
                Whether this param is required.
            - value : str
                The value you would like to set this param to. Setting this value makes
                this parameter a fixed param.
            - default : str
                If an argument for this parameter is not defined, it will use this
                default value. Use true, True, t, y, yes, or 1 for true bool's or
                false, False, f, n, no, or 0 for false bool's. Cannot be used for
                parameters that are required or a credential type.
            - allowed_values : list[dict]
                The possible values this parameter can take, effectively making this an
                enumerable parameter. Allowed values is an array of hashes of the
                following format: `{label: 'Import', 'value': 'import'}`
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        required_resources : dict, optional
            - cpu : int
                The number of CPU shares to allocate for the container. Each core has
                1000 shares. Must be at least 2 shares.
            - memory : int
                The amount of RAM to allocate for the container (in MB). Must be at
                least 4 MB.
            - disk_space : float (float)
                The amount of disk space, in GB, to allocate for the container. This
                space will be used to hold the git repo configured for the container
                and anything your container writes to /tmp or /data. Fractional values
                (e.g. 0.25) are supported.
        repo_http_uri : str, optional
            The location of a github repo to clone into the container, e.g.
            github.com/my-user/my-repo.git.
        repo_ref : str, optional
            The tag or branch of the github repo to clone into the container.
        remote_host_credential_id : int, optional
            The id of the database credentials to pass into the environment of the
            container.
        git_credential_id : int, optional
            The id of the git credential to be used when checking out the specified git
            repo. If not supplied, the first git credential you've submitted will be
            used. Unnecessary if no git repo is specified or the git repo is public.
        docker_command : str, optional
            The command to run on the container. Will be run via sh as: ["sh", "-c",
            dockerCommand]. Defaults to the Docker image's ENTRYPOINT/CMD.
        docker_image_name : str, optional
            The name of the docker image to pull from DockerHub.
        docker_image_tag : str, optional
            The tag of the docker image to pull from DockerHub.
        instance_type : str, optional
            The EC2 instance type to deploy to. Only available for jobs running on
            kubernetes.
        cancel_timeout : int, optional
            The amount of time (in seconds) to wait before forcibly terminating the
            script. When the script is cancelled, it is first sent a TERM signal. If
            the script is still running after the timeout, it is sent a KILL signal.
            Defaults to 0.
        time_zone : str, optional
            The time zone of this script.
        partition_label : str, optional
            The partition label used to run this object.
        target_project_id : int, optional
            Target project to which script outputs will be added.
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - from_template_aliases : list[dict]
                An array of the aliases of the template script.

                - id : int
                    The id of the Alias object.
                - object_id : int
                    The id of the object
                - alias : str
                    The alias of the object
            - name : str
                The name of the container.
            - type : str
                The type of the script (e.g Container)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template script.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares. Must be at least 2 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB). Must be at
                    least 4 MB.
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - repo_http_uri : str
                The location of a github repo to clone into the container, e.g.
                github.com/my-user/my-repo.git.
            - repo_ref : str
                The tag or branch of the github repo to clone into the container.
            - remote_host_credential_id : int
                The id of the database credentials to pass into the environment of the
                container.
            - git_credential_id : int
                The id of the git credential to be used when checking out the specified
                git repo. If not supplied, the first git credential you've submitted
                will be used. Unnecessary if no git repo is specified or the git repo
                is public.
            - docker_command : str
                The command to run on the container. Will be run via sh as: ["sh",
                "-c", dockerCommand]. Defaults to the Docker image's ENTRYPOINT/CMD.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub.
            - instance_type : str
                The EC2 instance type to deploy to. Only available for jobs running on
                kubernetes.
            - cancel_timeout : int
                The amount of time (in seconds) to wait before forcibly terminating the
                script. When the script is cancelled, it is first sent a TERM signal.
                If the script is still running after the timeout, it is sent a KILL
                signal. Defaults to 0.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - time_zone : str
                The time zone of this script.
            - partition_label : str
                The partition label used to run this object.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - target_project_id : int
                Target project to which script outputs will be added.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def post_containers_runs_logs(
        self,
        id: int,
        run_id: int,
        message: str | None = ...,
        level: str | None = ...,
        messages: list[dict] | None = ...,
        child_job_id: int | None = ...,
    ) -> Response:
        """Add log messages

        Parameters
        ----------
        id : int
            The ID of the script.
        run_id : int
            The ID of the script run.
        message : str, optional
            The log message to store.
        level : str, optional
            The log level of this message [default: info]
        messages : list[dict], optional
            If specified, a batch of logs to store. If createdAt timestamps for the
            logs are supplied, the ordering of this list is not preserved, and the
            timestamps are used to sort the logs.If createdAt timestamps are not
            supplied, the ordering of this list is preserved and the logs are given the
            timestamp of when they were received.

            - message : str
                The log message to store.
            - level : str
                The log level of this message [default: info]
            - created_at : str (date-time)
                The timestamp of this message in ISO 8601 format. This is what logs are
                ordered by, so it is recommended to use timestamps with nanosecond
                precision. If absent, defaults to the time that the log was received by
                the API.
        child_job_id : int, optional
            The ID of the child job the message came from.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_containers_runs_logs(
        self,
        id: int,
        run_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a run

        Parameters
        ----------
        id : int
            The ID of the Container job.
        run_id : int
            The ID of the run.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def post_sql(
        self,
        name: str,
        sql: str,
        remote_host_id: int,
        credential_id: int,
        parent_id: int | None = ...,
        user_context: str | None = ...,
        params: list[dict] | None = ...,
        arguments: dict | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        next_run_at: str | None = ...,
        time_zone: str | None = ...,
        hidden: bool | None = ...,
        target_project_id: int | None = ...,
        csv_settings: dict | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Create a SQL Script

        Parameters
        ----------
        name : str
            The name of the script.
        sql : str
            The raw SQL query for the script.
        remote_host_id : int
            The remote host ID that this script will connect to.
        credential_id : int
            The credential that this script will use.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        user_context : str, optional
            "runner" or "author", who to execute the script as when run as a template.
        params : list[dict], optional
            A definition of the parameters this script accepts in the arguments field.

            - name : str
                The variable's name as used within your code.
            - label : str
                The label to present to users when asking them for the value.
            - description : str
                A short sentence or fragment describing this parameter to the end user.
            - type : str
                The type of parameter. Valid options: string, multi_line_string,
                integer, float, bool, file, table, database, credential_aws,
                credential_redshift, or credential_custom
            - required : bool
                Whether this param is required.
            - value : str
                The value you would like to set this param to. Setting this value makes
                this parameter a fixed param.
            - default : str
                If an argument for this parameter is not defined, it will use this
                default value. Use true, True, t, y, yes, or 1 for true bool's or
                false, False, f, n, no, or 0 for false bool's. Cannot be used for
                parameters that are required or a credential type.
            - allowed_values : list[dict]
                The possible values this parameter can take, effectively making this an
                enumerable parameter. Allowed values is an array of hashes of the
                following format: `{label: 'Import', 'value': 'import'}`
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        next_run_at : str (time), optional
            The time of the next scheduled run.
        time_zone : str, optional
            The time zone of this script.
        hidden : bool, optional
            The hidden status of the item.
        target_project_id : int, optional
            Target project to which script outputs will be added.
        csv_settings : dict, optional
            - include_header : bool
                Whether or not to include headers in the output data. Default: true
            - compression : str
                The type of compression to use, if any, one of "none", "zip", or
                "gzip". Default: gzip
            - column_delimiter : str
                Which delimiter to use, one of "comma", "tab", or "pipe". Default:
                comma
            - unquoted : bool
                Whether or not to quote fields. Default: false
            - force_multifile : bool
                Whether or not the csv should be split into multiple files. Default:
                false
            - filename_prefix : str
                A user specified filename prefix for the output file to have. Default:
                null
            - max_file_size : int
                The max file size, in MB, created files will be. Only available when
                force_multifile is true.
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - sql : str
                The raw SQL query for the script.
            - expanded_arguments : dict
                Expanded arguments for use in injecting into different environments.
            - remote_host_id : int
                The remote host ID that this script will connect to.
            - credential_id : int
                The credential that this script will use.
            - code_preview : str
                The code that this script will run with arguments inserted.
            - csv_settings : dict
                - include_header : bool
                    Whether or not to include headers in the output data. Default: true
                - compression : str
                    The type of compression to use, if any, one of "none", "zip", or
                    "gzip". Default: gzip
                - column_delimiter : str
                    Which delimiter to use, one of "comma", "tab", or "pipe". Default:
                    comma
                - unquoted : bool
                    Whether or not to quote fields. Default: false
                - force_multifile : bool
                    Whether or not the csv should be split into multiple files.
                    Default: false
                - filename_prefix : str
                    A user specified filename prefix for the output file to have.
                    Default: null
                - max_file_size : int
                    The max file size, in MB, created files will be. Only available
                    when force_multifile is true.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def get_sql(
        self,
        id: int,
    ) -> Response:
        """Get a SQL Script

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - sql : str
                The raw SQL query for the script.
            - expanded_arguments : dict
                Expanded arguments for use in injecting into different environments.
            - remote_host_id : int
                The remote host ID that this script will connect to.
            - credential_id : int
                The credential that this script will use.
            - code_preview : str
                The code that this script will run with arguments inserted.
            - csv_settings : dict
                - include_header : bool
                    Whether or not to include headers in the output data. Default: true
                - compression : str
                    The type of compression to use, if any, one of "none", "zip", or
                    "gzip". Default: gzip
                - column_delimiter : str
                    Which delimiter to use, one of "comma", "tab", or "pipe". Default:
                    comma
                - unquoted : bool
                    Whether or not to quote fields. Default: false
                - force_multifile : bool
                    Whether or not the csv should be split into multiple files.
                    Default: false
                - filename_prefix : str
                    A user specified filename prefix for the output file to have.
                    Default: null
                - max_file_size : int
                    The max file size, in MB, created files will be. Only available
                    when force_multifile is true.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def put_sql(
        self,
        id: int,
        name: str,
        sql: str,
        remote_host_id: int,
        credential_id: int,
        parent_id: int | None = ...,
        user_context: str | None = ...,
        params: list[dict] | None = ...,
        arguments: dict | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        next_run_at: str | None = ...,
        time_zone: str | None = ...,
        target_project_id: int | None = ...,
        csv_settings: dict | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Replace all attributes of this SQL Script

        Parameters
        ----------
        id : int
            The ID for the script.
        name : str
            The name of the script.
        sql : str
            The raw SQL query for the script.
        remote_host_id : int
            The remote host ID that this script will connect to.
        credential_id : int
            The credential that this script will use.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        user_context : str, optional
            "runner" or "author", who to execute the script as when run as a template.
        params : list[dict], optional
            A definition of the parameters this script accepts in the arguments field.

            - name : str
                The variable's name as used within your code.
            - label : str
                The label to present to users when asking them for the value.
            - description : str
                A short sentence or fragment describing this parameter to the end user.
            - type : str
                The type of parameter. Valid options: string, multi_line_string,
                integer, float, bool, file, table, database, credential_aws,
                credential_redshift, or credential_custom
            - required : bool
                Whether this param is required.
            - value : str
                The value you would like to set this param to. Setting this value makes
                this parameter a fixed param.
            - default : str
                If an argument for this parameter is not defined, it will use this
                default value. Use true, True, t, y, yes, or 1 for true bool's or
                false, False, f, n, no, or 0 for false bool's. Cannot be used for
                parameters that are required or a credential type.
            - allowed_values : list[dict]
                The possible values this parameter can take, effectively making this an
                enumerable parameter. Allowed values is an array of hashes of the
                following format: `{label: 'Import', 'value': 'import'}`
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        next_run_at : str (time), optional
            The time of the next scheduled run.
        time_zone : str, optional
            The time zone of this script.
        target_project_id : int, optional
            Target project to which script outputs will be added.
        csv_settings : dict, optional
            - include_header : bool
                Whether or not to include headers in the output data. Default: true
            - compression : str
                The type of compression to use, if any, one of "none", "zip", or
                "gzip". Default: gzip
            - column_delimiter : str
                Which delimiter to use, one of "comma", "tab", or "pipe". Default:
                comma
            - unquoted : bool
                Whether or not to quote fields. Default: false
            - force_multifile : bool
                Whether or not the csv should be split into multiple files. Default:
                false
            - filename_prefix : str
                A user specified filename prefix for the output file to have. Default:
                null
            - max_file_size : int
                The max file size, in MB, created files will be. Only available when
                force_multifile is true.
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - sql : str
                The raw SQL query for the script.
            - expanded_arguments : dict
                Expanded arguments for use in injecting into different environments.
            - remote_host_id : int
                The remote host ID that this script will connect to.
            - credential_id : int
                The credential that this script will use.
            - code_preview : str
                The code that this script will run with arguments inserted.
            - csv_settings : dict
                - include_header : bool
                    Whether or not to include headers in the output data. Default: true
                - compression : str
                    The type of compression to use, if any, one of "none", "zip", or
                    "gzip". Default: gzip
                - column_delimiter : str
                    Which delimiter to use, one of "comma", "tab", or "pipe". Default:
                    comma
                - unquoted : bool
                    Whether or not to quote fields. Default: false
                - force_multifile : bool
                    Whether or not the csv should be split into multiple files.
                    Default: false
                - filename_prefix : str
                    A user specified filename prefix for the output file to have.
                    Default: null
                - max_file_size : int
                    The max file size, in MB, created files will be. Only available
                    when force_multifile is true.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def patch_sql(
        self,
        id: int,
        name: str | None = ...,
        parent_id: int | None = ...,
        user_context: str | None = ...,
        params: list[dict] | None = ...,
        arguments: dict | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        next_run_at: str | None = ...,
        time_zone: str | None = ...,
        target_project_id: int | None = ...,
        sql: str | None = ...,
        remote_host_id: int | None = ...,
        credential_id: int | None = ...,
        csv_settings: dict | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Update some attributes of this SQL Script

        Parameters
        ----------
        id : int
            The ID for the script.
        name : str, optional
            The name of the script.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        user_context : str, optional
            "runner" or "author", who to execute the script as when run as a template.
        params : list[dict], optional
            A definition of the parameters this script accepts in the arguments field.

            - name : str
                The variable's name as used within your code.
            - label : str
                The label to present to users when asking them for the value.
            - description : str
                A short sentence or fragment describing this parameter to the end user.
            - type : str
                The type of parameter. Valid options: string, multi_line_string,
                integer, float, bool, file, table, database, credential_aws,
                credential_redshift, or credential_custom
            - required : bool
                Whether this param is required.
            - value : str
                The value you would like to set this param to. Setting this value makes
                this parameter a fixed param.
            - default : str
                If an argument for this parameter is not defined, it will use this
                default value. Use true, True, t, y, yes, or 1 for true bool's or
                false, False, f, n, no, or 0 for false bool's. Cannot be used for
                parameters that are required or a credential type.
            - allowed_values : list[dict]
                The possible values this parameter can take, effectively making this an
                enumerable parameter. Allowed values is an array of hashes of the
                following format: `{label: 'Import', 'value': 'import'}`
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        next_run_at : str (time), optional
            The time of the next scheduled run.
        time_zone : str, optional
            The time zone of this script.
        target_project_id : int, optional
            Target project to which script outputs will be added.
        sql : str, optional
            The raw SQL query for the script.
        remote_host_id : int, optional
            The remote host ID that this script will connect to.
        credential_id : int, optional
            The credential that this script will use.
        csv_settings : dict, optional
            - include_header : bool
                Whether or not to include headers in the output data. Default: true
            - compression : str
                The type of compression to use, if any, one of "none", "zip", or
                "gzip". Default: gzip
            - column_delimiter : str
                Which delimiter to use, one of "comma", "tab", or "pipe". Default:
                comma
            - unquoted : bool
                Whether or not to quote fields. Default: false
            - force_multifile : bool
                Whether or not the csv should be split into multiple files. Default:
                false
            - filename_prefix : str
                A user specified filename prefix for the output file to have. Default:
                null
            - max_file_size : int
                The max file size, in MB, created files will be. Only available when
                force_multifile is true.
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - sql : str
                The raw SQL query for the script.
            - expanded_arguments : dict
                Expanded arguments for use in injecting into different environments.
            - remote_host_id : int
                The remote host ID that this script will connect to.
            - credential_id : int
                The credential that this script will use.
            - code_preview : str
                The code that this script will run with arguments inserted.
            - csv_settings : dict
                - include_header : bool
                    Whether or not to include headers in the output data. Default: true
                - compression : str
                    The type of compression to use, if any, one of "none", "zip", or
                    "gzip". Default: gzip
                - column_delimiter : str
                    Which delimiter to use, one of "comma", "tab", or "pipe". Default:
                    comma
                - unquoted : bool
                    Whether or not to quote fields. Default: false
                - force_multifile : bool
                    Whether or not the csv should be split into multiple files.
                    Default: false
                - filename_prefix : str
                    A user specified filename prefix for the output file to have.
                    Default: null
                - max_file_size : int
                    The max file size, in MB, created files will be. Only available
                    when force_multifile is true.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def post_python3(
        self,
        name: str,
        source: str,
        parent_id: int | None = ...,
        user_context: str | None = ...,
        params: list[dict] | None = ...,
        arguments: dict | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        next_run_at: str | None = ...,
        time_zone: str | None = ...,
        hidden: bool | None = ...,
        target_project_id: int | None = ...,
        required_resources: dict | None = ...,
        instance_type: str | None = ...,
        cancel_timeout: int | None = ...,
        docker_image_tag: str | None = ...,
        partition_label: str | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Create a Python Script

        Parameters
        ----------
        name : str
            The name of the script.
        source : str
            The body/text of the script.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        user_context : str, optional
            "runner" or "author", who to execute the script as when run as a template.
        params : list[dict], optional
            A definition of the parameters this script accepts in the arguments field.

            - name : str
                The variable's name as used within your code.
            - label : str
                The label to present to users when asking them for the value.
            - description : str
                A short sentence or fragment describing this parameter to the end user.
            - type : str
                The type of parameter. Valid options: string, multi_line_string,
                integer, float, bool, file, table, database, credential_aws,
                credential_redshift, or credential_custom
            - required : bool
                Whether this param is required.
            - value : str
                The value you would like to set this param to. Setting this value makes
                this parameter a fixed param.
            - default : str
                If an argument for this parameter is not defined, it will use this
                default value. Use true, True, t, y, yes, or 1 for true bool's or
                false, False, f, n, no, or 0 for false bool's. Cannot be used for
                parameters that are required or a credential type.
            - allowed_values : list[dict]
                The possible values this parameter can take, effectively making this an
                enumerable parameter. Allowed values is an array of hashes of the
                following format: `{label: 'Import', 'value': 'import'}`
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        next_run_at : str (time), optional
            The time of the next scheduled run.
        time_zone : str, optional
            The time zone of this script.
        hidden : bool, optional
            The hidden status of the item.
        target_project_id : int, optional
            Target project to which script outputs will be added.
        required_resources : dict, optional
            - cpu : int
                The number of CPU shares to allocate for the container. Each core has
                1000 shares. Must be at least 2 shares.
            - memory : int
                The amount of RAM to allocate for the container (in MB). Must be at
                least 4 MB.
            - disk_space : float (float)
                The amount of disk space, in GB, to allocate for the container. This
                space will be used to hold the git repo configured for the container
                and anything your container writes to /tmp or /data. Fractional values
                (e.g. 0.25) are supported.
        instance_type : str, optional
            The EC2 instance type to deploy to. Only available for jobs running on
            kubernetes.
        cancel_timeout : int, optional
            The amount of time (in seconds) to wait before forcibly terminating the
            script. When the script is cancelled, it is first sent a TERM signal. If
            the script is still running after the timeout, it is sent a KILL signal.
            Defaults to 0.
        docker_image_tag : str, optional
            The tag of the docker image to pull from DockerHub.
        partition_label : str, optional
            The partition label used to run this object.
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares. Must be at least 2 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB). Must be at
                    least 4 MB.
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - instance_type : str
                The EC2 instance type to deploy to. Only available for jobs running on
                kubernetes.
            - source : str
                The body/text of the script.
            - cancel_timeout : int
                The amount of time (in seconds) to wait before forcibly terminating the
                script. When the script is cancelled, it is first sent a TERM signal.
                If the script is still running after the timeout, it is sent a KILL
                signal. Defaults to 0.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub.
            - partition_label : str
                The partition label used to run this object.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def get_python3(
        self,
        id: int,
    ) -> Response:
        """Get a Python Script

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares. Must be at least 2 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB). Must be at
                    least 4 MB.
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - instance_type : str
                The EC2 instance type to deploy to. Only available for jobs running on
                kubernetes.
            - source : str
                The body/text of the script.
            - cancel_timeout : int
                The amount of time (in seconds) to wait before forcibly terminating the
                script. When the script is cancelled, it is first sent a TERM signal.
                If the script is still running after the timeout, it is sent a KILL
                signal. Defaults to 0.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub.
            - partition_label : str
                The partition label used to run this object.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def put_python3(
        self,
        id: int,
        name: str,
        source: str,
        parent_id: int | None = ...,
        user_context: str | None = ...,
        params: list[dict] | None = ...,
        arguments: dict | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        next_run_at: str | None = ...,
        time_zone: str | None = ...,
        target_project_id: int | None = ...,
        required_resources: dict | None = ...,
        instance_type: str | None = ...,
        cancel_timeout: int | None = ...,
        docker_image_tag: str | None = ...,
        partition_label: str | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Replace all attributes of this Python Script

        Parameters
        ----------
        id : int
            The ID for the script.
        name : str
            The name of the script.
        source : str
            The body/text of the script.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        user_context : str, optional
            "runner" or "author", who to execute the script as when run as a template.
        params : list[dict], optional
            A definition of the parameters this script accepts in the arguments field.

            - name : str
                The variable's name as used within your code.
            - label : str
                The label to present to users when asking them for the value.
            - description : str
                A short sentence or fragment describing this parameter to the end user.
            - type : str
                The type of parameter. Valid options: string, multi_line_string,
                integer, float, bool, file, table, database, credential_aws,
                credential_redshift, or credential_custom
            - required : bool
                Whether this param is required.
            - value : str
                The value you would like to set this param to. Setting this value makes
                this parameter a fixed param.
            - default : str
                If an argument for this parameter is not defined, it will use this
                default value. Use true, True, t, y, yes, or 1 for true bool's or
                false, False, f, n, no, or 0 for false bool's. Cannot be used for
                parameters that are required or a credential type.
            - allowed_values : list[dict]
                The possible values this parameter can take, effectively making this an
                enumerable parameter. Allowed values is an array of hashes of the
                following format: `{label: 'Import', 'value': 'import'}`
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        next_run_at : str (time), optional
            The time of the next scheduled run.
        time_zone : str, optional
            The time zone of this script.
        target_project_id : int, optional
            Target project to which script outputs will be added.
        required_resources : dict, optional
            - cpu : int
                The number of CPU shares to allocate for the container. Each core has
                1000 shares. Must be at least 2 shares.
            - memory : int
                The amount of RAM to allocate for the container (in MB). Must be at
                least 4 MB.
            - disk_space : float (float)
                The amount of disk space, in GB, to allocate for the container. This
                space will be used to hold the git repo configured for the container
                and anything your container writes to /tmp or /data. Fractional values
                (e.g. 0.25) are supported.
        instance_type : str, optional
            The EC2 instance type to deploy to. Only available for jobs running on
            kubernetes.
        cancel_timeout : int, optional
            The amount of time (in seconds) to wait before forcibly terminating the
            script. When the script is cancelled, it is first sent a TERM signal. If
            the script is still running after the timeout, it is sent a KILL signal.
            Defaults to 0.
        docker_image_tag : str, optional
            The tag of the docker image to pull from DockerHub.
        partition_label : str, optional
            The partition label used to run this object.
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares. Must be at least 2 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB). Must be at
                    least 4 MB.
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - instance_type : str
                The EC2 instance type to deploy to. Only available for jobs running on
                kubernetes.
            - source : str
                The body/text of the script.
            - cancel_timeout : int
                The amount of time (in seconds) to wait before forcibly terminating the
                script. When the script is cancelled, it is first sent a TERM signal.
                If the script is still running after the timeout, it is sent a KILL
                signal. Defaults to 0.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub.
            - partition_label : str
                The partition label used to run this object.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def patch_python3(
        self,
        id: int,
        name: str | None = ...,
        parent_id: int | None = ...,
        user_context: str | None = ...,
        params: list[dict] | None = ...,
        arguments: dict | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        next_run_at: str | None = ...,
        time_zone: str | None = ...,
        target_project_id: int | None = ...,
        required_resources: dict | None = ...,
        instance_type: str | None = ...,
        source: str | None = ...,
        cancel_timeout: int | None = ...,
        docker_image_tag: str | None = ...,
        partition_label: str | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Update some attributes of this Python Script

        Parameters
        ----------
        id : int
            The ID for the script.
        name : str, optional
            The name of the script.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        user_context : str, optional
            "runner" or "author", who to execute the script as when run as a template.
        params : list[dict], optional
            A definition of the parameters this script accepts in the arguments field.

            - name : str
                The variable's name as used within your code.
            - label : str
                The label to present to users when asking them for the value.
            - description : str
                A short sentence or fragment describing this parameter to the end user.
            - type : str
                The type of parameter. Valid options: string, multi_line_string,
                integer, float, bool, file, table, database, credential_aws,
                credential_redshift, or credential_custom
            - required : bool
                Whether this param is required.
            - value : str
                The value you would like to set this param to. Setting this value makes
                this parameter a fixed param.
            - default : str
                If an argument for this parameter is not defined, it will use this
                default value. Use true, True, t, y, yes, or 1 for true bool's or
                false, False, f, n, no, or 0 for false bool's. Cannot be used for
                parameters that are required or a credential type.
            - allowed_values : list[dict]
                The possible values this parameter can take, effectively making this an
                enumerable parameter. Allowed values is an array of hashes of the
                following format: `{label: 'Import', 'value': 'import'}`
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        next_run_at : str (time), optional
            The time of the next scheduled run.
        time_zone : str, optional
            The time zone of this script.
        target_project_id : int, optional
            Target project to which script outputs will be added.
        required_resources : dict, optional
            - cpu : int
                The number of CPU shares to allocate for the container. Each core has
                1000 shares. Must be at least 2 shares.
            - memory : int
                The amount of RAM to allocate for the container (in MB). Must be at
                least 4 MB.
            - disk_space : float (float)
                The amount of disk space, in GB, to allocate for the container. This
                space will be used to hold the git repo configured for the container
                and anything your container writes to /tmp or /data. Fractional values
                (e.g. 0.25) are supported.
        instance_type : str, optional
            The EC2 instance type to deploy to. Only available for jobs running on
            kubernetes.
        source : str, optional
            The body/text of the script.
        cancel_timeout : int, optional
            The amount of time (in seconds) to wait before forcibly terminating the
            script. When the script is cancelled, it is first sent a TERM signal. If
            the script is still running after the timeout, it is sent a KILL signal.
            Defaults to 0.
        docker_image_tag : str, optional
            The tag of the docker image to pull from DockerHub.
        partition_label : str, optional
            The partition label used to run this object.
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares. Must be at least 2 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB). Must be at
                    least 4 MB.
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - instance_type : str
                The EC2 instance type to deploy to. Only available for jobs running on
                kubernetes.
            - source : str
                The body/text of the script.
            - cancel_timeout : int
                The amount of time (in seconds) to wait before forcibly terminating the
                script. When the script is cancelled, it is first sent a TERM signal.
                If the script is still running after the timeout, it is sent a KILL
                signal. Defaults to 0.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub.
            - partition_label : str
                The partition label used to run this object.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def post_r(
        self,
        name: str,
        source: str,
        parent_id: int | None = ...,
        user_context: str | None = ...,
        params: list[dict] | None = ...,
        arguments: dict | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        next_run_at: str | None = ...,
        time_zone: str | None = ...,
        hidden: bool | None = ...,
        target_project_id: int | None = ...,
        required_resources: dict | None = ...,
        instance_type: str | None = ...,
        cancel_timeout: int | None = ...,
        docker_image_tag: str | None = ...,
        partition_label: str | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Create an R Script

        Parameters
        ----------
        name : str
            The name of the script.
        source : str
            The body/text of the script.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        user_context : str, optional
            "runner" or "author", who to execute the script as when run as a template.
        params : list[dict], optional
            A definition of the parameters this script accepts in the arguments field.

            - name : str
                The variable's name as used within your code.
            - label : str
                The label to present to users when asking them for the value.
            - description : str
                A short sentence or fragment describing this parameter to the end user.
            - type : str
                The type of parameter. Valid options: string, multi_line_string,
                integer, float, bool, file, table, database, credential_aws,
                credential_redshift, or credential_custom
            - required : bool
                Whether this param is required.
            - value : str
                The value you would like to set this param to. Setting this value makes
                this parameter a fixed param.
            - default : str
                If an argument for this parameter is not defined, it will use this
                default value. Use true, True, t, y, yes, or 1 for true bool's or
                false, False, f, n, no, or 0 for false bool's. Cannot be used for
                parameters that are required or a credential type.
            - allowed_values : list[dict]
                The possible values this parameter can take, effectively making this an
                enumerable parameter. Allowed values is an array of hashes of the
                following format: `{label: 'Import', 'value': 'import'}`
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        next_run_at : str (time), optional
            The time of the next scheduled run.
        time_zone : str, optional
            The time zone of this script.
        hidden : bool, optional
            The hidden status of the item.
        target_project_id : int, optional
            Target project to which script outputs will be added.
        required_resources : dict, optional
            - cpu : int
                The number of CPU shares to allocate for the container. Each core has
                1000 shares. Must be at least 2 shares.
            - memory : int
                The amount of RAM to allocate for the container (in MB). Must be at
                least 4 MB.
            - disk_space : float (float)
                The amount of disk space, in GB, to allocate for the container. This
                space will be used to hold the git repo configured for the container
                and anything your container writes to /tmp or /data. Fractional values
                (e.g. 0.25) are supported.
        instance_type : str, optional
            The EC2 instance type to deploy to. Only available for jobs running on
            kubernetes.
        cancel_timeout : int, optional
            The amount of time (in seconds) to wait before forcibly terminating the
            script. When the script is cancelled, it is first sent a TERM signal. If
            the script is still running after the timeout, it is sent a KILL signal.
            Defaults to 0.
        docker_image_tag : str, optional
            The tag of the docker image to pull from DockerHub.
        partition_label : str, optional
            The partition label used to run this object.
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares. Must be at least 2 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB). Must be at
                    least 4 MB.
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - instance_type : str
                The EC2 instance type to deploy to. Only available for jobs running on
                kubernetes.
            - source : str
                The body/text of the script.
            - cancel_timeout : int
                The amount of time (in seconds) to wait before forcibly terminating the
                script. When the script is cancelled, it is first sent a TERM signal.
                If the script is still running after the timeout, it is sent a KILL
                signal. Defaults to 0.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub.
            - partition_label : str
                The partition label used to run this object.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def get_r(
        self,
        id: int,
    ) -> Response:
        """Get an R Script

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares. Must be at least 2 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB). Must be at
                    least 4 MB.
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - instance_type : str
                The EC2 instance type to deploy to. Only available for jobs running on
                kubernetes.
            - source : str
                The body/text of the script.
            - cancel_timeout : int
                The amount of time (in seconds) to wait before forcibly terminating the
                script. When the script is cancelled, it is first sent a TERM signal.
                If the script is still running after the timeout, it is sent a KILL
                signal. Defaults to 0.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub.
            - partition_label : str
                The partition label used to run this object.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def put_r(
        self,
        id: int,
        name: str,
        source: str,
        parent_id: int | None = ...,
        user_context: str | None = ...,
        params: list[dict] | None = ...,
        arguments: dict | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        next_run_at: str | None = ...,
        time_zone: str | None = ...,
        target_project_id: int | None = ...,
        required_resources: dict | None = ...,
        instance_type: str | None = ...,
        cancel_timeout: int | None = ...,
        docker_image_tag: str | None = ...,
        partition_label: str | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Replace all attributes of this R Script

        Parameters
        ----------
        id : int
            The ID for the script.
        name : str
            The name of the script.
        source : str
            The body/text of the script.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        user_context : str, optional
            "runner" or "author", who to execute the script as when run as a template.
        params : list[dict], optional
            A definition of the parameters this script accepts in the arguments field.

            - name : str
                The variable's name as used within your code.
            - label : str
                The label to present to users when asking them for the value.
            - description : str
                A short sentence or fragment describing this parameter to the end user.
            - type : str
                The type of parameter. Valid options: string, multi_line_string,
                integer, float, bool, file, table, database, credential_aws,
                credential_redshift, or credential_custom
            - required : bool
                Whether this param is required.
            - value : str
                The value you would like to set this param to. Setting this value makes
                this parameter a fixed param.
            - default : str
                If an argument for this parameter is not defined, it will use this
                default value. Use true, True, t, y, yes, or 1 for true bool's or
                false, False, f, n, no, or 0 for false bool's. Cannot be used for
                parameters that are required or a credential type.
            - allowed_values : list[dict]
                The possible values this parameter can take, effectively making this an
                enumerable parameter. Allowed values is an array of hashes of the
                following format: `{label: 'Import', 'value': 'import'}`
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        next_run_at : str (time), optional
            The time of the next scheduled run.
        time_zone : str, optional
            The time zone of this script.
        target_project_id : int, optional
            Target project to which script outputs will be added.
        required_resources : dict, optional
            - cpu : int
                The number of CPU shares to allocate for the container. Each core has
                1000 shares. Must be at least 2 shares.
            - memory : int
                The amount of RAM to allocate for the container (in MB). Must be at
                least 4 MB.
            - disk_space : float (float)
                The amount of disk space, in GB, to allocate for the container. This
                space will be used to hold the git repo configured for the container
                and anything your container writes to /tmp or /data. Fractional values
                (e.g. 0.25) are supported.
        instance_type : str, optional
            The EC2 instance type to deploy to. Only available for jobs running on
            kubernetes.
        cancel_timeout : int, optional
            The amount of time (in seconds) to wait before forcibly terminating the
            script. When the script is cancelled, it is first sent a TERM signal. If
            the script is still running after the timeout, it is sent a KILL signal.
            Defaults to 0.
        docker_image_tag : str, optional
            The tag of the docker image to pull from DockerHub.
        partition_label : str, optional
            The partition label used to run this object.
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares. Must be at least 2 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB). Must be at
                    least 4 MB.
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - instance_type : str
                The EC2 instance type to deploy to. Only available for jobs running on
                kubernetes.
            - source : str
                The body/text of the script.
            - cancel_timeout : int
                The amount of time (in seconds) to wait before forcibly terminating the
                script. When the script is cancelled, it is first sent a TERM signal.
                If the script is still running after the timeout, it is sent a KILL
                signal. Defaults to 0.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub.
            - partition_label : str
                The partition label used to run this object.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def patch_r(
        self,
        id: int,
        name: str | None = ...,
        parent_id: int | None = ...,
        user_context: str | None = ...,
        params: list[dict] | None = ...,
        arguments: dict | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        next_run_at: str | None = ...,
        time_zone: str | None = ...,
        target_project_id: int | None = ...,
        required_resources: dict | None = ...,
        instance_type: str | None = ...,
        source: str | None = ...,
        cancel_timeout: int | None = ...,
        docker_image_tag: str | None = ...,
        partition_label: str | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Update some attributes of this R Script

        Parameters
        ----------
        id : int
            The ID for the script.
        name : str, optional
            The name of the script.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        user_context : str, optional
            "runner" or "author", who to execute the script as when run as a template.
        params : list[dict], optional
            A definition of the parameters this script accepts in the arguments field.

            - name : str
                The variable's name as used within your code.
            - label : str
                The label to present to users when asking them for the value.
            - description : str
                A short sentence or fragment describing this parameter to the end user.
            - type : str
                The type of parameter. Valid options: string, multi_line_string,
                integer, float, bool, file, table, database, credential_aws,
                credential_redshift, or credential_custom
            - required : bool
                Whether this param is required.
            - value : str
                The value you would like to set this param to. Setting this value makes
                this parameter a fixed param.
            - default : str
                If an argument for this parameter is not defined, it will use this
                default value. Use true, True, t, y, yes, or 1 for true bool's or
                false, False, f, n, no, or 0 for false bool's. Cannot be used for
                parameters that are required or a credential type.
            - allowed_values : list[dict]
                The possible values this parameter can take, effectively making this an
                enumerable parameter. Allowed values is an array of hashes of the
                following format: `{label: 'Import', 'value': 'import'}`
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        next_run_at : str (time), optional
            The time of the next scheduled run.
        time_zone : str, optional
            The time zone of this script.
        target_project_id : int, optional
            Target project to which script outputs will be added.
        required_resources : dict, optional
            - cpu : int
                The number of CPU shares to allocate for the container. Each core has
                1000 shares. Must be at least 2 shares.
            - memory : int
                The amount of RAM to allocate for the container (in MB). Must be at
                least 4 MB.
            - disk_space : float (float)
                The amount of disk space, in GB, to allocate for the container. This
                space will be used to hold the git repo configured for the container
                and anything your container writes to /tmp or /data. Fractional values
                (e.g. 0.25) are supported.
        instance_type : str, optional
            The EC2 instance type to deploy to. Only available for jobs running on
            kubernetes.
        source : str, optional
            The body/text of the script.
        cancel_timeout : int, optional
            The amount of time (in seconds) to wait before forcibly terminating the
            script. When the script is cancelled, it is first sent a TERM signal. If
            the script is still running after the timeout, it is sent a KILL signal.
            Defaults to 0.
        docker_image_tag : str, optional
            The tag of the docker image to pull from DockerHub.
        partition_label : str, optional
            The partition label used to run this object.
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares. Must be at least 2 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB). Must be at
                    least 4 MB.
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - instance_type : str
                The EC2 instance type to deploy to. Only available for jobs running on
                kubernetes.
            - source : str
                The body/text of the script.
            - cancel_timeout : int
                The amount of time (in seconds) to wait before forcibly terminating the
                script. When the script is cancelled, it is first sent a TERM signal.
                If the script is still running after the timeout, it is sent a KILL
                signal. Defaults to 0.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub.
            - partition_label : str
                The partition label used to run this object.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def post_javascript(
        self,
        name: str,
        source: str,
        remote_host_id: int,
        credential_id: int,
        parent_id: int | None = ...,
        user_context: str | None = ...,
        params: list[dict] | None = ...,
        arguments: dict | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        next_run_at: str | None = ...,
        time_zone: str | None = ...,
        hidden: bool | None = ...,
        target_project_id: int | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Create a JavaScript Script

        Parameters
        ----------
        name : str
            The name of the script.
        source : str
            The body/text of the script.
        remote_host_id : int
            The remote host ID that this script will connect to.
        credential_id : int
            The credential that this script will use.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        user_context : str, optional
            "runner" or "author", who to execute the script as when run as a template.
        params : list[dict], optional
            A definition of the parameters this script accepts in the arguments field.

            - name : str
                The variable's name as used within your code.
            - label : str
                The label to present to users when asking them for the value.
            - description : str
                A short sentence or fragment describing this parameter to the end user.
            - type : str
                The type of parameter. Valid options: string, multi_line_string,
                integer, float, bool, file, table, database, credential_aws,
                credential_redshift, or credential_custom
            - required : bool
                Whether this param is required.
            - value : str
                The value you would like to set this param to. Setting this value makes
                this parameter a fixed param.
            - default : str
                If an argument for this parameter is not defined, it will use this
                default value. Use true, True, t, y, yes, or 1 for true bool's or
                false, False, f, n, no, or 0 for false bool's. Cannot be used for
                parameters that are required or a credential type.
            - allowed_values : list[dict]
                The possible values this parameter can take, effectively making this an
                enumerable parameter. Allowed values is an array of hashes of the
                following format: `{label: 'Import', 'value': 'import'}`
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        next_run_at : str (time), optional
            The time of the next scheduled run.
        time_zone : str, optional
            The time zone of this script.
        hidden : bool, optional
            The hidden status of the item.
        target_project_id : int, optional
            Target project to which script outputs will be added.
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - source : str
                The body/text of the script.
            - remote_host_id : int
                The remote host ID that this script will connect to.
            - credential_id : int
                The credential that this script will use.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def get_javascript(
        self,
        id: int,
    ) -> Response:
        """Get a JavaScript Script

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - source : str
                The body/text of the script.
            - remote_host_id : int
                The remote host ID that this script will connect to.
            - credential_id : int
                The credential that this script will use.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def put_javascript(
        self,
        id: int,
        name: str,
        source: str,
        remote_host_id: int,
        credential_id: int,
        parent_id: int | None = ...,
        user_context: str | None = ...,
        params: list[dict] | None = ...,
        arguments: dict | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        next_run_at: str | None = ...,
        time_zone: str | None = ...,
        target_project_id: int | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Replace all attributes of this JavaScript Script

        Parameters
        ----------
        id : int
            The ID for the script.
        name : str
            The name of the script.
        source : str
            The body/text of the script.
        remote_host_id : int
            The remote host ID that this script will connect to.
        credential_id : int
            The credential that this script will use.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        user_context : str, optional
            "runner" or "author", who to execute the script as when run as a template.
        params : list[dict], optional
            A definition of the parameters this script accepts in the arguments field.

            - name : str
                The variable's name as used within your code.
            - label : str
                The label to present to users when asking them for the value.
            - description : str
                A short sentence or fragment describing this parameter to the end user.
            - type : str
                The type of parameter. Valid options: string, multi_line_string,
                integer, float, bool, file, table, database, credential_aws,
                credential_redshift, or credential_custom
            - required : bool
                Whether this param is required.
            - value : str
                The value you would like to set this param to. Setting this value makes
                this parameter a fixed param.
            - default : str
                If an argument for this parameter is not defined, it will use this
                default value. Use true, True, t, y, yes, or 1 for true bool's or
                false, False, f, n, no, or 0 for false bool's. Cannot be used for
                parameters that are required or a credential type.
            - allowed_values : list[dict]
                The possible values this parameter can take, effectively making this an
                enumerable parameter. Allowed values is an array of hashes of the
                following format: `{label: 'Import', 'value': 'import'}`
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        next_run_at : str (time), optional
            The time of the next scheduled run.
        time_zone : str, optional
            The time zone of this script.
        target_project_id : int, optional
            Target project to which script outputs will be added.
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - source : str
                The body/text of the script.
            - remote_host_id : int
                The remote host ID that this script will connect to.
            - credential_id : int
                The credential that this script will use.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def patch_javascript(
        self,
        id: int,
        name: str | None = ...,
        parent_id: int | None = ...,
        user_context: str | None = ...,
        params: list[dict] | None = ...,
        arguments: dict | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        next_run_at: str | None = ...,
        time_zone: str | None = ...,
        target_project_id: int | None = ...,
        source: str | None = ...,
        remote_host_id: int | None = ...,
        credential_id: int | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Update some attributes of this JavaScript Script

        Parameters
        ----------
        id : int
            The ID for the script.
        name : str, optional
            The name of the script.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        user_context : str, optional
            "runner" or "author", who to execute the script as when run as a template.
        params : list[dict], optional
            A definition of the parameters this script accepts in the arguments field.

            - name : str
                The variable's name as used within your code.
            - label : str
                The label to present to users when asking them for the value.
            - description : str
                A short sentence or fragment describing this parameter to the end user.
            - type : str
                The type of parameter. Valid options: string, multi_line_string,
                integer, float, bool, file, table, database, credential_aws,
                credential_redshift, or credential_custom
            - required : bool
                Whether this param is required.
            - value : str
                The value you would like to set this param to. Setting this value makes
                this parameter a fixed param.
            - default : str
                If an argument for this parameter is not defined, it will use this
                default value. Use true, True, t, y, yes, or 1 for true bool's or
                false, False, f, n, no, or 0 for false bool's. Cannot be used for
                parameters that are required or a credential type.
            - allowed_values : list[dict]
                The possible values this parameter can take, effectively making this an
                enumerable parameter. Allowed values is an array of hashes of the
                following format: `{label: 'Import', 'value': 'import'}`
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        next_run_at : str (time), optional
            The time of the next scheduled run.
        time_zone : str, optional
            The time zone of this script.
        target_project_id : int, optional
            Target project to which script outputs will be added.
        source : str, optional
            The body/text of the script.
        remote_host_id : int, optional
            The remote host ID that this script will connect to.
        credential_id : int, optional
            The credential that this script will use.
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - source : str
                The body/text of the script.
            - remote_host_id : int
                The remote host ID that this script will connect to.
            - credential_id : int
                The credential that this script will use.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def list_custom(
        self,
        from_template_id: str | None = ...,
        author: str | None = ...,
        status: str | None = ...,
        hidden: bool | None = ...,
        archived: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Custom Scripts

        Parameters
        ----------
        from_template_id : str, optional
            If specified, return scripts based on the template with this ID. Specify
            multiple IDs as a comma-separated list.
        author : str, optional
            If specified, return items from any of these authors. It accepts a comma-
            separated list of user IDs.
        status : str, optional
            If specified, returns items with one of these statuses. It accepts a comma-
            separated list, possible values are 'running', 'failed', 'succeeded',
            'idle', 'scheduled'.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.
        archived : str, optional
            The archival status of the requested item(s).
        limit : int, optional
            Number of results to return. Defaults to its maximum of 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to updated_at. Must be
            one of: updated_at, name, created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to asc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g Custom)
            - backing_script_type : str
                The type of the script backing this template (e.g Python)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - from_template_id : int
                The ID of the template script.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - archived : str
                The archival status of the requested item(s).
            - last_successful_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
        """
        ...

    def post_custom(
        self,
        from_template_id: int,
        name: str | None = ...,
        parent_id: int | None = ...,
        arguments: dict | None = ...,
        remote_host_id: int | None = ...,
        credential_id: int | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        time_zone: str | None = ...,
        hidden: bool | None = ...,
        target_project_id: int | None = ...,
        required_resources: dict | None = ...,
        partition_label: str | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Create a Custom Script

        Parameters
        ----------
        from_template_id : int
            The ID of the template script.
        name : str, optional
            The name of the script.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        remote_host_id : int, optional
            The remote host ID that this script will connect to.
        credential_id : int, optional
            The credential that this script will use.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        time_zone : str, optional
            The time zone of this script.
        hidden : bool, optional
            The hidden status of the item.
        target_project_id : int, optional
            Target project to which script outputs will be added.
        required_resources : dict, optional
            - cpu : int
                The number of CPU shares to allocate for the container. Each core has
                1000 shares.
            - memory : int
                The amount of RAM to allocate for the container (in MB).
            - disk_space : float (float)
                The amount of disk space, in GB, to allocate for the container. This
                space will be used to hold the git repo configured for the container
                and anything your container writes to /tmp or /data. Fractional values
                (e.g. 0.25) are supported.
        partition_label : str, optional
            The partition label used to run this object. Only applicable for jobs using
            Docker.
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - from_template_aliases : list[dict]
                An array of the aliases of the template script.

                - id : int
                    The id of the Alias object.
                - object_id : int
                    The id of the object
                - alias : str
                    The alias of the object
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g Custom)
            - backing_script_type : str
                The type of the script backing this template (e.g Python)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template script.
            - ui_report_url : int
                The url of the custom HTML.
            - ui_report_id : int
                The id of the report with the custom HTML.
            - ui_report_provide_api_key : bool
                Whether the ui report requests an API Key from the report viewer.
            - template_script_name : str
                The name of the template script.
            - template_note : str
                The template's note.
            - remote_host_id : int
                The remote host ID that this script will connect to.
            - credential_id : int
                The credential that this script will use.
            - code_preview : str
                The code that this script will run with arguments inserted.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - target_project_id : int
                Target project to which script outputs will be added.
            - last_successful_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB).
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - partition_label : str
                The partition label used to run this object. Only applicable for jobs
                using Docker.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def get_custom(
        self,
        id: int,
    ) -> Response:
        """Get a Custom Script

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - from_template_aliases : list[dict]
                An array of the aliases of the template script.

                - id : int
                    The id of the Alias object.
                - object_id : int
                    The id of the object
                - alias : str
                    The alias of the object
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g Custom)
            - backing_script_type : str
                The type of the script backing this template (e.g Python)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template script.
            - ui_report_url : int
                The url of the custom HTML.
            - ui_report_id : int
                The id of the report with the custom HTML.
            - ui_report_provide_api_key : bool
                Whether the ui report requests an API Key from the report viewer.
            - template_script_name : str
                The name of the template script.
            - template_note : str
                The template's note.
            - remote_host_id : int
                The remote host ID that this script will connect to.
            - credential_id : int
                The credential that this script will use.
            - code_preview : str
                The code that this script will run with arguments inserted.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - target_project_id : int
                Target project to which script outputs will be added.
            - last_successful_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB).
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - partition_label : str
                The partition label used to run this object. Only applicable for jobs
                using Docker.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def put_custom(
        self,
        id: int,
        name: str | None = ...,
        parent_id: int | None = ...,
        arguments: dict | None = ...,
        remote_host_id: int | None = ...,
        credential_id: int | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        time_zone: str | None = ...,
        target_project_id: int | None = ...,
        required_resources: dict | None = ...,
        partition_label: str | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Replace all attributes of this Custom Script

        Parameters
        ----------
        id : int
            The ID for the script.
        name : str, optional
            The name of the script.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        remote_host_id : int, optional
            The remote host ID that this script will connect to.
        credential_id : int, optional
            The credential that this script will use.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        time_zone : str, optional
            The time zone of this script.
        target_project_id : int, optional
            Target project to which script outputs will be added.
        required_resources : dict, optional
            - cpu : int
                The number of CPU shares to allocate for the container. Each core has
                1000 shares.
            - memory : int
                The amount of RAM to allocate for the container (in MB).
            - disk_space : float (float)
                The amount of disk space, in GB, to allocate for the container. This
                space will be used to hold the git repo configured for the container
                and anything your container writes to /tmp or /data. Fractional values
                (e.g. 0.25) are supported.
        partition_label : str, optional
            The partition label used to run this object. Only applicable for jobs using
            Docker.
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - from_template_aliases : list[dict]
                An array of the aliases of the template script.

                - id : int
                    The id of the Alias object.
                - object_id : int
                    The id of the object
                - alias : str
                    The alias of the object
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g Custom)
            - backing_script_type : str
                The type of the script backing this template (e.g Python)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template script.
            - ui_report_url : int
                The url of the custom HTML.
            - ui_report_id : int
                The id of the report with the custom HTML.
            - ui_report_provide_api_key : bool
                Whether the ui report requests an API Key from the report viewer.
            - template_script_name : str
                The name of the template script.
            - template_note : str
                The template's note.
            - remote_host_id : int
                The remote host ID that this script will connect to.
            - credential_id : int
                The credential that this script will use.
            - code_preview : str
                The code that this script will run with arguments inserted.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - target_project_id : int
                Target project to which script outputs will be added.
            - last_successful_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB).
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - partition_label : str
                The partition label used to run this object. Only applicable for jobs
                using Docker.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def patch_custom(
        self,
        id: int,
        name: str | None = ...,
        parent_id: int | None = ...,
        arguments: dict | None = ...,
        remote_host_id: int | None = ...,
        credential_id: int | None = ...,
        schedule: dict | None = ...,
        notifications: dict | None = ...,
        time_zone: str | None = ...,
        target_project_id: int | None = ...,
        required_resources: dict | None = ...,
        partition_label: str | None = ...,
        running_as_id: int | None = ...,
    ) -> Response:
        """Update some attributes of this Custom Script

        Parameters
        ----------
        id : int
            The ID for the script.
        name : str, optional
            The name of the script.
        parent_id : int, optional
            The ID of the parent job that will trigger this script
        arguments : dict, optional
            Parameter-value pairs to use when running this script. Only settable if
            this script has defined parameters.
        remote_host_id : int, optional
            The remote host ID that this script will connect to.
        credential_id : int, optional
            The credential that this script will use.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - success_email_from_name : str
                Name from which success emails are sent; defaults to "Civis."
            - success_email_reply_to : str
                Address for replies to success emails; defaults to the author of the
                job.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on. Defaults to user's preferences.
            - failure_on : bool
                If failure email notifications are on. Defaults to user's preferences.
        time_zone : str, optional
            The time zone of this script.
        target_project_id : int, optional
            Target project to which script outputs will be added.
        required_resources : dict, optional
            - cpu : int
                The number of CPU shares to allocate for the container. Each core has
                1000 shares.
            - memory : int
                The amount of RAM to allocate for the container (in MB).
            - disk_space : float (float)
                The amount of disk space, in GB, to allocate for the container. This
                space will be used to hold the git repo configured for the container
                and anything your container writes to /tmp or /data. Fractional values
                (e.g. 0.25) are supported.
        partition_label : str, optional
            The partition label used to run this object. Only applicable for jobs using
            Docker.
        running_as_id : int, optional
            The ID of the runner of this script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - from_template_aliases : list[dict]
                An array of the aliases of the template script.

                - id : int
                    The id of the Alias object.
                - object_id : int
                    The id of the object
                - alias : str
                    The alias of the object
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g Custom)
            - backing_script_type : str
                The type of the script backing this template (e.g Python)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template script.
            - ui_report_url : int
                The url of the custom HTML.
            - ui_report_id : int
                The id of the report with the custom HTML.
            - ui_report_provide_api_key : bool
                Whether the ui report requests an API Key from the report viewer.
            - template_script_name : str
                The name of the template script.
            - template_note : str
                The template's note.
            - remote_host_id : int
                The remote host ID that this script will connect to.
            - credential_id : int
                The credential that this script will use.
            - code_preview : str
                The code that this script will run with arguments inserted.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - target_project_id : int
                Target project to which script outputs will be added.
            - last_successful_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB).
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - partition_label : str
                The partition label used to run this object. Only applicable for jobs
                using Docker.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def post_sql_runs(
        self,
        id: int,
    ) -> Response:
        """Start a run

        Parameters
        ----------
        id : int
            The ID of the SQL job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - sql_id : int
                The ID of the SQL job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
            - output : list[dict]
                A list of the outputs of this script.

                - output_name : str
                    The name of the output file.
                - file_id : int
                    The unique ID of the output file.
                - path : str
                    The temporary link to download this output file, valid for 36
                    hours.
            - output_cached_on : str (time)
                The time that the output was originally exported, if a cache entry was
                used by the run.
        """
        ...

    def list_sql_runs(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List runs for the given SQL job

        Parameters
        ----------
        id : int
            The ID of the SQL job.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the run.
            - sql_id : int
                The ID of the SQL job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
            - output : list[dict]
                A list of the outputs of this script.

                - output_name : str
                    The name of the output file.
                - file_id : int
                    The unique ID of the output file.
                - path : str
                    The temporary link to download this output file, valid for 36
                    hours.
            - output_cached_on : str (time)
                The time that the output was originally exported, if a cache entry was
                used by the run.
        """
        ...

    def get_sql_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Check status of a run

        Parameters
        ----------
        id : int
            The ID of the SQL job.
        run_id : int
            The ID of the run.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - sql_id : int
                The ID of the SQL job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
            - output : list[dict]
                A list of the outputs of this script.

                - output_name : str
                    The name of the output file.
                - file_id : int
                    The unique ID of the output file.
                - path : str
                    The temporary link to download this output file, valid for 36
                    hours.
            - output_cached_on : str (time)
                The time that the output was originally exported, if a cache entry was
                used by the run.
        """
        ...

    def delete_sql_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the SQL job.
        run_id : int
            The ID of the run.

        Returns
        -------
        None
            Response code 202: success
        """
        ...

    def patch_sql_runs(
        self,
        id: int,
        run_id: int,
        error: str | None = ...,
    ) -> Response:
        """Update the given run

        Parameters
        ----------
        id : int
            ID of the Job
        run_id : int
            ID of the Run
        error : str, optional
            The error message to update

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_sql_runs_logs(
        self,
        id: int,
        run_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a run

        Parameters
        ----------
        id : int
            The ID of the SQL job.
        run_id : int
            The ID of the run.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def post_containers_runs(
        self,
        id: int,
    ) -> Response:
        """Start a run

        Parameters
        ----------
        id : int
            The ID of the Container job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - container_id : int
                The ID of the Container job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
            - max_memory_usage : float (float)
                If the run has finished, the maximum amount of memory used during the
                run, in MB.
            - max_cpu_usage : float (float)
                If the run has finished, the maximum amount of cpu used during the run,
                in millicores.
        """
        ...

    def list_containers_runs(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List runs for the given Container job

        Parameters
        ----------
        id : int
            The ID of the Container job.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the run.
            - container_id : int
                The ID of the Container job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
            - max_memory_usage : float (float)
                If the run has finished, the maximum amount of memory used during the
                run, in MB.
            - max_cpu_usage : float (float)
                If the run has finished, the maximum amount of cpu used during the run,
                in millicores.
        """
        ...

    def get_containers_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Check status of a run

        Parameters
        ----------
        id : int
            The ID of the Container job.
        run_id : int
            The ID of the run.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - container_id : int
                The ID of the Container job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
            - max_memory_usage : float (float)
                If the run has finished, the maximum amount of memory used during the
                run, in MB.
            - max_cpu_usage : float (float)
                If the run has finished, the maximum amount of cpu used during the run,
                in millicores.
        """
        ...

    def delete_containers_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the Container job.
        run_id : int
            The ID of the run.

        Returns
        -------
        None
            Response code 202: success
        """
        ...

    def post_python3_runs(
        self,
        id: int,
    ) -> Response:
        """Start a run

        Parameters
        ----------
        id : int
            The ID of the Python job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - python_id : int
                The ID of the Python job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
            - max_memory_usage : float (float)
                If the run has finished, the maximum amount of memory used during the
                run, in MB.
            - max_cpu_usage : float (float)
                If the run has finished, the maximum amount of cpu used during the run,
                in millicores.
        """
        ...

    def list_python3_runs(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List runs for the given Python job

        Parameters
        ----------
        id : int
            The ID of the Python job.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the run.
            - python_id : int
                The ID of the Python job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
            - max_memory_usage : float (float)
                If the run has finished, the maximum amount of memory used during the
                run, in MB.
            - max_cpu_usage : float (float)
                If the run has finished, the maximum amount of cpu used during the run,
                in millicores.
        """
        ...

    def get_python3_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Check status of a run

        Parameters
        ----------
        id : int
            The ID of the Python job.
        run_id : int
            The ID of the run.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - python_id : int
                The ID of the Python job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
            - max_memory_usage : float (float)
                If the run has finished, the maximum amount of memory used during the
                run, in MB.
            - max_cpu_usage : float (float)
                If the run has finished, the maximum amount of cpu used during the run,
                in millicores.
        """
        ...

    def delete_python3_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the Python job.
        run_id : int
            The ID of the run.

        Returns
        -------
        None
            Response code 202: success
        """
        ...

    def patch_python3_runs(
        self,
        id: int,
        run_id: int,
        error: str | None = ...,
    ) -> Response:
        """Update the given run

        Parameters
        ----------
        id : int
            ID of the Job
        run_id : int
            ID of the Run
        error : str, optional
            The error message to update

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_python3_runs_logs(
        self,
        id: int,
        run_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a run

        Parameters
        ----------
        id : int
            The ID of the Python job.
        run_id : int
            The ID of the run.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def post_r_runs(
        self,
        id: int,
    ) -> Response:
        """Start a run

        Parameters
        ----------
        id : int
            The ID of the R job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - r_id : int
                The ID of the R job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
            - max_memory_usage : float (float)
                If the run has finished, the maximum amount of memory used during the
                run, in MB.
            - max_cpu_usage : float (float)
                If the run has finished, the maximum amount of cpu used during the run,
                in millicores.
        """
        ...

    def list_r_runs(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List runs for the given R job

        Parameters
        ----------
        id : int
            The ID of the R job.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the run.
            - r_id : int
                The ID of the R job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
            - max_memory_usage : float (float)
                If the run has finished, the maximum amount of memory used during the
                run, in MB.
            - max_cpu_usage : float (float)
                If the run has finished, the maximum amount of cpu used during the run,
                in millicores.
        """
        ...

    def get_r_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Check status of a run

        Parameters
        ----------
        id : int
            The ID of the R job.
        run_id : int
            The ID of the run.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - r_id : int
                The ID of the R job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
            - max_memory_usage : float (float)
                If the run has finished, the maximum amount of memory used during the
                run, in MB.
            - max_cpu_usage : float (float)
                If the run has finished, the maximum amount of cpu used during the run,
                in millicores.
        """
        ...

    def delete_r_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the R job.
        run_id : int
            The ID of the run.

        Returns
        -------
        None
            Response code 202: success
        """
        ...

    def patch_r_runs(
        self,
        id: int,
        run_id: int,
        error: str | None = ...,
    ) -> Response:
        """Update the given run

        Parameters
        ----------
        id : int
            ID of the Job
        run_id : int
            ID of the Run
        error : str, optional
            The error message to update

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_r_runs_logs(
        self,
        id: int,
        run_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a run

        Parameters
        ----------
        id : int
            The ID of the R job.
        run_id : int
            The ID of the run.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def list_dbt_runs_logs(
        self,
        id: int,
        run_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a run

        Parameters
        ----------
        id : int
            The ID of the dbt job.
        run_id : int
            The ID of the run.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def post_javascript_runs(
        self,
        id: int,
    ) -> Response:
        """Start a run

        Parameters
        ----------
        id : int
            The ID of the Javascript job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - javascript_id : int
                The ID of the Javascript job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def list_javascript_runs(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List runs for the given Javascript job

        Parameters
        ----------
        id : int
            The ID of the Javascript job.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the run.
            - javascript_id : int
                The ID of the Javascript job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def get_javascript_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Check status of a run

        Parameters
        ----------
        id : int
            The ID of the Javascript job.
        run_id : int
            The ID of the run.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - javascript_id : int
                The ID of the Javascript job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
        """
        ...

    def delete_javascript_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the Javascript job.
        run_id : int
            The ID of the run.

        Returns
        -------
        None
            Response code 202: success
        """
        ...

    def patch_javascript_runs(
        self,
        id: int,
        run_id: int,
        error: str | None = ...,
    ) -> Response:
        """Update the given run

        Parameters
        ----------
        id : int
            ID of the Job
        run_id : int
            ID of the Run
        error : str, optional
            The error message to update

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_javascript_runs_logs(
        self,
        id: int,
        run_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a run

        Parameters
        ----------
        id : int
            The ID of the Javascript job.
        run_id : int
            The ID of the run.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def post_custom_runs(
        self,
        id: int,
    ) -> Response:
        """Start a run

        Parameters
        ----------
        id : int
            The ID of the Custom job.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - custom_id : int
                The ID of the Custom job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
            - max_memory_usage : float (float)
                If the run has finished, the maximum amount of memory used during the
                run, in MB. Only available if the backing script is a Python, R, or
                container script.
            - max_cpu_usage : float (float)
                If the run has finished, the maximum amount of cpu used during the run,
                in millicores. Only available if the backing script is a Python, R, or
                container script.
        """
        ...

    def list_custom_runs(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List runs for the given Custom job

        Parameters
        ----------
        id : int
            The ID of the Custom job.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 100.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the run.
            - custom_id : int
                The ID of the Custom job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
            - max_memory_usage : float (float)
                If the run has finished, the maximum amount of memory used during the
                run, in MB. Only available if the backing script is a Python, R, or
                container script.
            - max_cpu_usage : float (float)
                If the run has finished, the maximum amount of cpu used during the run,
                in millicores. Only available if the backing script is a Python, R, or
                container script.
        """
        ...

    def get_custom_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Check status of a run

        Parameters
        ----------
        id : int
            The ID of the Custom job.
        run_id : int
            The ID of the run.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the run.
            - custom_id : int
                The ID of the Custom job.
            - state : str
                The state of the run, one of 'queued' 'running' 'succeeded' 'failed' or
                'cancelled'.
            - is_cancel_requested : bool
                True if run cancel requested, else false.
            - created_at : str (time)
                The time the run was created.
            - started_at : str (time)
                The time the run started at.
            - finished_at : str (time)
                The time the run completed.
            - error : str
                The error, if any, returned by the run.
            - max_memory_usage : float (float)
                If the run has finished, the maximum amount of memory used during the
                run, in MB. Only available if the backing script is a Python, R, or
                container script.
            - max_cpu_usage : float (float)
                If the run has finished, the maximum amount of cpu used during the run,
                in millicores. Only available if the backing script is a Python, R, or
                container script.
        """
        ...

    def delete_custom_runs(
        self,
        id: int,
        run_id: int,
    ) -> Response:
        """Cancel a run

        Parameters
        ----------
        id : int
            The ID of the Custom job.
        run_id : int
            The ID of the run.

        Returns
        -------
        None
            Response code 202: success
        """
        ...

    def list_custom_runs_logs(
        self,
        id: int,
        run_id: int,
        last_id: int | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a run

        Parameters
        ----------
        id : int
            The ID of the Custom job.
        run_id : int
            The ID of the run.
        last_id : int, optional
            The ID of the last log message received. Log entries with this ID value or
            lower will be omitted.Logs are sorted by ID if this value is provided, and
            are otherwise sorted by createdAt.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the log.
            - created_at : str (date-time)
                The time the log was created.
            - message : str
                The log message.
            - level : str
                The level of the log. One of unknown,fatal,error,warn,info,debug.
        """
        ...

    def list_sql_runs_outputs(
        self,
        id: int,
        run_id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List the outputs for a run

        Parameters
        ----------
        id : int
            The ID of the sql script.
        run_id : int
            The ID of the run.
        limit : int, optional
            Number of results to return. Defaults to its maximum of 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to created_at. Must be
            one of: created_at, id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - object_type : str
                The type of the output. Valid values are File, Table, Report, Project,
                Credential, or JSONValue
            - object_id : int
                The ID of the output.
            - name : str
                The name of the output.
            - link : str
                The hypermedia link to the output.
            - value : str
        """
        ...

    def list_containers_runs_outputs(
        self,
        id: int,
        run_id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List the outputs for a run

        Parameters
        ----------
        id : int
            The ID of the container script.
        run_id : int
            The ID of the run.
        limit : int, optional
            Number of results to return. Defaults to its maximum of 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to created_at. Must be
            one of: created_at, id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - object_type : str
                The type of the output. Valid values are File, Table, Report, Project,
                Credential, or JSONValue
            - object_id : int
                The ID of the output.
            - name : str
                The name of the output.
            - link : str
                The hypermedia link to the output.
            - value : str
        """
        ...

    def post_containers_runs_outputs(
        self,
        id: int,
        run_id: int,
        object_type: str,
        object_id: int,
    ) -> Response:
        """Add an output for a run

        Parameters
        ----------
        id : int
            The ID of the container script.
        run_id : int
            The ID of the run.
        object_type : str
            The type of the output. Valid values are File, Table, Report, Project,
            Credential, or JSONValue
        object_id : int
            The ID of the output.

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                The type of the output. Valid values are File, Table, Report, Project,
                Credential, or JSONValue
            - object_id : int
                The ID of the output.
            - name : str
                The name of the output.
            - link : str
                The hypermedia link to the output.
            - value : str
        """
        ...

    def list_python3_runs_outputs(
        self,
        id: int,
        run_id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List the outputs for a run

        Parameters
        ----------
        id : int
            The ID of the python script.
        run_id : int
            The ID of the run.
        limit : int, optional
            Number of results to return. Defaults to its maximum of 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to created_at. Must be
            one of: created_at, id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - object_type : str
                The type of the output. Valid values are File, Table, Report, Project,
                Credential, or JSONValue
            - object_id : int
                The ID of the output.
            - name : str
                The name of the output.
            - link : str
                The hypermedia link to the output.
            - value : str
        """
        ...

    def post_python3_runs_outputs(
        self,
        id: int,
        run_id: int,
        object_type: str,
        object_id: int,
    ) -> Response:
        """Add an output for a run

        Parameters
        ----------
        id : int
            The ID of the python script.
        run_id : int
            The ID of the run.
        object_type : str
            The type of the output. Valid values are File, Table, Report, Project,
            Credential, or JSONValue
        object_id : int
            The ID of the output.

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                The type of the output. Valid values are File, Table, Report, Project,
                Credential, or JSONValue
            - object_id : int
                The ID of the output.
            - name : str
                The name of the output.
            - link : str
                The hypermedia link to the output.
            - value : str
        """
        ...

    def list_r_runs_outputs(
        self,
        id: int,
        run_id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List the outputs for a run

        Parameters
        ----------
        id : int
            The ID of the r script.
        run_id : int
            The ID of the run.
        limit : int, optional
            Number of results to return. Defaults to its maximum of 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to created_at. Must be
            one of: created_at, id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - object_type : str
                The type of the output. Valid values are File, Table, Report, Project,
                Credential, or JSONValue
            - object_id : int
                The ID of the output.
            - name : str
                The name of the output.
            - link : str
                The hypermedia link to the output.
            - value : str
        """
        ...

    def post_r_runs_outputs(
        self,
        id: int,
        run_id: int,
        object_type: str,
        object_id: int,
    ) -> Response:
        """Add an output for a run

        Parameters
        ----------
        id : int
            The ID of the r script.
        run_id : int
            The ID of the run.
        object_type : str
            The type of the output. Valid values are File, Table, Report, Project,
            Credential, or JSONValue
        object_id : int
            The ID of the output.

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                The type of the output. Valid values are File, Table, Report, Project,
                Credential, or JSONValue
            - object_id : int
                The ID of the output.
            - name : str
                The name of the output.
            - link : str
                The hypermedia link to the output.
            - value : str
        """
        ...

    def list_javascript_runs_outputs(
        self,
        id: int,
        run_id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List the outputs for a run

        Parameters
        ----------
        id : int
            The ID of the javascript script.
        run_id : int
            The ID of the run.
        limit : int, optional
            Number of results to return. Defaults to its maximum of 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to created_at. Must be
            one of: created_at, id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - object_type : str
                The type of the output. Valid values are File, Table, Report, Project,
                Credential, or JSONValue
            - object_id : int
                The ID of the output.
            - name : str
                The name of the output.
            - link : str
                The hypermedia link to the output.
            - value : str
        """
        ...

    def post_javascript_runs_outputs(
        self,
        id: int,
        run_id: int,
        object_type: str,
        object_id: int,
    ) -> Response:
        """Add an output for a run

        Parameters
        ----------
        id : int
            The ID of the javascript script.
        run_id : int
            The ID of the run.
        object_type : str
            The type of the output. Valid values are File, Table, Report, Project,
            Credential, or JSONValue
        object_id : int
            The ID of the output.

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                The type of the output. Valid values are File, Table, Report, Project,
                Credential, or JSONValue
            - object_id : int
                The ID of the output.
            - name : str
                The name of the output.
            - link : str
                The hypermedia link to the output.
            - value : str
        """
        ...

    def list_custom_runs_outputs(
        self,
        id: int,
        run_id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List the outputs for a run

        Parameters
        ----------
        id : int
            The ID of the custom script.
        run_id : int
            The ID of the run.
        limit : int, optional
            Number of results to return. Defaults to its maximum of 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to created_at. Must be
            one of: created_at, id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - object_type : str
                The type of the output. Valid values are File, Table, Report, Project,
                Credential, or JSONValue
            - object_id : int
                The ID of the output.
            - name : str
                The name of the output.
            - link : str
                The hypermedia link to the output.
            - value : str
        """
        ...

    def post_custom_runs_outputs(
        self,
        id: int,
        run_id: int,
        object_type: str,
        object_id: int,
    ) -> Response:
        """Add an output for a run

        Parameters
        ----------
        id : int
            The ID of the custom script.
        run_id : int
            The ID of the run.
        object_type : str
            The type of the output. Valid values are File, Table, Report, Project,
            Credential, or JSONValue
        object_id : int
            The ID of the output.

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                The type of the output. Valid values are File, Table, Report, Project,
                Credential, or JSONValue
            - object_id : int
                The ID of the output.
            - name : str
                The name of the output.
            - link : str
                The hypermedia link to the output.
            - value : str
        """
        ...

    def patch_container_runs(
        self,
        id: int,
        run_id: int,
        error: str | None = ...,
    ) -> Response:
        """Update the given run

        Parameters
        ----------
        id : int
            ID of the Job
        run_id : int
            ID of the Run
        error : str, optional
            The error message to update

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_sql_git(
        self,
        id: int,
    ) -> Response:
        """Get the git metadata attached to an item

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def put_sql_git(
        self,
        id: int,
        git_ref: str | None = ...,
        git_branch: str | None = ...,
        git_path: str | None = ...,
        git_repo_url: str | None = ...,
        git_ref_type: str | None = ...,
        pull_from_git: bool | None = ...,
    ) -> Response:
        """Attach an item to a file in a git repo

        Parameters
        ----------
        id : int
            The ID of the file.
        git_ref : str, optional
            A git reference specifying an unambiguous version of the file. Can be a
            branch name, or the full or shortened SHA of a commit.
        git_branch : str, optional
            The git branch that the file is on.
        git_path : str, optional
            The path of the file in the repository.
        git_repo_url : str, optional
            The URL of the git repository.
        git_ref_type : str, optional
            Specifies if the file is versioned by branch or tag.
        pull_from_git : bool, optional
            Automatically pull latest commit from git. Only works for scripts.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def patch_sql_git(
        self,
        id: int,
        git_ref: str | None = ...,
        git_branch: str | None = ...,
        git_path: str | None = ...,
        git_repo_url: str | None = ...,
        git_ref_type: str | None = ...,
        pull_from_git: bool | None = ...,
    ) -> Response:
        """Update an attached git file

        Parameters
        ----------
        id : int
            The ID of the file.
        git_ref : str, optional
            A git reference specifying an unambiguous version of the file. Can be a
            branch name, or the full or shortened SHA of a commit.
        git_branch : str, optional
            The git branch that the file is on.
        git_path : str, optional
            The path of the file in the repository.
        git_repo_url : str, optional
            The URL of the git repository.
        git_ref_type : str, optional
            Specifies if the file is versioned by branch or tag.
        pull_from_git : bool, optional
            Automatically pull latest commit from git. Only works for scripts.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def list_sql_git_commits(
        self,
        id: int,
    ) -> Response:
        """Get the git commits for an item on the current branch

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - commit_hash : str
                The SHA of the commit.
            - author_name : str
                The name of the commit's author.
            - date : str (time)
                The commit's timestamp.
            - message : str
                The commit message.
        """
        ...

    def post_sql_git_commits(
        self,
        id: int,
        content: str,
        message: str,
        file_hash: str,
    ) -> Response:
        """Commit and push a new version of the file

        Parameters
        ----------
        id : int
            The ID of the file.
        content : str
            The contents to commit to the file.
        message : str
            A commit message describing the changes being made.
        file_hash : str
            The full SHA of the file being replaced.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def get_sql_git_commits(
        self,
        id: int,
        commit_hash: str,
    ) -> Response:
        """Get file contents at git ref

        Parameters
        ----------
        id : int
            The ID of the file.
        commit_hash : str
            The SHA (full or shortened) of the desired git commit.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def post_sql_git_checkout_latest(
        self,
        id: int,
    ) -> Response:
        """Checkout latest commit on the current branch of a script or workflow

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def post_sql_git_checkout(
        self,
        id: int,
    ) -> Response:
        """Checkout content that the existing git_ref points to and save to the object

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def list_javascript_git(
        self,
        id: int,
    ) -> Response:
        """Get the git metadata attached to an item

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def put_javascript_git(
        self,
        id: int,
        git_ref: str | None = ...,
        git_branch: str | None = ...,
        git_path: str | None = ...,
        git_repo_url: str | None = ...,
        git_ref_type: str | None = ...,
        pull_from_git: bool | None = ...,
    ) -> Response:
        """Attach an item to a file in a git repo

        Parameters
        ----------
        id : int
            The ID of the file.
        git_ref : str, optional
            A git reference specifying an unambiguous version of the file. Can be a
            branch name, or the full or shortened SHA of a commit.
        git_branch : str, optional
            The git branch that the file is on.
        git_path : str, optional
            The path of the file in the repository.
        git_repo_url : str, optional
            The URL of the git repository.
        git_ref_type : str, optional
            Specifies if the file is versioned by branch or tag.
        pull_from_git : bool, optional
            Automatically pull latest commit from git. Only works for scripts.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def patch_javascript_git(
        self,
        id: int,
        git_ref: str | None = ...,
        git_branch: str | None = ...,
        git_path: str | None = ...,
        git_repo_url: str | None = ...,
        git_ref_type: str | None = ...,
        pull_from_git: bool | None = ...,
    ) -> Response:
        """Update an attached git file

        Parameters
        ----------
        id : int
            The ID of the file.
        git_ref : str, optional
            A git reference specifying an unambiguous version of the file. Can be a
            branch name, or the full or shortened SHA of a commit.
        git_branch : str, optional
            The git branch that the file is on.
        git_path : str, optional
            The path of the file in the repository.
        git_repo_url : str, optional
            The URL of the git repository.
        git_ref_type : str, optional
            Specifies if the file is versioned by branch or tag.
        pull_from_git : bool, optional
            Automatically pull latest commit from git. Only works for scripts.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def list_javascript_git_commits(
        self,
        id: int,
    ) -> Response:
        """Get the git commits for an item on the current branch

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - commit_hash : str
                The SHA of the commit.
            - author_name : str
                The name of the commit's author.
            - date : str (time)
                The commit's timestamp.
            - message : str
                The commit message.
        """
        ...

    def post_javascript_git_commits(
        self,
        id: int,
        content: str,
        message: str,
        file_hash: str,
    ) -> Response:
        """Commit and push a new version of the file

        Parameters
        ----------
        id : int
            The ID of the file.
        content : str
            The contents to commit to the file.
        message : str
            A commit message describing the changes being made.
        file_hash : str
            The full SHA of the file being replaced.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def get_javascript_git_commits(
        self,
        id: int,
        commit_hash: str,
    ) -> Response:
        """Get file contents at git ref

        Parameters
        ----------
        id : int
            The ID of the file.
        commit_hash : str
            The SHA (full or shortened) of the desired git commit.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def post_javascript_git_checkout_latest(
        self,
        id: int,
    ) -> Response:
        """Checkout latest commit on the current branch of a script or workflow

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def post_javascript_git_checkout(
        self,
        id: int,
    ) -> Response:
        """Checkout content that the existing git_ref points to and save to the object

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def list_python3_git(
        self,
        id: int,
    ) -> Response:
        """Get the git metadata attached to an item

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def put_python3_git(
        self,
        id: int,
        git_ref: str | None = ...,
        git_branch: str | None = ...,
        git_path: str | None = ...,
        git_repo_url: str | None = ...,
        git_ref_type: str | None = ...,
        pull_from_git: bool | None = ...,
    ) -> Response:
        """Attach an item to a file in a git repo

        Parameters
        ----------
        id : int
            The ID of the file.
        git_ref : str, optional
            A git reference specifying an unambiguous version of the file. Can be a
            branch name, or the full or shortened SHA of a commit.
        git_branch : str, optional
            The git branch that the file is on.
        git_path : str, optional
            The path of the file in the repository.
        git_repo_url : str, optional
            The URL of the git repository.
        git_ref_type : str, optional
            Specifies if the file is versioned by branch or tag.
        pull_from_git : bool, optional
            Automatically pull latest commit from git. Only works for scripts.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def patch_python3_git(
        self,
        id: int,
        git_ref: str | None = ...,
        git_branch: str | None = ...,
        git_path: str | None = ...,
        git_repo_url: str | None = ...,
        git_ref_type: str | None = ...,
        pull_from_git: bool | None = ...,
    ) -> Response:
        """Update an attached git file

        Parameters
        ----------
        id : int
            The ID of the file.
        git_ref : str, optional
            A git reference specifying an unambiguous version of the file. Can be a
            branch name, or the full or shortened SHA of a commit.
        git_branch : str, optional
            The git branch that the file is on.
        git_path : str, optional
            The path of the file in the repository.
        git_repo_url : str, optional
            The URL of the git repository.
        git_ref_type : str, optional
            Specifies if the file is versioned by branch or tag.
        pull_from_git : bool, optional
            Automatically pull latest commit from git. Only works for scripts.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def list_python3_git_commits(
        self,
        id: int,
    ) -> Response:
        """Get the git commits for an item on the current branch

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - commit_hash : str
                The SHA of the commit.
            - author_name : str
                The name of the commit's author.
            - date : str (time)
                The commit's timestamp.
            - message : str
                The commit message.
        """
        ...

    def post_python3_git_commits(
        self,
        id: int,
        content: str,
        message: str,
        file_hash: str,
    ) -> Response:
        """Commit and push a new version of the file

        Parameters
        ----------
        id : int
            The ID of the file.
        content : str
            The contents to commit to the file.
        message : str
            A commit message describing the changes being made.
        file_hash : str
            The full SHA of the file being replaced.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def get_python3_git_commits(
        self,
        id: int,
        commit_hash: str,
    ) -> Response:
        """Get file contents at git ref

        Parameters
        ----------
        id : int
            The ID of the file.
        commit_hash : str
            The SHA (full or shortened) of the desired git commit.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def post_python3_git_checkout_latest(
        self,
        id: int,
    ) -> Response:
        """Checkout latest commit on the current branch of a script or workflow

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def post_python3_git_checkout(
        self,
        id: int,
    ) -> Response:
        """Checkout content that the existing git_ref points to and save to the object

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def list_r_git(
        self,
        id: int,
    ) -> Response:
        """Get the git metadata attached to an item

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def put_r_git(
        self,
        id: int,
        git_ref: str | None = ...,
        git_branch: str | None = ...,
        git_path: str | None = ...,
        git_repo_url: str | None = ...,
        git_ref_type: str | None = ...,
        pull_from_git: bool | None = ...,
    ) -> Response:
        """Attach an item to a file in a git repo

        Parameters
        ----------
        id : int
            The ID of the file.
        git_ref : str, optional
            A git reference specifying an unambiguous version of the file. Can be a
            branch name, or the full or shortened SHA of a commit.
        git_branch : str, optional
            The git branch that the file is on.
        git_path : str, optional
            The path of the file in the repository.
        git_repo_url : str, optional
            The URL of the git repository.
        git_ref_type : str, optional
            Specifies if the file is versioned by branch or tag.
        pull_from_git : bool, optional
            Automatically pull latest commit from git. Only works for scripts.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def patch_r_git(
        self,
        id: int,
        git_ref: str | None = ...,
        git_branch: str | None = ...,
        git_path: str | None = ...,
        git_repo_url: str | None = ...,
        git_ref_type: str | None = ...,
        pull_from_git: bool | None = ...,
    ) -> Response:
        """Update an attached git file

        Parameters
        ----------
        id : int
            The ID of the file.
        git_ref : str, optional
            A git reference specifying an unambiguous version of the file. Can be a
            branch name, or the full or shortened SHA of a commit.
        git_branch : str, optional
            The git branch that the file is on.
        git_path : str, optional
            The path of the file in the repository.
        git_repo_url : str, optional
            The URL of the git repository.
        git_ref_type : str, optional
            Specifies if the file is versioned by branch or tag.
        pull_from_git : bool, optional
            Automatically pull latest commit from git. Only works for scripts.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def list_r_git_commits(
        self,
        id: int,
    ) -> Response:
        """Get the git commits for an item on the current branch

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - commit_hash : str
                The SHA of the commit.
            - author_name : str
                The name of the commit's author.
            - date : str (time)
                The commit's timestamp.
            - message : str
                The commit message.
        """
        ...

    def post_r_git_commits(
        self,
        id: int,
        content: str,
        message: str,
        file_hash: str,
    ) -> Response:
        """Commit and push a new version of the file

        Parameters
        ----------
        id : int
            The ID of the file.
        content : str
            The contents to commit to the file.
        message : str
            A commit message describing the changes being made.
        file_hash : str
            The full SHA of the file being replaced.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def get_r_git_commits(
        self,
        id: int,
        commit_hash: str,
    ) -> Response:
        """Get file contents at git ref

        Parameters
        ----------
        id : int
            The ID of the file.
        commit_hash : str
            The SHA (full or shortened) of the desired git commit.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def post_r_git_checkout_latest(
        self,
        id: int,
    ) -> Response:
        """Checkout latest commit on the current branch of a script or workflow

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def post_r_git_checkout(
        self,
        id: int,
    ) -> Response:
        """Checkout content that the existing git_ref points to and save to the object

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def list_sql_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_sql_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_sql_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_sql_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_sql_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_sql_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_sql_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def list_sql_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a SQL Script belongs to

        Parameters
        ----------
        id : int
            The ID of the SQL Script.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_sql_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a SQL Script to a project

        Parameters
        ----------
        id : int
            The ID of the SQL Script.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_sql_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a SQL Script from a project

        Parameters
        ----------
        id : int
            The ID of the SQL Script.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_sql_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - sql : str
                The raw SQL query for the script.
            - expanded_arguments : dict
                Expanded arguments for use in injecting into different environments.
            - remote_host_id : int
                The remote host ID that this script will connect to.
            - credential_id : int
                The credential that this script will use.
            - code_preview : str
                The code that this script will run with arguments inserted.
            - csv_settings : dict
                - include_header : bool
                    Whether or not to include headers in the output data. Default: true
                - compression : str
                    The type of compression to use, if any, one of "none", "zip", or
                    "gzip". Default: gzip
                - column_delimiter : str
                    Which delimiter to use, one of "comma", "tab", or "pipe". Default:
                    comma
                - unquoted : bool
                    Whether or not to quote fields. Default: false
                - force_multifile : bool
                    Whether or not the csv should be split into multiple files.
                    Default: false
                - filename_prefix : str
                    A user specified filename prefix for the output file to have.
                    Default: null
                - max_file_size : int
                    The max file size, in MB, created files will be. Only available
                    when force_multifile is true.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def list_containers_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_containers_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_containers_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_containers_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_containers_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_containers_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_containers_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def list_containers_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a Container Script belongs to

        Parameters
        ----------
        id : int
            The ID of the Container Script.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_containers_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a Container Script to a project

        Parameters
        ----------
        id : int
            The ID of the Container Script.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_containers_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a Container Script from a project

        Parameters
        ----------
        id : int
            The ID of the Container Script.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_containers_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - from_template_aliases : list[dict]
                An array of the aliases of the template script.

                - id : int
                    The id of the Alias object.
                - object_id : int
                    The id of the object
                - alias : str
                    The alias of the object
            - name : str
                The name of the container.
            - type : str
                The type of the script (e.g Container)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template script.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares. Must be at least 2 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB). Must be at
                    least 4 MB.
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - repo_http_uri : str
                The location of a github repo to clone into the container, e.g.
                github.com/my-user/my-repo.git.
            - repo_ref : str
                The tag or branch of the github repo to clone into the container.
            - remote_host_credential_id : int
                The id of the database credentials to pass into the environment of the
                container.
            - git_credential_id : int
                The id of the git credential to be used when checking out the specified
                git repo. If not supplied, the first git credential you've submitted
                will be used. Unnecessary if no git repo is specified or the git repo
                is public.
            - docker_command : str
                The command to run on the container. Will be run via sh as: ["sh",
                "-c", dockerCommand]. Defaults to the Docker image's ENTRYPOINT/CMD.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub.
            - instance_type : str
                The EC2 instance type to deploy to. Only available for jobs running on
                kubernetes.
            - cancel_timeout : int
                The amount of time (in seconds) to wait before forcibly terminating the
                script. When the script is cancelled, it is first sent a TERM signal.
                If the script is still running after the timeout, it is sent a KILL
                signal. Defaults to 0.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - time_zone : str
                The time zone of this script.
            - partition_label : str
                The partition label used to run this object.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - target_project_id : int
                Target project to which script outputs will be added.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def list_python3_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_python3_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_python3_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_python3_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_python3_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_python3_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_python3_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def list_python3_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a Python Script belongs to

        Parameters
        ----------
        id : int
            The ID of the Python Script.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_python3_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a Python Script to a project

        Parameters
        ----------
        id : int
            The ID of the Python Script.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_python3_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a Python Script from a project

        Parameters
        ----------
        id : int
            The ID of the Python Script.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_python3_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares. Must be at least 2 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB). Must be at
                    least 4 MB.
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - instance_type : str
                The EC2 instance type to deploy to. Only available for jobs running on
                kubernetes.
            - source : str
                The body/text of the script.
            - cancel_timeout : int
                The amount of time (in seconds) to wait before forcibly terminating the
                script. When the script is cancelled, it is first sent a TERM signal.
                If the script is still running after the timeout, it is sent a KILL
                signal. Defaults to 0.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub.
            - partition_label : str
                The partition label used to run this object.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def list_r_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_r_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_r_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_r_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_r_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_r_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_r_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def list_r_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects an R Script belongs to

        Parameters
        ----------
        id : int
            The ID of the R Script.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_r_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add an R Script to a project

        Parameters
        ----------
        id : int
            The ID of the R Script.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_r_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove an R Script from a project

        Parameters
        ----------
        id : int
            The ID of the R Script.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_r_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares. Must be at least 2 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB). Must be at
                    least 4 MB.
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - instance_type : str
                The EC2 instance type to deploy to. Only available for jobs running on
                kubernetes.
            - source : str
                The body/text of the script.
            - cancel_timeout : int
                The amount of time (in seconds) to wait before forcibly terminating the
                script. When the script is cancelled, it is first sent a TERM signal.
                If the script is still running after the timeout, it is sent a KILL
                signal. Defaults to 0.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub.
            - partition_label : str
                The partition label used to run this object.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def list_javascript_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_javascript_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_javascript_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_javascript_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_javascript_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_javascript_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_javascript_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def list_javascript_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a JavaScript Script belongs to

        Parameters
        ----------
        id : int
            The ID of the JavaScript Script.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_javascript_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a JavaScript Script to a project

        Parameters
        ----------
        id : int
            The ID of the JavaScript Script.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_javascript_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a JavaScript Script from a project

        Parameters
        ----------
        id : int
            The ID of the JavaScript Script.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_javascript_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - source : str
                The body/text of the script.
            - remote_host_id : int
                The remote host ID that this script will connect to.
            - credential_id : int
                The credential that this script will use.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def list_custom_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_custom_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_custom_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_custom_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_custom_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_custom_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_custom_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def list_custom_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a Custom Script belongs to

        Parameters
        ----------
        id : int
            The ID of the Custom Script.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_custom_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a Custom Script to a project

        Parameters
        ----------
        id : int
            The ID of the Custom Script.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_custom_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a Custom Script from a project

        Parameters
        ----------
        id : int
            The ID of the Custom Script.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_custom_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - from_template_aliases : list[dict]
                An array of the aliases of the template script.

                - id : int
                    The id of the Alias object.
                - object_id : int
                    The id of the object
                - alias : str
                    The alias of the object
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g Custom)
            - backing_script_type : str
                The type of the script backing this template (e.g Python)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template script.
            - ui_report_url : int
                The url of the custom HTML.
            - ui_report_id : int
                The id of the report with the custom HTML.
            - ui_report_provide_api_key : bool
                Whether the ui report requests an API Key from the report viewer.
            - template_script_name : str
                The name of the template script.
            - template_note : str
                The template's note.
            - remote_host_id : int
                The remote host ID that this script will connect to.
            - credential_id : int
                The credential that this script will use.
            - code_preview : str
                The code that this script will run with arguments inserted.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - target_project_id : int
                Target project to which script outputs will be added.
            - last_successful_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB).
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - partition_label : str
                The partition label used to run this object. Only applicable for jobs
                using Docker.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def post_sql_clone(
        self,
        id: int,
        clone_schedule: bool | None = ...,
        clone_triggers: bool | None = ...,
        clone_notifications: bool | None = ...,
    ) -> Response:
        """Clone this SQL Script

        Parameters
        ----------
        id : int
            The ID for the script.
        clone_schedule : bool, optional
            If true, also copy the schedule to the new script.
        clone_triggers : bool, optional
            If true, also copy the triggers to the new script.
        clone_notifications : bool, optional
            If true, also copy the notifications to the new script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - sql : str
                The raw SQL query for the script.
            - expanded_arguments : dict
                Expanded arguments for use in injecting into different environments.
            - remote_host_id : int
                The remote host ID that this script will connect to.
            - credential_id : int
                The credential that this script will use.
            - code_preview : str
                The code that this script will run with arguments inserted.
            - csv_settings : dict
                - include_header : bool
                    Whether or not to include headers in the output data. Default: true
                - compression : str
                    The type of compression to use, if any, one of "none", "zip", or
                    "gzip". Default: gzip
                - column_delimiter : str
                    Which delimiter to use, one of "comma", "tab", or "pipe". Default:
                    comma
                - unquoted : bool
                    Whether or not to quote fields. Default: false
                - force_multifile : bool
                    Whether or not the csv should be split into multiple files.
                    Default: false
                - filename_prefix : str
                    A user specified filename prefix for the output file to have.
                    Default: null
                - max_file_size : int
                    The max file size, in MB, created files will be. Only available
                    when force_multifile is true.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def post_javascript_clone(
        self,
        id: int,
        clone_schedule: bool | None = ...,
        clone_triggers: bool | None = ...,
        clone_notifications: bool | None = ...,
    ) -> Response:
        """Clone this JavaScript Script

        Parameters
        ----------
        id : int
            The ID for the script.
        clone_schedule : bool, optional
            If true, also copy the schedule to the new script.
        clone_triggers : bool, optional
            If true, also copy the triggers to the new script.
        clone_notifications : bool, optional
            If true, also copy the notifications to the new script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - source : str
                The body/text of the script.
            - remote_host_id : int
                The remote host ID that this script will connect to.
            - credential_id : int
                The credential that this script will use.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def post_python3_clone(
        self,
        id: int,
        clone_schedule: bool | None = ...,
        clone_triggers: bool | None = ...,
        clone_notifications: bool | None = ...,
    ) -> Response:
        """Clone this Python Script

        Parameters
        ----------
        id : int
            The ID for the script.
        clone_schedule : bool, optional
            If true, also copy the schedule to the new script.
        clone_triggers : bool, optional
            If true, also copy the triggers to the new script.
        clone_notifications : bool, optional
            If true, also copy the notifications to the new script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares. Must be at least 2 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB). Must be at
                    least 4 MB.
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - instance_type : str
                The EC2 instance type to deploy to. Only available for jobs running on
                kubernetes.
            - source : str
                The body/text of the script.
            - cancel_timeout : int
                The amount of time (in seconds) to wait before forcibly terminating the
                script. When the script is cancelled, it is first sent a TERM signal.
                If the script is still running after the timeout, it is sent a KILL
                signal. Defaults to 0.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub.
            - partition_label : str
                The partition label used to run this object.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def post_r_clone(
        self,
        id: int,
        clone_schedule: bool | None = ...,
        clone_triggers: bool | None = ...,
        clone_notifications: bool | None = ...,
    ) -> Response:
        """Clone this R Script

        Parameters
        ----------
        id : int
            The ID for the script.
        clone_schedule : bool, optional
            If true, also copy the schedule to the new script.
        clone_triggers : bool, optional
            If true, also copy the triggers to the new script.
        clone_notifications : bool, optional
            If true, also copy the notifications to the new script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g SQL, Container, Python, R, JavaScript, dbt)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template this script uses, if any.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - next_run_at : str (time)
                The time of the next scheduled run.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - target_project_id : int
                Target project to which script outputs will be added.
            - archived : str
                The archival status of the requested item(s).
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares. Must be at least 2 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB). Must be at
                    least 4 MB.
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - instance_type : str
                The EC2 instance type to deploy to. Only available for jobs running on
                kubernetes.
            - source : str
                The body/text of the script.
            - cancel_timeout : int
                The amount of time (in seconds) to wait before forcibly terminating the
                script. When the script is cancelled, it is first sent a TERM signal.
                If the script is still running after the timeout, it is sent a KILL
                signal. Defaults to 0.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub.
            - partition_label : str
                The partition label used to run this object.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def post_containers_clone(
        self,
        id: int,
        clone_schedule: bool | None = ...,
        clone_triggers: bool | None = ...,
        clone_notifications: bool | None = ...,
    ) -> Response:
        """Clone this Container Script

        Parameters
        ----------
        id : int
            The ID for the script.
        clone_schedule : bool, optional
            If true, also copy the schedule to the new script.
        clone_triggers : bool, optional
            If true, also copy the triggers to the new script.
        clone_notifications : bool, optional
            If true, also copy the notifications to the new script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - from_template_aliases : list[dict]
                An array of the aliases of the template script.

                - id : int
                    The id of the Alias object.
                - object_id : int
                    The id of the object
                - alias : str
                    The alias of the object
            - name : str
                The name of the container.
            - type : str
                The type of the script (e.g Container)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
                The category of the script.
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - user_context : str
                "runner" or "author", who to execute the script as when run as a
                template.
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - template_dependents_count : int
                How many other scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template script.
            - template_script_name : str
                The name of the template script.
            - links : dict
                - details : str
                    The details link to get more information about the script.
                - runs : str
                    The runs link to get the run information list for this script.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares. Must be at least 2 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB). Must be at
                    least 4 MB.
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - repo_http_uri : str
                The location of a github repo to clone into the container, e.g.
                github.com/my-user/my-repo.git.
            - repo_ref : str
                The tag or branch of the github repo to clone into the container.
            - remote_host_credential_id : int
                The id of the database credentials to pass into the environment of the
                container.
            - git_credential_id : int
                The id of the git credential to be used when checking out the specified
                git repo. If not supplied, the first git credential you've submitted
                will be used. Unnecessary if no git repo is specified or the git repo
                is public.
            - docker_command : str
                The command to run on the container. Will be run via sh as: ["sh",
                "-c", dockerCommand]. Defaults to the Docker image's ENTRYPOINT/CMD.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub.
            - instance_type : str
                The EC2 instance type to deploy to. Only available for jobs running on
                kubernetes.
            - cancel_timeout : int
                The amount of time (in seconds) to wait before forcibly terminating the
                script. When the script is cancelled, it is first sent a TERM signal.
                If the script is still running after the timeout, it is sent a KILL
                signal. Defaults to 0.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - time_zone : str
                The time zone of this script.
            - partition_label : str
                The partition label used to run this object.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - target_project_id : int
                Target project to which script outputs will be added.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

    def post_custom_clone(
        self,
        id: int,
        clone_schedule: bool | None = ...,
        clone_triggers: bool | None = ...,
        clone_notifications: bool | None = ...,
    ) -> Response:
        """Clone this Custom Script

        Parameters
        ----------
        id : int
            The ID for the script.
        clone_schedule : bool, optional
            If true, also copy the schedule to the new script.
        clone_triggers : bool, optional
            If true, also copy the triggers to the new script.
        clone_notifications : bool, optional
            If true, also copy the notifications to the new script.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the script.
            - from_template_aliases : list[dict]
                An array of the aliases of the template script.

                - id : int
                    The id of the Alias object.
                - object_id : int
                    The id of the object
                - alias : str
                    The alias of the object
            - name : str
                The name of the script.
            - type : str
                The type of the script (e.g Custom)
            - backing_script_type : str
                The type of the script backing this template (e.g Python)
            - created_at : str (time)
                The time this script was created.
            - updated_at : str (time)
                The time the script was last updated.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The status of the script's last run.
            - finished_at : str (time)
                The time that the script's last run finished.
            - category : str
            - projects : list[dict]
                A list of projects containing the script.

                - id : int
                    The ID for the project.
                - name : str
                    The name of the project.
            - parent_id : int
                The ID of the parent job that will trigger this script
            - params : list[dict]
                A definition of the parameters this script accepts in the arguments
                field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - arguments : dict
                Parameter-value pairs to use when running this script. Only settable if
                this script has defined parameters.
            - is_template : bool
                Whether others scripts use this one as a template.
            - published_as_template_id : int
                The ID of the template that this script is backing.
            - from_template_id : int
                The ID of the template script.
            - ui_report_url : int
                The url of the custom HTML.
            - ui_report_id : int
                The id of the report with the custom HTML.
            - ui_report_provide_api_key : bool
                Whether the ui report requests an API Key from the report viewer.
            - template_script_name : str
                The name of the template script.
            - template_note : str
                The template's note.
            - remote_host_id : int
                The remote host ID that this script will connect to.
            - credential_id : int
                The credential that this script will use.
            - code_preview : str
                The code that this script will run with arguments inserted.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - success_email_from_name : str
                    Name from which success emails are sent; defaults to "Civis."
                - success_email_reply_to : str
                    Address for replies to success emails; defaults to the author of
                    the job.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on. Defaults to user's
                    preferences.
                - failure_on : bool
                    If failure email notifications are on. Defaults to user's
                    preferences.
            - running_as : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - time_zone : str
                The time zone of this script.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - hidden : bool
                The hidden status of the item.
            - archived : str
                The archival status of the requested item(s).
            - target_project_id : int
                Target project to which script outputs will be added.
            - last_successful_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - required_resources : dict
                - cpu : int
                    The number of CPU shares to allocate for the container. Each core
                    has 1000 shares.
                - memory : int
                    The amount of RAM to allocate for the container (in MB).
                - disk_space : float (float)
                    The amount of disk space, in GB, to allocate for the container.
                    This space will be used to hold the git repo configured for the
                    container and anything your container writes to /tmp or /data.
                    Fractional values (e.g. 0.25) are supported.
            - partition_label : str
                The partition label used to run this object. Only applicable for jobs
                using Docker.
            - running_as_id : int
                The ID of the runner of this script.
        """
        ...

class _Search:
    def list(
        self,
        query: str | None = ...,
        type: str | None = ...,
        offset: int | None = ...,
        order: str | None = ...,
        owner: str | None = ...,
        limit: int | None = ...,
        archived: str | None = ...,
        last_run_state: str | None = ...,
    ) -> Response:
        """Perform a search

        Parameters
        ----------
        query : str, optional
            The search query.
        type : str, optional
            The type for the search. It accepts a comma-separated list. Valid arguments
            are listed on the "GET /search/types" endpoint.
        offset : int, optional
            The offset for the search results.
        order : str, optional
            The field on which to order the result set.
        owner : str, optional
            The owner for the search.
        limit : int, optional
            Defaults to 10. Maximum allowed is 1000.
        archived : str, optional
            If specified, return only results with the chosen archived status; either
            'true', 'false', or 'all'. Defaults to 'false'.
        last_run_state : str, optional
            The last run state of the job being searched for; either: 'queued',
            'running', 'succeeded', 'failed', or 'cancelled'.

        Returns
        -------
        :class:`civis.response.Response`
            - total_results : int
                The number of items matching the search query.
            - aggregations : dict
                Aggregations by owner and type for the search results.
            - results : list[dict]
                The items returned by the search.

                - score : float (float)
                    The relevance score from the search request.
                - type : str
                    The type of the item.
                - id : int
                    The ID of the item.
                - name : str
                    The name of the item.
                - type_name : str
                    The verbose name of the type.
                - updated_at : str (time)
                    The time the item was last updated.
                - owner : str
                    The owner of the item.
                - use_count : int
                    The use count of the item, if the item is a template.
                - last_run_id : int
                    The last run id of the item, if the item is a job.
                - last_run_state : str
                    The last run state of the item, if the item is a job.
                - last_run_start : str (time)
                    The last run start time of the item, if the item is a job.
                - last_run_finish : str (time)
                    The last run finish time of the item, if the item is a job.
                - public : bool
                    The flag that indicates a template is available to all users.
                - last_run_exception : str
                    The exception of the item after the last run, if the item is a job.
                - auto_share : bool
                    The flag that indicates if a project has Auto-Share enabled.
        """
        ...

    def list_types(
        self,
    ) -> Response:
        """List available search types

        Returns
        -------
        :class:`civis.response.Response`
            - type : str
                The name of the item type.
        """
        ...

    def list_queries(
        self,
        search_string: str | None = ...,
        database_id: int | None = ...,
        credential_id: int | None = ...,
        author_id: int | None = ...,
        archived: bool | None = ...,
        state: list[str] | None = ...,
        started_before: str | None = ...,
        started_after: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """Search queries that are not hidden

        Parameters
        ----------
        search_string : str, optional
            Space delimited search terms for searching queries by their SQL. Supports
            wild card characters "?" for any single character, and "*" for zero or more
            characters.
        database_id : int, optional
            The database ID.
        credential_id : int, optional
            The credential ID.
        author_id : int, optional
            The author of the query.
        archived : bool, optional
            The archival status of the requested item(s). Defaults to false.
        state : list[str], optional
            The state of the last run. One or more of queued, running, succeeded,
            failed, and cancelled.
        started_before : str, optional
            An upper bound for the start date of the last run.
        started_after : str, optional
            A lower bound for the start date of the last run.
        limit : int, optional
            Number of results to return. Defaults to 10. Maximum allowed is 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to
            last_run_started_at. Must be one of: last_run_started_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The query ID.
            - database : int
                The database ID.
            - credential : int
                The credential ID.
            - sql : str
                The SQL executed by the query.
            - author_id : int
                The author of the query.
            - archived : bool
                The archival status of the requested item(s).
            - created_at : str (time)
            - updated_at : str (time)
            - last_run : dict
                - id : int
                - state : str
                    The state of the run. One of queued, running, succeeded, failed,
                    and cancelled.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
        """
        ...

class _Services:
    def list(
        self,
        hidden: bool | None = ...,
        archived: str | None = ...,
        author: str | None = ...,
        status: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Services

        Parameters
        ----------
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.
        archived : str, optional
            The archival status of the requested item(s).
        author : str, optional
            If specified, return items from any of these authors. It accepts a comma-
            separated list of user IDs.
        status : str, optional
            If specified, returns Services with one of these statuses. It accepts a
            comma-separated list, possible values are 'running', 'idle'.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to updated_at. Must be
            one of: updated_at, name, created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID for this Service.
            - name : str
                The name of this Service.
            - description : str
                The description of this Service.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - type : str
                The type of this Service
            - created_at : str (time)
            - updated_at : str (time)
            - git_repo_url : str
                The url for the git repo where the Service code lives.
            - git_repo_ref : str
                The git reference to use when pulling code from the repo.
            - git_path_dir : str
                The path to the Service code within the git repo. If unspecified, the
                root directory will be used.
            - current_deployment : dict
                - deployment_id : int
                    The ID for this deployment.
                - user_id : int
                    The ID of the owner.
                - host : str
                    Domain of the deployment.
                - name : str
                    Name of the deployment.
                - docker_image_name : str
                    The name of the docker image to pull from DockerHub.
                - docker_image_tag : str
                    The tag of the docker image to pull from DockerHub (default:
                    latest).
                - instance_type : str
                    The EC2 instance type requested for the deployment.
                - memory : int
                    The memory allocated to the deployment, in MB.
                - cpu : int
                    The cpu allocated to the deployment, in millicores.
                - state : str
                    The state of the deployment.
                - state_message : str
                    A detailed description of the state.
                - max_memory_usage : float (float)
                    If the deployment has finished, the maximum amount of memory used
                    during the deployment, in MB.
                - max_cpu_usage : float (float)
                    If the deployment has finished, the maximum amount of cpu used
                    during the deployment, in millicores.
                - created_at : str (time)
                - updated_at : str (time)
                - service_id : int
                    The ID of owning Service
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def post(
        self,
        name: str | None = ...,
        description: str | None = ...,
        type: str | None = ...,
        docker_image_name: str | None = ...,
        docker_image_tag: str | None = ...,
        schedule: dict | None = ...,
        replicas: int | None = ...,
        max_replicas: int | None = ...,
        instance_type: str | None = ...,
        memory: int | None = ...,
        cpu: int | None = ...,
        credentials: list[int] | None = ...,
        permission_set_id: int | None = ...,
        git_repo_url: str | None = ...,
        git_repo_ref: str | None = ...,
        git_path_dir: str | None = ...,
        environment_variables: dict | None = ...,
        notifications: dict | None = ...,
        partition_label: str | None = ...,
        hidden: bool | None = ...,
    ) -> Response:
        """Create a Service

        Parameters
        ----------
        name : str, optional
            The name of this Service.
        description : str, optional
            The description of this Service.
        type : str, optional
            The type of this Service
        docker_image_name : str, optional
            The name of the docker image to pull from DockerHub.
        docker_image_tag : str, optional
            The tag of the docker image to pull from DockerHub (default: latest).
        schedule : dict, optional
            - runtime_plan : str
                Only affects the service when deployed. On Demand means that the
                service will be turned on when viewed and automatically turned off
                after periods of inactivity.  Specific Times means the service will be
                on when scheduled. Always On means the deployed service will always be
                on.
            - recurrences : list[dict]
                List of day-hour combinations this item is scheduled for

                - scheduled_days : list[int]
                    Days it is scheduled on, based on numeric value starting at 0 for
                    Sunday
                - scheduled_hours : list[int]
                    Hours it is scheduled on
        replicas : int, optional
            The number of Service replicas to deploy. When maxReplicas is set,
            this field defines the minimum number of replicas to deploy.
        max_replicas : int, optional
            The maximum number of Service replicas to deploy. Defining this field
            enables autoscaling.
        instance_type : str, optional
            The EC2 instance type to deploy to.
        memory : int, optional
            The amount of memory allocated to each replica of the Service.
        cpu : int, optional
            The amount of cpu allocated to each replica of the the Service.
        credentials : list[int], optional
            A list of credential IDs to pass to the Service.
        permission_set_id : int, optional
            The ID of the associated permission set, if any.
        git_repo_url : str, optional
            The url for the git repo where the Service code lives.
        git_repo_ref : str, optional
            The git reference to use when pulling code from the repo.
        git_path_dir : str, optional
            The path to the Service code within the git repo. If unspecified, the root
            directory will be used.
        environment_variables : dict, optional
            Environment Variables to be passed into the Service.
        notifications : dict, optional
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the service fails.
            - failure_on : bool
                If failure email notifications are on
        partition_label : str, optional
            The partition label used to run this object.
        hidden : bool, optional
            The hidden status of the item.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this Service.
            - name : str
                The name of this Service.
            - description : str
                The description of this Service.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - type : str
                The type of this Service
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - schedule : dict
                - runtime_plan : str
                    Only affects the service when deployed. On Demand means that the
                    service will be turned on when viewed and automatically turned off
                    after periods of inactivity.  Specific Times means the service will
                    be on when scheduled. Always On means the deployed service will
                    always be on.
                - recurrences : list[dict]
                    List of day-hour combinations this item is scheduled for

                    - scheduled_days : list[int]
                        Days it is scheduled on, based on numeric value starting at 0
                        for Sunday
                    - scheduled_hours : list[int]
                        Hours it is scheduled on
            - time_zone : str
            - replicas : int
                The number of Service replicas to deploy. When maxReplicas is set,
                this field defines the minimum number of replicas to deploy.
            - max_replicas : int
                The maximum number of Service replicas to deploy. Defining this field
                enables autoscaling.
            - instance_type : str
                The EC2 instance type to deploy to.
            - memory : int
                The amount of memory allocated to each replica of the Service.
            - cpu : int
                The amount of cpu allocated to each replica of the the Service.
            - created_at : str (time)
            - updated_at : str (time)
            - credentials : list[int]
                A list of credential IDs to pass to the Service.
            - permission_set_id : int
                The ID of the associated permission set, if any.
            - git_repo_url : str
                The url for the git repo where the Service code lives.
            - git_repo_ref : str
                The git reference to use when pulling code from the repo.
            - git_path_dir : str
                The path to the Service code within the git repo. If unspecified, the
                root directory will be used.
            - report_id : int
                The ID of the associated report.
            - current_deployment : dict
                - deployment_id : int
                    The ID for this deployment.
                - user_id : int
                    The ID of the owner.
                - host : str
                    Domain of the deployment.
                - name : str
                    Name of the deployment.
                - docker_image_name : str
                    The name of the docker image to pull from DockerHub.
                - docker_image_tag : str
                    The tag of the docker image to pull from DockerHub (default:
                    latest).
                - display_url : str
                    A signed URL for viewing the deployed item.
                - instance_type : str
                    The EC2 instance type requested for the deployment.
                - memory : int
                    The memory allocated to the deployment, in MB.
                - cpu : int
                    The cpu allocated to the deployment, in millicores.
                - state : str
                    The state of the deployment.
                - state_message : str
                    A detailed description of the state.
                - max_memory_usage : float (float)
                    If the deployment has finished, the maximum amount of memory used
                    during the deployment, in MB.
                - max_cpu_usage : float (float)
                    If the deployment has finished, the maximum amount of cpu used
                    during the deployment, in millicores.
                - created_at : str (time)
                - updated_at : str (time)
                - service_id : int
                    The ID of owning Service
            - current_url : str
                The URL that the service is hosted at.
            - environment_variables : dict
                Environment Variables to be passed into the Service.
            - notifications : dict
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the service fails.
                - failure_on : bool
                    If failure email notifications are on
            - partition_label : str
                The partition label used to run this object.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Get a Service

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this Service.
            - name : str
                The name of this Service.
            - description : str
                The description of this Service.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - type : str
                The type of this Service
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - schedule : dict
                - runtime_plan : str
                    Only affects the service when deployed. On Demand means that the
                    service will be turned on when viewed and automatically turned off
                    after periods of inactivity.  Specific Times means the service will
                    be on when scheduled. Always On means the deployed service will
                    always be on.
                - recurrences : list[dict]
                    List of day-hour combinations this item is scheduled for

                    - scheduled_days : list[int]
                        Days it is scheduled on, based on numeric value starting at 0
                        for Sunday
                    - scheduled_hours : list[int]
                        Hours it is scheduled on
            - time_zone : str
            - replicas : int
                The number of Service replicas to deploy. When maxReplicas is set,
                this field defines the minimum number of replicas to deploy.
            - max_replicas : int
                The maximum number of Service replicas to deploy. Defining this field
                enables autoscaling.
            - instance_type : str
                The EC2 instance type to deploy to.
            - memory : int
                The amount of memory allocated to each replica of the Service.
            - cpu : int
                The amount of cpu allocated to each replica of the the Service.
            - created_at : str (time)
            - updated_at : str (time)
            - credentials : list[int]
                A list of credential IDs to pass to the Service.
            - permission_set_id : int
                The ID of the associated permission set, if any.
            - git_repo_url : str
                The url for the git repo where the Service code lives.
            - git_repo_ref : str
                The git reference to use when pulling code from the repo.
            - git_path_dir : str
                The path to the Service code within the git repo. If unspecified, the
                root directory will be used.
            - report_id : int
                The ID of the associated report.
            - current_deployment : dict
                - deployment_id : int
                    The ID for this deployment.
                - user_id : int
                    The ID of the owner.
                - host : str
                    Domain of the deployment.
                - name : str
                    Name of the deployment.
                - docker_image_name : str
                    The name of the docker image to pull from DockerHub.
                - docker_image_tag : str
                    The tag of the docker image to pull from DockerHub (default:
                    latest).
                - display_url : str
                    A signed URL for viewing the deployed item.
                - instance_type : str
                    The EC2 instance type requested for the deployment.
                - memory : int
                    The memory allocated to the deployment, in MB.
                - cpu : int
                    The cpu allocated to the deployment, in millicores.
                - state : str
                    The state of the deployment.
                - state_message : str
                    A detailed description of the state.
                - max_memory_usage : float (float)
                    If the deployment has finished, the maximum amount of memory used
                    during the deployment, in MB.
                - max_cpu_usage : float (float)
                    If the deployment has finished, the maximum amount of cpu used
                    during the deployment, in millicores.
                - created_at : str (time)
                - updated_at : str (time)
                - service_id : int
                    The ID of owning Service
            - current_url : str
                The URL that the service is hosted at.
            - environment_variables : dict
                Environment Variables to be passed into the Service.
            - notifications : dict
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the service fails.
                - failure_on : bool
                    If failure email notifications are on
            - partition_label : str
                The partition label used to run this object.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def put(
        self,
        id: int,
        name: str | None = ...,
        description: str | None = ...,
        docker_image_name: str | None = ...,
        docker_image_tag: str | None = ...,
        schedule: dict | None = ...,
        replicas: int | None = ...,
        max_replicas: int | None = ...,
        instance_type: str | None = ...,
        memory: int | None = ...,
        cpu: int | None = ...,
        credentials: list[int] | None = ...,
        permission_set_id: int | None = ...,
        git_repo_url: str | None = ...,
        git_repo_ref: str | None = ...,
        git_path_dir: str | None = ...,
        environment_variables: dict | None = ...,
        notifications: dict | None = ...,
        partition_label: str | None = ...,
    ) -> Response:
        """Replace all attributes of this Service

        Parameters
        ----------
        id : int
            The ID for this Service.
        name : str, optional
            The name of this Service.
        description : str, optional
            The description of this Service.
        docker_image_name : str, optional
            The name of the docker image to pull from DockerHub.
        docker_image_tag : str, optional
            The tag of the docker image to pull from DockerHub (default: latest).
        schedule : dict, optional
            - runtime_plan : str
                Only affects the service when deployed. On Demand means that the
                service will be turned on when viewed and automatically turned off
                after periods of inactivity.  Specific Times means the service will be
                on when scheduled. Always On means the deployed service will always be
                on.
            - recurrences : list[dict]
                List of day-hour combinations this item is scheduled for

                - scheduled_days : list[int]
                    Days it is scheduled on, based on numeric value starting at 0 for
                    Sunday
                - scheduled_hours : list[int]
                    Hours it is scheduled on
        replicas : int, optional
            The number of Service replicas to deploy. When maxReplicas is set,
            this field defines the minimum number of replicas to deploy.
        max_replicas : int, optional
            The maximum number of Service replicas to deploy. Defining this field
            enables autoscaling.
        instance_type : str, optional
            The EC2 instance type to deploy to.
        memory : int, optional
            The amount of memory allocated to each replica of the Service.
        cpu : int, optional
            The amount of cpu allocated to each replica of the the Service.
        credentials : list[int], optional
            A list of credential IDs to pass to the Service.
        permission_set_id : int, optional
            The ID of the associated permission set, if any.
        git_repo_url : str, optional
            The url for the git repo where the Service code lives.
        git_repo_ref : str, optional
            The git reference to use when pulling code from the repo.
        git_path_dir : str, optional
            The path to the Service code within the git repo. If unspecified, the root
            directory will be used.
        environment_variables : dict, optional
            Environment Variables to be passed into the Service.
        notifications : dict, optional
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the service fails.
            - failure_on : bool
                If failure email notifications are on
        partition_label : str, optional
            The partition label used to run this object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this Service.
            - name : str
                The name of this Service.
            - description : str
                The description of this Service.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - type : str
                The type of this Service
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - schedule : dict
                - runtime_plan : str
                    Only affects the service when deployed. On Demand means that the
                    service will be turned on when viewed and automatically turned off
                    after periods of inactivity.  Specific Times means the service will
                    be on when scheduled. Always On means the deployed service will
                    always be on.
                - recurrences : list[dict]
                    List of day-hour combinations this item is scheduled for

                    - scheduled_days : list[int]
                        Days it is scheduled on, based on numeric value starting at 0
                        for Sunday
                    - scheduled_hours : list[int]
                        Hours it is scheduled on
            - time_zone : str
            - replicas : int
                The number of Service replicas to deploy. When maxReplicas is set,
                this field defines the minimum number of replicas to deploy.
            - max_replicas : int
                The maximum number of Service replicas to deploy. Defining this field
                enables autoscaling.
            - instance_type : str
                The EC2 instance type to deploy to.
            - memory : int
                The amount of memory allocated to each replica of the Service.
            - cpu : int
                The amount of cpu allocated to each replica of the the Service.
            - created_at : str (time)
            - updated_at : str (time)
            - credentials : list[int]
                A list of credential IDs to pass to the Service.
            - permission_set_id : int
                The ID of the associated permission set, if any.
            - git_repo_url : str
                The url for the git repo where the Service code lives.
            - git_repo_ref : str
                The git reference to use when pulling code from the repo.
            - git_path_dir : str
                The path to the Service code within the git repo. If unspecified, the
                root directory will be used.
            - report_id : int
                The ID of the associated report.
            - current_deployment : dict
                - deployment_id : int
                    The ID for this deployment.
                - user_id : int
                    The ID of the owner.
                - host : str
                    Domain of the deployment.
                - name : str
                    Name of the deployment.
                - docker_image_name : str
                    The name of the docker image to pull from DockerHub.
                - docker_image_tag : str
                    The tag of the docker image to pull from DockerHub (default:
                    latest).
                - display_url : str
                    A signed URL for viewing the deployed item.
                - instance_type : str
                    The EC2 instance type requested for the deployment.
                - memory : int
                    The memory allocated to the deployment, in MB.
                - cpu : int
                    The cpu allocated to the deployment, in millicores.
                - state : str
                    The state of the deployment.
                - state_message : str
                    A detailed description of the state.
                - max_memory_usage : float (float)
                    If the deployment has finished, the maximum amount of memory used
                    during the deployment, in MB.
                - max_cpu_usage : float (float)
                    If the deployment has finished, the maximum amount of cpu used
                    during the deployment, in millicores.
                - created_at : str (time)
                - updated_at : str (time)
                - service_id : int
                    The ID of owning Service
            - current_url : str
                The URL that the service is hosted at.
            - environment_variables : dict
                Environment Variables to be passed into the Service.
            - notifications : dict
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the service fails.
                - failure_on : bool
                    If failure email notifications are on
            - partition_label : str
                The partition label used to run this object.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def patch(
        self,
        id: int,
        name: str | None = ...,
        description: str | None = ...,
        docker_image_name: str | None = ...,
        docker_image_tag: str | None = ...,
        schedule: dict | None = ...,
        replicas: int | None = ...,
        max_replicas: int | None = ...,
        instance_type: str | None = ...,
        memory: int | None = ...,
        cpu: int | None = ...,
        credentials: list[int] | None = ...,
        permission_set_id: int | None = ...,
        git_repo_url: str | None = ...,
        git_repo_ref: str | None = ...,
        git_path_dir: str | None = ...,
        environment_variables: dict | None = ...,
        notifications: dict | None = ...,
        partition_label: str | None = ...,
    ) -> Response:
        """Update some attributes of this Service

        Parameters
        ----------
        id : int
            The ID for this Service.
        name : str, optional
            The name of this Service.
        description : str, optional
            The description of this Service.
        docker_image_name : str, optional
            The name of the docker image to pull from DockerHub.
        docker_image_tag : str, optional
            The tag of the docker image to pull from DockerHub (default: latest).
        schedule : dict, optional
            - runtime_plan : str
                Only affects the service when deployed. On Demand means that the
                service will be turned on when viewed and automatically turned off
                after periods of inactivity.  Specific Times means the service will be
                on when scheduled. Always On means the deployed service will always be
                on.
            - recurrences : list[dict]
                List of day-hour combinations this item is scheduled for

                - scheduled_days : list[int]
                    Days it is scheduled on, based on numeric value starting at 0 for
                    Sunday
                - scheduled_hours : list[int]
                    Hours it is scheduled on
        replicas : int, optional
            The number of Service replicas to deploy. When maxReplicas is set,
            this field defines the minimum number of replicas to deploy.
        max_replicas : int, optional
            The maximum number of Service replicas to deploy. Defining this field
            enables autoscaling.
        instance_type : str, optional
            The EC2 instance type to deploy to.
        memory : int, optional
            The amount of memory allocated to each replica of the Service.
        cpu : int, optional
            The amount of cpu allocated to each replica of the the Service.
        credentials : list[int], optional
            A list of credential IDs to pass to the Service.
        permission_set_id : int, optional
            The ID of the associated permission set, if any.
        git_repo_url : str, optional
            The url for the git repo where the Service code lives.
        git_repo_ref : str, optional
            The git reference to use when pulling code from the repo.
        git_path_dir : str, optional
            The path to the Service code within the git repo. If unspecified, the root
            directory will be used.
        environment_variables : dict, optional
            Environment Variables to be passed into the Service.
        notifications : dict, optional
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the service fails.
            - failure_on : bool
                If failure email notifications are on
        partition_label : str, optional
            The partition label used to run this object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this Service.
            - name : str
                The name of this Service.
            - description : str
                The description of this Service.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - type : str
                The type of this Service
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - schedule : dict
                - runtime_plan : str
                    Only affects the service when deployed. On Demand means that the
                    service will be turned on when viewed and automatically turned off
                    after periods of inactivity.  Specific Times means the service will
                    be on when scheduled. Always On means the deployed service will
                    always be on.
                - recurrences : list[dict]
                    List of day-hour combinations this item is scheduled for

                    - scheduled_days : list[int]
                        Days it is scheduled on, based on numeric value starting at 0
                        for Sunday
                    - scheduled_hours : list[int]
                        Hours it is scheduled on
            - time_zone : str
            - replicas : int
                The number of Service replicas to deploy. When maxReplicas is set,
                this field defines the minimum number of replicas to deploy.
            - max_replicas : int
                The maximum number of Service replicas to deploy. Defining this field
                enables autoscaling.
            - instance_type : str
                The EC2 instance type to deploy to.
            - memory : int
                The amount of memory allocated to each replica of the Service.
            - cpu : int
                The amount of cpu allocated to each replica of the the Service.
            - created_at : str (time)
            - updated_at : str (time)
            - credentials : list[int]
                A list of credential IDs to pass to the Service.
            - permission_set_id : int
                The ID of the associated permission set, if any.
            - git_repo_url : str
                The url for the git repo where the Service code lives.
            - git_repo_ref : str
                The git reference to use when pulling code from the repo.
            - git_path_dir : str
                The path to the Service code within the git repo. If unspecified, the
                root directory will be used.
            - report_id : int
                The ID of the associated report.
            - current_deployment : dict
                - deployment_id : int
                    The ID for this deployment.
                - user_id : int
                    The ID of the owner.
                - host : str
                    Domain of the deployment.
                - name : str
                    Name of the deployment.
                - docker_image_name : str
                    The name of the docker image to pull from DockerHub.
                - docker_image_tag : str
                    The tag of the docker image to pull from DockerHub (default:
                    latest).
                - display_url : str
                    A signed URL for viewing the deployed item.
                - instance_type : str
                    The EC2 instance type requested for the deployment.
                - memory : int
                    The memory allocated to the deployment, in MB.
                - cpu : int
                    The cpu allocated to the deployment, in millicores.
                - state : str
                    The state of the deployment.
                - state_message : str
                    A detailed description of the state.
                - max_memory_usage : float (float)
                    If the deployment has finished, the maximum amount of memory used
                    during the deployment, in MB.
                - max_cpu_usage : float (float)
                    If the deployment has finished, the maximum amount of cpu used
                    during the deployment, in millicores.
                - created_at : str (time)
                - updated_at : str (time)
                - service_id : int
                    The ID of owning Service
            - current_url : str
                The URL that the service is hosted at.
            - environment_variables : dict
                Environment Variables to be passed into the Service.
            - notifications : dict
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the service fails.
                - failure_on : bool
                    If failure email notifications are on
            - partition_label : str
                The partition label used to run this object.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def list_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def put_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this Service.
            - name : str
                The name of this Service.
            - description : str
                The description of this Service.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - type : str
                The type of this Service
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - schedule : dict
                - runtime_plan : str
                    Only affects the service when deployed. On Demand means that the
                    service will be turned on when viewed and automatically turned off
                    after periods of inactivity.  Specific Times means the service will
                    be on when scheduled. Always On means the deployed service will
                    always be on.
                - recurrences : list[dict]
                    List of day-hour combinations this item is scheduled for

                    - scheduled_days : list[int]
                        Days it is scheduled on, based on numeric value starting at 0
                        for Sunday
                    - scheduled_hours : list[int]
                        Hours it is scheduled on
            - time_zone : str
            - replicas : int
                The number of Service replicas to deploy. When maxReplicas is set,
                this field defines the minimum number of replicas to deploy.
            - max_replicas : int
                The maximum number of Service replicas to deploy. Defining this field
                enables autoscaling.
            - instance_type : str
                The EC2 instance type to deploy to.
            - memory : int
                The amount of memory allocated to each replica of the Service.
            - cpu : int
                The amount of cpu allocated to each replica of the the Service.
            - created_at : str (time)
            - updated_at : str (time)
            - credentials : list[int]
                A list of credential IDs to pass to the Service.
            - permission_set_id : int
                The ID of the associated permission set, if any.
            - git_repo_url : str
                The url for the git repo where the Service code lives.
            - git_repo_ref : str
                The git reference to use when pulling code from the repo.
            - git_path_dir : str
                The path to the Service code within the git repo. If unspecified, the
                root directory will be used.
            - report_id : int
                The ID of the associated report.
            - current_deployment : dict
                - deployment_id : int
                    The ID for this deployment.
                - user_id : int
                    The ID of the owner.
                - host : str
                    Domain of the deployment.
                - name : str
                    Name of the deployment.
                - docker_image_name : str
                    The name of the docker image to pull from DockerHub.
                - docker_image_tag : str
                    The tag of the docker image to pull from DockerHub (default:
                    latest).
                - display_url : str
                    A signed URL for viewing the deployed item.
                - instance_type : str
                    The EC2 instance type requested for the deployment.
                - memory : int
                    The memory allocated to the deployment, in MB.
                - cpu : int
                    The cpu allocated to the deployment, in millicores.
                - state : str
                    The state of the deployment.
                - state_message : str
                    A detailed description of the state.
                - max_memory_usage : float (float)
                    If the deployment has finished, the maximum amount of memory used
                    during the deployment, in MB.
                - max_cpu_usage : float (float)
                    If the deployment has finished, the maximum amount of cpu used
                    during the deployment, in millicores.
                - created_at : str (time)
                - updated_at : str (time)
                - service_id : int
                    The ID of owning Service
            - current_url : str
                The URL that the service is hosted at.
            - environment_variables : dict
                Environment Variables to be passed into the Service.
            - notifications : dict
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the service fails.
                - failure_on : bool
                    If failure email notifications are on
            - partition_label : str
                The partition label used to run this object.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def list_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a Service belongs to

        Parameters
        ----------
        id : int
            The ID of the Service.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a Service to a project

        Parameters
        ----------
        id : int
            The ID of the Service.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a Service from a project

        Parameters
        ----------
        id : int
            The ID of the Service.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_deployments(
        self,
        service_id: int,
        deployment_id: int | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List deployments for a Service

        Parameters
        ----------
        service_id : int
            The ID of the owning Service
        deployment_id : int, optional
            The ID for this deployment
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to created_at. Must be
            one of: created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - deployment_id : int
                The ID for this deployment.
            - user_id : int
                The ID of the owner.
            - host : str
                Domain of the deployment.
            - name : str
                Name of the deployment.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - instance_type : str
                The EC2 instance type requested for the deployment.
            - memory : int
                The memory allocated to the deployment, in MB.
            - cpu : int
                The cpu allocated to the deployment, in millicores.
            - state : str
                The state of the deployment.
            - state_message : str
                A detailed description of the state.
            - max_memory_usage : float (float)
                If the deployment has finished, the maximum amount of memory used
                during the deployment, in MB.
            - max_cpu_usage : float (float)
                If the deployment has finished, the maximum amount of cpu used during
                the deployment, in millicores.
            - created_at : str (time)
            - updated_at : str (time)
            - service_id : int
                The ID of owning Service
        """
        ...

    def post_deployments(
        self,
        service_id: int,
        deployment_id: int | None = ...,
    ) -> Response:
        """Deploy a Service

        Parameters
        ----------
        service_id : int
            The ID of the owning Service
        deployment_id : int, optional
            The ID for this deployment

        Returns
        -------
        :class:`civis.response.Response`
            - deployment_id : int
                The ID for this deployment.
            - user_id : int
                The ID of the owner.
            - host : str
                Domain of the deployment.
            - name : str
                Name of the deployment.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - display_url : str
                A signed URL for viewing the deployed item.
            - instance_type : str
                The EC2 instance type requested for the deployment.
            - memory : int
                The memory allocated to the deployment, in MB.
            - cpu : int
                The cpu allocated to the deployment, in millicores.
            - state : str
                The state of the deployment.
            - state_message : str
                A detailed description of the state.
            - max_memory_usage : float (float)
                If the deployment has finished, the maximum amount of memory used
                during the deployment, in MB.
            - max_cpu_usage : float (float)
                If the deployment has finished, the maximum amount of cpu used during
                the deployment, in millicores.
            - created_at : str (time)
            - updated_at : str (time)
            - service_id : int
                The ID of owning Service
        """
        ...

    def get_deployments(
        self,
        service_id: int,
        deployment_id: int,
    ) -> Response:
        """Get details about a Service deployment

        Parameters
        ----------
        service_id : int
            The ID of the owning Service
        deployment_id : int
            The ID for this deployment

        Returns
        -------
        :class:`civis.response.Response`
            - deployment_id : int
                The ID for this deployment.
            - user_id : int
                The ID of the owner.
            - host : str
                Domain of the deployment.
            - name : str
                Name of the deployment.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - display_url : str
                A signed URL for viewing the deployed item.
            - instance_type : str
                The EC2 instance type requested for the deployment.
            - memory : int
                The memory allocated to the deployment, in MB.
            - cpu : int
                The cpu allocated to the deployment, in millicores.
            - state : str
                The state of the deployment.
            - state_message : str
                A detailed description of the state.
            - max_memory_usage : float (float)
                If the deployment has finished, the maximum amount of memory used
                during the deployment, in MB.
            - max_cpu_usage : float (float)
                If the deployment has finished, the maximum amount of cpu used during
                the deployment, in millicores.
            - created_at : str (time)
            - updated_at : str (time)
            - service_id : int
                The ID of owning Service
        """
        ...

    def delete_deployments(
        self,
        service_id: int,
        deployment_id: int,
    ) -> Response:
        """Delete a Service deployment

        Parameters
        ----------
        service_id : int
            The ID of the owning Service
        deployment_id : int
            The ID for this deployment

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def post_redeploy(
        self,
        service_id: int,
        deployment_id: int | None = ...,
    ) -> Response:
        """Redeploy a Service

        Parameters
        ----------
        service_id : int
            The ID of the owning Service
        deployment_id : int, optional
            The ID for this deployment

        Returns
        -------
        :class:`civis.response.Response`
            - deployment_id : int
                The ID for this deployment.
            - user_id : int
                The ID of the owner.
            - host : str
                Domain of the deployment.
            - name : str
                Name of the deployment.
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - display_url : str
                A signed URL for viewing the deployed item.
            - instance_type : str
                The EC2 instance type requested for the deployment.
            - memory : int
                The memory allocated to the deployment, in MB.
            - cpu : int
                The cpu allocated to the deployment, in millicores.
            - state : str
                The state of the deployment.
            - state_message : str
                A detailed description of the state.
            - max_memory_usage : float (float)
                If the deployment has finished, the maximum amount of memory used
                during the deployment, in MB.
            - max_cpu_usage : float (float)
                If the deployment has finished, the maximum amount of cpu used during
                the deployment, in millicores.
            - created_at : str (time)
            - updated_at : str (time)
            - service_id : int
                The ID of owning Service
        """
        ...

    def list_deployments_logs(
        self,
        id: int,
        deployment_id: int,
        start_at: str | None = ...,
        end_at: str | None = ...,
        limit: int | None = ...,
    ) -> Response:
        """Get the logs for a Service deployment

        Parameters
        ----------
        id : int
            The ID of the owning Service.
        deployment_id : int
            The ID for this deployment.
        start_at : str, optional
            Log entries with a lower timestamp will be omitted.
        end_at : str, optional
            Log entries with a higher timestamp will be omitted.
        limit : int, optional
            The maximum number of log messages to return. Default of 10000.

        Returns
        -------
        :class:`civis.response.Response`
            - message : str
                The log message.
            - stream : str
                The stream of the log. One of "stdout", "stderr".
            - created_at : str (date-time)
                The time the log was created.
            - source : str
                The source of the log. One of "system", "user".
        """
        ...

    def post_clone(
        self,
        id: int,
    ) -> Response:
        """Clone this Service

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this Service.
            - name : str
                The name of this Service.
            - description : str
                The description of this Service.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - type : str
                The type of this Service
            - docker_image_name : str
                The name of the docker image to pull from DockerHub.
            - docker_image_tag : str
                The tag of the docker image to pull from DockerHub (default: latest).
            - schedule : dict
                - runtime_plan : str
                    Only affects the service when deployed. On Demand means that the
                    service will be turned on when viewed and automatically turned off
                    after periods of inactivity.  Specific Times means the service will
                    be on when scheduled. Always On means the deployed service will
                    always be on.
                - recurrences : list[dict]
                    List of day-hour combinations this item is scheduled for

                    - scheduled_days : list[int]
                        Days it is scheduled on, based on numeric value starting at 0
                        for Sunday
                    - scheduled_hours : list[int]
                        Hours it is scheduled on
            - time_zone : str
            - replicas : int
                The number of Service replicas to deploy. When maxReplicas is set,
                this field defines the minimum number of replicas to deploy.
            - max_replicas : int
                The maximum number of Service replicas to deploy. Defining this field
                enables autoscaling.
            - instance_type : str
                The EC2 instance type to deploy to.
            - memory : int
                The amount of memory allocated to each replica of the Service.
            - cpu : int
                The amount of cpu allocated to each replica of the the Service.
            - created_at : str (time)
            - updated_at : str (time)
            - credentials : list[int]
                A list of credential IDs to pass to the Service.
            - permission_set_id : int
                The ID of the associated permission set, if any.
            - git_repo_url : str
                The url for the git repo where the Service code lives.
            - git_repo_ref : str
                The git reference to use when pulling code from the repo.
            - git_path_dir : str
                The path to the Service code within the git repo. If unspecified, the
                root directory will be used.
            - report_id : int
                The ID of the associated report.
            - current_deployment : dict
                - deployment_id : int
                    The ID for this deployment.
                - user_id : int
                    The ID of the owner.
                - host : str
                    Domain of the deployment.
                - name : str
                    Name of the deployment.
                - docker_image_name : str
                    The name of the docker image to pull from DockerHub.
                - docker_image_tag : str
                    The tag of the docker image to pull from DockerHub (default:
                    latest).
                - display_url : str
                    A signed URL for viewing the deployed item.
                - instance_type : str
                    The EC2 instance type requested for the deployment.
                - memory : int
                    The memory allocated to the deployment, in MB.
                - cpu : int
                    The cpu allocated to the deployment, in millicores.
                - state : str
                    The state of the deployment.
                - state_message : str
                    A detailed description of the state.
                - max_memory_usage : float (float)
                    If the deployment has finished, the maximum amount of memory used
                    during the deployment, in MB.
                - max_cpu_usage : float (float)
                    If the deployment has finished, the maximum amount of cpu used
                    during the deployment, in millicores.
                - created_at : str (time)
                - updated_at : str (time)
                - service_id : int
                    The ID of owning Service
            - current_url : str
                The URL that the service is hosted at.
            - environment_variables : dict
                Environment Variables to be passed into the Service.
            - notifications : dict
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the service fails.
                - failure_on : bool
                    If failure email notifications are on
            - partition_label : str
                The partition label used to run this object.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - archived : str
                The archival status of the requested item(s).
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def post_tokens(
        self,
        id: int,
        name: str,
        machine_token: bool | None = ...,
        expires_in: int | None = ...,
    ) -> Response:
        """Create a new long-lived service token

        Parameters
        ----------
        id : int
            The ID of the service.
        name : str
            The name of the token.
        machine_token : bool, optional
            If true, create a compact token with no user information.
        expires_in : int, optional
            The number of seconds until the token should expire

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the token.
            - name : str
                The name of the token.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - machine_token : bool
                If true, this token is not tied to a particular user.
            - expires_at : str (date-time)
                The date and time when the token expires.
            - created_at : str (time)
                The date and time when the token was created.
            - token : str
                The value of the token. Only returned when the token is first created.
        """
        ...

    def list_tokens(
        self,
        id: int,
    ) -> Response:
        """List tokens

        Parameters
        ----------
        id : int
            The ID of the service.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the token.
            - name : str
                The name of the token.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - machine_token : bool
                If true, this token is not tied to a particular user.
            - expires_at : str (date-time)
                The date and time when the token expires.
            - created_at : str (time)
                The date and time when the token was created.
        """
        ...

    def delete_tokens(
        self,
        id: int,
        token_id: int,
    ) -> Response:
        """Revoke a token by id

        Parameters
        ----------
        id : int
            The ID of the service.
        token_id : int
            The ID of the token.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

class _Storage_Hosts:
    def list(
        self,
    ) -> Response:
        """List the storage hosts

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the storage host.
            - owner : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The human readable name for the storage host.
            - provider : str
                The storage provider.One of: s3.
            - bucket : str
                The bucket for this storage host.
            - s3_options : dict
                - region : str
                    The region for this storage host (ex. "us-east-1")
        """
        ...

    def post(
        self,
        provider: str,
        bucket: str,
        name: str,
        s3_options: dict | None = ...,
    ) -> Response:
        """Create a new storage host

        Parameters
        ----------
        provider : str
            The storage provider.One of: s3.
        bucket : str
            The bucket for this storage host.
        name : str
            The human readable name for the storage host.
        s3_options : dict, optional
            - region : str
                The region for this storage host (ex. "us-east-1")

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the storage host.
            - owner : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The human readable name for the storage host.
            - provider : str
                The storage provider.One of: s3.
            - bucket : str
                The bucket for this storage host.
            - s3_options : dict
                - region : str
                    The region for this storage host (ex. "us-east-1")
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Get a storage host

        Parameters
        ----------
        id : int
            The ID of the storage host.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the storage host.
            - owner : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The human readable name for the storage host.
            - provider : str
                The storage provider.One of: s3.
            - bucket : str
                The bucket for this storage host.
            - s3_options : dict
                - region : str
                    The region for this storage host (ex. "us-east-1")
        """
        ...

    def put(
        self,
        id: int,
        name: str,
        provider: str,
        bucket: str,
        s3_options: dict | None = ...,
    ) -> Response:
        """Replace all attributes of this storage host

        Parameters
        ----------
        id : int
            The ID of the storage host.
        name : str
            The human readable name for the storage host.
        provider : str
            The storage provider.One of: s3.
        bucket : str
            The bucket for this storage host.
        s3_options : dict, optional
            - region : str
                The region for this storage host (ex. "us-east-1")

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the storage host.
            - owner : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The human readable name for the storage host.
            - provider : str
                The storage provider.One of: s3.
            - bucket : str
                The bucket for this storage host.
            - s3_options : dict
                - region : str
                    The region for this storage host (ex. "us-east-1")
        """
        ...

    def patch(
        self,
        id: int,
        name: str | None = ...,
        provider: str | None = ...,
        bucket: str | None = ...,
        s3_options: dict | None = ...,
    ) -> Response:
        """Update some attributes of this storage host

        Parameters
        ----------
        id : int
            The ID of the storage host.
        name : str, optional
            The human readable name for the storage host.
        provider : str, optional
            The storage provider.One of: s3.
        bucket : str, optional
            The bucket for this storage host.
        s3_options : dict, optional
            - region : str
                The region for this storage host (ex. "us-east-1")

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the storage host.
            - owner : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The human readable name for the storage host.
            - provider : str
                The storage provider.One of: s3.
            - bucket : str
                The bucket for this storage host.
            - s3_options : dict
                - region : str
                    The region for this storage host (ex. "us-east-1")
        """
        ...

    def list_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

class _Table_Tags:
    def list(
        self,
        name: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Table Tags

        Parameters
        ----------
        name : str, optional
            Name of the tag. If it is provided, the results will be filtered by name
        limit : int, optional
            Number of results to return. Defaults to 50. Maximum allowed is 1000.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to name. Must be one
            of: name, user, table_count.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to asc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                Table Tag ID
            - name : str
                Table Tag Name
            - table_count : int
                The total number of tables associated with the tag.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
        """
        ...

    def post(
        self,
        name: str,
    ) -> Response:
        """Create a Table Tag

        Parameters
        ----------
        name : str
            Table Tag Name

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                Table Tag ID
            - name : str
                Table Tag Name
            - created_at : str (date-time)
                The date the tag was created.
            - updated_at : str (date-time)
                The date the tag was recently updated on.
            - table_count : int
                The total number of tables associated with the tag.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Get a Table Tag

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                Table Tag ID
            - name : str
                Table Tag Name
            - created_at : str (date-time)
                The date the tag was created.
            - updated_at : str (date-time)
                The date the tag was recently updated on.
            - table_count : int
                The total number of tables associated with the tag.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
        """
        ...

    def delete(
        self,
        id: int,
    ) -> Response:
        """Delete a Table Tag

        Parameters
        ----------
        id : int

        Returns
        -------
        None
            Response code 204: success
        """
        ...

class _Tables:
    def post_enhancements_geocodings(
        self,
        source_table_id: int,
    ) -> Response:
        """.. warning::

            Warning: The tables/:source_table_id/enhancements/geocodings endpoint is deprecated and will be removed after January 1, 2021.

        Geocode a table

        Parameters
        ----------
        source_table_id : int
            The ID of the table to be enhanced.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the enhancement.
            - source_table_id : int
                The ID of the table that was enhanced.
            - state : str
                The state of the enhancement, one of 'queued' 'running' 'succeeded'
                'failed' or 'cancelled'.
            - enhanced_table_schema : str
                The schema name of the table created by the enhancement.
            - enhanced_table_name : str
                The name of the table created by the enhancement.
        """
        ...

    def post_enhancements_cass_ncoa(
        self,
        source_table_id: int,
        perform_ncoa: bool | None = ...,
        ncoa_credential_id: int | None = ...,
        output_level: str | None = ...,
        batch_size: int | None = ...,
    ) -> Response:
        """.. warning::

            Warning: The tables/:source_table_id/enhancements/cass-ncoa endpoint is deprecated and will be removed after January 1, 2021.

        Standardize addresses in a table

        Parameters
        ----------
        source_table_id : int
            The ID of the table to be enhanced.
        perform_ncoa : bool, optional
            Whether to update addresses for records matching the National Change of
            Address (NCOA) database.
        ncoa_credential_id : int, optional
            Credential to use when performing NCOA updates. Required if 'performNcoa'
            is true.
        output_level : str, optional
            The set of fields persisted by a CASS or NCOA enhancement.For CASS
            enhancements, one of 'cass' or 'all.'For NCOA enhancements, one of 'cass',
            'ncoa' , 'coalesced' or 'all'.By default, all fields will be returned.
        batch_size : int, optional
            The maximum number of records processed at a time. Note that this parameter
            is not available to all users.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the enhancement.
            - source_table_id : int
                The ID of the table that was enhanced.
            - state : str
                The state of the enhancement, one of 'queued' 'running' 'succeeded'
                'failed' or 'cancelled'.
            - enhanced_table_schema : str
                The schema name of the table created by the enhancement.
            - enhanced_table_name : str
                The name of the table created by the enhancement.
            - perform_ncoa : bool
                Whether to update addresses for records matching the National Change of
                Address (NCOA) database.
            - ncoa_credential_id : int
                Credential to use when performing NCOA updates. Required if
                'performNcoa' is true.
            - output_level : str
                The set of fields persisted by a CASS or NCOA enhancement.For CASS
                enhancements, one of 'cass' or 'all.'For NCOA enhancements, one of
                'cass', 'ncoa' , 'coalesced' or 'all'.By default, all fields will be
                returned.
            - batch_size : int
                The maximum number of records processed at a time. Note that this
                parameter is not available to all users.
        """
        ...

    def get_enhancements_geocodings(
        self,
        id: int,
        source_table_id: int,
    ) -> Response:
        """.. warning::

            Warning: The tables/:source_table_id/enhancements/geocodings/:id endpoint is deprecated and will be removed after January 1, 2021.

        View the status of a geocoding table enhancement

        Parameters
        ----------
        id : int
            The ID of the enhancement.
        source_table_id : int
            The ID of the table that was enhanced.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the enhancement.
            - source_table_id : int
                The ID of the table that was enhanced.
            - state : str
                The state of the enhancement, one of 'queued' 'running' 'succeeded'
                'failed' or 'cancelled'.
            - enhanced_table_schema : str
                The schema name of the table created by the enhancement.
            - enhanced_table_name : str
                The name of the table created by the enhancement.
        """
        ...

    def get_enhancements_cass_ncoa(
        self,
        id: int,
        source_table_id: int,
    ) -> Response:
        """.. warning::

            Warning: The tables/:source_table_id/enhancements/cass-ncoa/:id endpoint is deprecated and will be removed after January 1, 2021.

        View the status of a CASS / NCOA table enhancement

        Parameters
        ----------
        id : int
            The ID of the enhancement.
        source_table_id : int
            The ID of the table that was enhanced.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the enhancement.
            - source_table_id : int
                The ID of the table that was enhanced.
            - state : str
                The state of the enhancement, one of 'queued' 'running' 'succeeded'
                'failed' or 'cancelled'.
            - enhanced_table_schema : str
                The schema name of the table created by the enhancement.
            - enhanced_table_name : str
                The name of the table created by the enhancement.
            - perform_ncoa : bool
                Whether to update addresses for records matching the National Change of
                Address (NCOA) database.
            - ncoa_credential_id : int
                Credential to use when performing NCOA updates. Required if
                'performNcoa' is true.
            - output_level : str
                The set of fields persisted by a CASS or NCOA enhancement.For CASS
                enhancements, one of 'cass' or 'all.'For NCOA enhancements, one of
                'cass', 'ncoa' , 'coalesced' or 'all'.By default, all fields will be
                returned.
            - batch_size : int
                The maximum number of records processed at a time. Note that this
                parameter is not available to all users.
        """
        ...

    def post_scan(
        self,
        database_id: int,
        schema: str,
        table_name: str,
        stats_priority: str | None = ...,
    ) -> Response:
        """Creates and enqueues a single table scanner job on a new table

        Parameters
        ----------
        database_id : int
            The ID of the database.
        schema : str
            The name of the schema containing the table.
        table_name : str
            The name of the table.
        stats_priority : str, optional
            When to sync table statistics. Valid Options are the following. Option:
            'flag' means to flag stats for the next scheduled run of a full table scan
            on the database. Option: 'block' means to block this job on stats syncing.
            Option: 'queue' means to queue a separate job for syncing stats and do not
            block this job on the queued job. Defaults to 'flag'

        Returns
        -------
        :class:`civis.response.Response`
            - job_id : int
                The ID of the job created.
            - run_id : int
                The ID of the run created.
        """
        ...

    def post_refresh(
        self,
        id: int,
    ) -> Response:
        """.. warning::

            Warning: The tables/:id/refresh endpoint is deprecated. Please use tables/scan from now on.

        Request a refresh for column and table statistics

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the table.
            - database_id : int
                The ID of the database.
            - schema : str
                The name of the schema containing the table.
            - name : str
                Name of the table.
            - description : str
                The description of the table, as specified by the table owner
            - is_view : bool
                True if this table represents a view. False if it represents a regular
                table.
            - row_count : int
                The number of rows in the table.
            - column_count : int
                The number of columns in the table.
            - size_mb : float (float)
                The size of the table in megabytes.
            - owner : str
                The database username of the table's owner.
            - distkey : str
                The column used as the Amazon Redshift distkey.
            - sortkeys : str
                The column used as the Amazon Redshift sortkey.
            - refresh_status : str
                How up-to-date the table's statistics on row counts, null counts,
                distinct counts, and values distributions are. One of: refreshing,
                stale, or current.
            - last_refresh : str (date-time)
                The time of the last statistics refresh.
            - data_updated_at : str (date-time)
                The last time that Civis Platform captured a change in this table.Only
                applicable for Redshift tables; please see the Civis help desk for more
                info.
            - schema_updated_at : str (date-time)
                The last time that Civis Platform captured a change to the table
                attributes/structure.Only applicable for Redshift tables; please see
                the Civis help desk for more info.
            - refresh_id : str
                The ID of the most recent statistics refresh.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - primary_keys : list[str]
                The primary keys for this table.
            - last_modified_keys : list[str]
                The columns indicating an entry's modification status for this table.
            - table_tags : list[dict]
                The table tags associated with this table.

                - id : int
                    Table Tag ID
                - name : str
                    Table Tag Name
            - ontology_mapping : dict
                The ontology-key to column-name mapping.  See /ontology for the list of
                valid ontology keys.
            - columns : list[dict]
                - name : str
                    Name of the column.
                - civis_data_type : str
                    The generic data type of the column (ex. "string"). Since this is
                    database-agnostic, it may be helpful when loading data to R/Python.
                - sql_type : str
                    The database-specific SQL type of the column (ex. "varchar(30)").
                - sample_values : list[str]
                    A sample of values from the column.
                - encoding : str
                    The compression encoding for this columnSee: http://docs.aws.amazon
                    .com/redshift/latest/dg/c_Compression_encodings.html
                - description : str
                    The description of the column, as specified by the table owner
                - order : int
                    Relative position of the column in the table.
                - min_value : str
                    Smallest value in the column.
                - max_value : str
                    Largest value in the column.
                - avg_value : float (float)
                    This parameter is deprecated.
                - stddev : float (float)
                    This parameter is deprecated.
                - value_distribution_percent : dict
                    A mapping between each value in the column and the percentage of
                    rows with that value.Only present for tables with fewer than
                    approximately 25,000,000 rows and for columns with fewer than
                    twenty distinct values.
                - coverage_count : int
                    Number of non-null values in the column.
                - null_count : int
                    Number of null values in the column.
                - possible_dependent_variable_types : list[str]
                    Possible dependent variable types the column may be used to model.
                    Null if it may not be used as a dependent variable.
                - useable_as_independent_variable : bool
                    Whether the column may be used as an independent variable to train
                    a model.
                - useable_as_primary_key : bool
                    Whether the column may be used as an primary key to identify table
                    rows.
                - value_distribution : dict
                    An object mapping distinct values in the column to the number of
                    times they appear in the column
                - distinct_count : int
                    Number of distinct values in the column. NULL values are counted
                    and treated as a single distinct value.
            - joins : list[dict]
                - id : int
                - left_table_id : int
                - left_identifier : str
                - right_table_id : int
                - right_identifier : str
                - on : str
                - left_join : bool
                - created_at : str (time)
                - updated_at : str (time)
            - multipart_key : list[str]
            - enhancements : list[dict]
                - type : str
                - created_at : str (time)
                - updated_at : str (time)
                - join_id : int
            - view_def : str
            - table_def : str
            - outgoing_table_matches : list[dict]
                - source_table_id : int
                    Source table
                - target_type : str
                    Target type
                - target_id : int
                    Target ID
                - target : dict
                    - name : str
                - job : dict
                    - id : int
                    - name : str
                    - type : str
                    - from_template_id : int
                    - state : str
                        Whether the job is idle, queued, running, cancelled, or failed.
                    - created_at : str (date-time)
                    - updated_at : str (date-time)
                    - runs : list[dict]
                        Information about the most recent runs of the job.

                        - id : int
                        - state : str
                        - created_at : str (time)
                            The time that the run was queued.
                        - started_at : str (time)
                            The time that the run started.
                        - finished_at : str (time)
                            The time that the run completed.
                        - error : str
                            The error message for this run, if present.
                    - last_run : dict
                        - id : int
                        - state : str
                        - created_at : str (time)
                            The time that the run was queued.
                        - started_at : str (time)
                            The time that the run started.
                        - finished_at : str (time)
                            The time that the run completed.
                        - error : str
                            The error message for this run, if present.
                    - hidden : bool
                        The hidden status of the item.
                    - match_options : dict
                        - max_matches : int
                        - threshold : str
        """
        ...

    def list(
        self,
        database_id: int | None = ...,
        schema: str | None = ...,
        name: str | None = ...,
        search: str | None = ...,
        table_tag_ids: list[int] | None = ...,
        credential_id: int | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List tables

        Parameters
        ----------
        database_id : int, optional
            The ID of the database.
        schema : str, optional
            If specified, will be used to filter the tables returned. Substring
            matching is supported with "%" and "*" wildcards (e.g., "schema=%census%"
            will return both "client_census.table" and "census_2010.table").
        name : str, optional
            If specified, will be used to filter the tables returned. Substring
            matching is supported with "%" and "*" wildcards (e.g., "name=%table%" will
            return both "table1" and "my table").
        search : str, optional
            If specified, will be used to filter the tables returned. Will search
            across schema and name (in the full form schema.name) and will return any
            full name containing the search string.
        table_tag_ids : list[int], optional
            If specified, will be used to filter the tables returned. Will search
            across Table Tags and will return any tables that have one of the matching
            Table Tags.
        credential_id : int, optional
            If specified, will be used instead of the default credential to filter the
            tables returned.
        limit : int, optional
            Number of results to return. Defaults to 50. Maximum allowed is 1000.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to schema. Must be one
            of: schema, name, search, table_tag_ids, credential_id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to asc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the table.
            - database_id : int
                The ID of the database.
            - schema : str
                The name of the schema containing the table.
            - name : str
                Name of the table.
            - description : str
                The description of the table, as specified by the table owner
            - is_view : bool
                True if this table represents a view. False if it represents a regular
                table.
            - row_count : int
                The number of rows in the table.
            - column_count : int
                The number of columns in the table.
            - size_mb : float (float)
                The size of the table in megabytes.
            - owner : str
                The database username of the table's owner.
            - distkey : str
                The column used as the Amazon Redshift distkey.
            - sortkeys : str
                The column used as the Amazon Redshift sortkey.
            - refresh_status : str
                How up-to-date the table's statistics on row counts, null counts,
                distinct counts, and values distributions are. One of: refreshing,
                stale, or current.
            - last_refresh : str (date-time)
                The time of the last statistics refresh.
            - refresh_id : str
                The ID of the most recent statistics refresh.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - table_tags : list[dict]
                The table tags associated with this table.

                - id : int
                    Table Tag ID
                - name : str
                    Table Tag Name
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Show basic table info

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the table.
            - database_id : int
                The ID of the database.
            - schema : str
                The name of the schema containing the table.
            - name : str
                Name of the table.
            - description : str
                The description of the table, as specified by the table owner
            - is_view : bool
                True if this table represents a view. False if it represents a regular
                table.
            - row_count : int
                The number of rows in the table.
            - column_count : int
                The number of columns in the table.
            - size_mb : float (float)
                The size of the table in megabytes.
            - owner : str
                The database username of the table's owner.
            - distkey : str
                The column used as the Amazon Redshift distkey.
            - sortkeys : str
                The column used as the Amazon Redshift sortkey.
            - refresh_status : str
                How up-to-date the table's statistics on row counts, null counts,
                distinct counts, and values distributions are. One of: refreshing,
                stale, or current.
            - last_refresh : str (date-time)
                The time of the last statistics refresh.
            - data_updated_at : str (date-time)
                The last time that Civis Platform captured a change in this table.Only
                applicable for Redshift tables; please see the Civis help desk for more
                info.
            - schema_updated_at : str (date-time)
                The last time that Civis Platform captured a change to the table
                attributes/structure.Only applicable for Redshift tables; please see
                the Civis help desk for more info.
            - refresh_id : str
                The ID of the most recent statistics refresh.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - primary_keys : list[str]
                The primary keys for this table.
            - last_modified_keys : list[str]
                The columns indicating an entry's modification status for this table.
            - table_tags : list[dict]
                The table tags associated with this table.

                - id : int
                    Table Tag ID
                - name : str
                    Table Tag Name
            - ontology_mapping : dict
                The ontology-key to column-name mapping.  See /ontology for the list of
                valid ontology keys.
            - columns : list[dict]
                - name : str
                    Name of the column.
                - civis_data_type : str
                    The generic data type of the column (ex. "string"). Since this is
                    database-agnostic, it may be helpful when loading data to R/Python.
                - sql_type : str
                    The database-specific SQL type of the column (ex. "varchar(30)").
                - sample_values : list[str]
                    A sample of values from the column.
                - encoding : str
                    The compression encoding for this columnSee: http://docs.aws.amazon
                    .com/redshift/latest/dg/c_Compression_encodings.html
                - description : str
                    The description of the column, as specified by the table owner
                - order : int
                    Relative position of the column in the table.
                - min_value : str
                    Smallest value in the column.
                - max_value : str
                    Largest value in the column.
                - avg_value : float (float)
                    This parameter is deprecated.
                - stddev : float (float)
                    This parameter is deprecated.
                - value_distribution_percent : dict
                    A mapping between each value in the column and the percentage of
                    rows with that value.Only present for tables with fewer than
                    approximately 25,000,000 rows and for columns with fewer than
                    twenty distinct values.
                - coverage_count : int
                    Number of non-null values in the column.
                - null_count : int
                    Number of null values in the column.
                - possible_dependent_variable_types : list[str]
                    Possible dependent variable types the column may be used to model.
                    Null if it may not be used as a dependent variable.
                - useable_as_independent_variable : bool
                    Whether the column may be used as an independent variable to train
                    a model.
                - useable_as_primary_key : bool
                    Whether the column may be used as an primary key to identify table
                    rows.
                - value_distribution : dict
                    An object mapping distinct values in the column to the number of
                    times they appear in the column
                - distinct_count : int
                    Number of distinct values in the column. NULL values are counted
                    and treated as a single distinct value.
            - joins : list[dict]
                - id : int
                - left_table_id : int
                - left_identifier : str
                - right_table_id : int
                - right_identifier : str
                - on : str
                - left_join : bool
                - created_at : str (time)
                - updated_at : str (time)
            - multipart_key : list[str]
            - enhancements : list[dict]
                - type : str
                - created_at : str (time)
                - updated_at : str (time)
                - join_id : int
            - view_def : str
            - table_def : str
            - outgoing_table_matches : list[dict]
                - source_table_id : int
                    Source table
                - target_type : str
                    Target type
                - target_id : int
                    Target ID
                - target : dict
                    - name : str
                - job : dict
                    - id : int
                    - name : str
                    - type : str
                    - from_template_id : int
                    - state : str
                        Whether the job is idle, queued, running, cancelled, or failed.
                    - created_at : str (date-time)
                    - updated_at : str (date-time)
                    - runs : list[dict]
                        Information about the most recent runs of the job.

                        - id : int
                        - state : str
                        - created_at : str (time)
                            The time that the run was queued.
                        - started_at : str (time)
                            The time that the run started.
                        - finished_at : str (time)
                            The time that the run completed.
                        - error : str
                            The error message for this run, if present.
                    - last_run : dict
                        - id : int
                        - state : str
                        - created_at : str (time)
                            The time that the run was queued.
                        - started_at : str (time)
                            The time that the run started.
                        - finished_at : str (time)
                            The time that the run completed.
                        - error : str
                            The error message for this run, if present.
                    - hidden : bool
                        The hidden status of the item.
                    - match_options : dict
                        - max_matches : int
                        - threshold : str
        """
        ...

    def patch(
        self,
        id: int,
        ontology_mapping: dict | None = ...,
        description: str | None = ...,
        primary_keys: list[str] | None = ...,
        last_modified_keys: list[str] | None = ...,
    ) -> Response:
        """Update a table

        Parameters
        ----------
        id : int
            The ID of the table.
        ontology_mapping : dict, optional
            The ontology-key to column-name mapping.  See /ontology for the list of
            valid ontology keys.
        description : str, optional
            The user-defined description of the table.
        primary_keys : list[str], optional
            A list of column(s) which together uniquely identify a row in the
            data.These columns must not contain NULL values.
        last_modified_keys : list[str], optional
            The columns indicating when a row was last modified.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the table.
            - database_id : int
                The ID of the database.
            - schema : str
                The name of the schema containing the table.
            - name : str
                Name of the table.
            - description : str
                The description of the table, as specified by the table owner
            - is_view : bool
                True if this table represents a view. False if it represents a regular
                table.
            - row_count : int
                The number of rows in the table.
            - column_count : int
                The number of columns in the table.
            - size_mb : float (float)
                The size of the table in megabytes.
            - owner : str
                The database username of the table's owner.
            - distkey : str
                The column used as the Amazon Redshift distkey.
            - sortkeys : str
                The column used as the Amazon Redshift sortkey.
            - refresh_status : str
                How up-to-date the table's statistics on row counts, null counts,
                distinct counts, and values distributions are. One of: refreshing,
                stale, or current.
            - last_refresh : str (date-time)
                The time of the last statistics refresh.
            - data_updated_at : str (date-time)
                The last time that Civis Platform captured a change in this table.Only
                applicable for Redshift tables; please see the Civis help desk for more
                info.
            - schema_updated_at : str (date-time)
                The last time that Civis Platform captured a change to the table
                attributes/structure.Only applicable for Redshift tables; please see
                the Civis help desk for more info.
            - refresh_id : str
                The ID of the most recent statistics refresh.
            - last_run : dict
                - id : int
                - state : str
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
                - error : str
                    The error message for this run, if present.
            - primary_keys : list[str]
                The primary keys for this table.
            - last_modified_keys : list[str]
                The columns indicating an entry's modification status for this table.
            - table_tags : list[dict]
                The table tags associated with this table.

                - id : int
                    Table Tag ID
                - name : str
                    Table Tag Name
            - ontology_mapping : dict
                The ontology-key to column-name mapping.  See /ontology for the list of
                valid ontology keys.
        """
        ...

    def list_columns(
        self,
        id: int,
        name: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List columns in the specified table

        Parameters
        ----------
        id : int
        name : str, optional
            Search for columns with the given name, within the specified table.
        limit : int, optional
            Number of results to return. Defaults to its maximum of 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to name. Must be one
            of: name, order.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to asc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - name : str
                Name of the column.
            - civis_data_type : str
                The generic data type of the column (ex. "string"). Since this is
                database-agnostic, it may be helpful when loading data to R/Python.
            - sql_type : str
                The database-specific SQL type of the column (ex. "varchar(30)").
            - sample_values : list[str]
                A sample of values from the column.
            - encoding : str
                The compression encoding for this columnSee: http://docs.aws.amazon.com
                /redshift/latest/dg/c_Compression_encodings.html
            - description : str
                The description of the column, as specified by the table owner
            - order : int
                Relative position of the column in the table.
            - min_value : str
                Smallest value in the column.
            - max_value : str
                Largest value in the column.
            - avg_value : float (float)
                This parameter is deprecated.
            - stddev : float (float)
                This parameter is deprecated.
            - value_distribution_percent : dict
                A mapping between each value in the column and the percentage of rows
                with that value.Only present for tables with fewer than approximately
                25,000,000 rows and for columns with fewer than twenty distinct values.
            - coverage_count : int
                Number of non-null values in the column.
            - null_count : int
                Number of null values in the column.
            - possible_dependent_variable_types : list[str]
                Possible dependent variable types the column may be used to model.
                Null if it may not be used as a dependent variable.
            - useable_as_independent_variable : bool
                Whether the column may be used as an independent variable to train a
                model.
            - useable_as_primary_key : bool
                Whether the column may be used as an primary key to identify table
                rows.
            - value_distribution : dict
                An object mapping distinct values in the column to the number of times
                they appear in the column
            - distinct_count : int
                Number of distinct values in the column. NULL values are counted and
                treated as a single distinct value.
        """
        ...

    def put_tags(
        self,
        id: int,
        table_tag_id: int,
    ) -> Response:
        """Add a tag to a table

        Parameters
        ----------
        id : int
            The ID of the table.
        table_tag_id : int
            The ID of the tag.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the table.
            - table_tag_id : int
                The ID of the tag.
        """
        ...

    def delete_tags(
        self,
        id: int,
        table_tag_id: int,
    ) -> Response:
        """Add a tag to a table

        Parameters
        ----------
        id : int
            The ID of the table.
        table_tag_id : int
            The ID of the tag.

        Returns
        -------
        None
            Response code 200: success
        """
        ...

    def list_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a Table belongs to

        Parameters
        ----------
        id : int
            The ID of the Table.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a Table to a project

        Parameters
        ----------
        id : int
            The ID of the Table.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a Table from a project

        Parameters
        ----------
        id : int
            The ID of the Table.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

class _Templates:
    def list_reports_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_reports_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_reports_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_reports_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_reports_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_reports_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_reports_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def list_reports(
        self,
        hidden: bool | None = ...,
        author: str | None = ...,
        category: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Report Templates

        Parameters
        ----------
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.
        author : str, optional
            If specified, return items from any of these authors. It accepts a comma-
            separated list of user IDs.
        category : str, optional
            A category to filter results by, one of: dataset-viz
        limit : int, optional
            Number of results to return. Defaults to 50. Maximum allowed is 1000.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to name. Must be one
            of: name, updated_at, created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to asc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
            - name : str
                The name of the template.
            - category : str
                The category of this report template.  Can be left blank.  Acceptable
                values are: dataset-viz
            - created_at : str (time)
            - updated_at : str (time)
            - use_count : int
                The number of uses of this template.
            - archived : bool
                Whether the template has been archived.
            - tech_reviewed : bool
                Whether this template has been audited by Civis for security
                vulnerability and correctness.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
        """
        ...

    def post_reports(
        self,
        name: str,
        code_body: str,
        category: str | None = ...,
        archived: bool | None = ...,
        provide_api_key: bool | None = ...,
        hidden: bool | None = ...,
    ) -> Response:
        """Create a Report Template

        Parameters
        ----------
        name : str
            The name of the template.
        code_body : str
            The code for the Template body.
        category : str, optional
            The category of this report template.  Can be left blank.  Acceptable
            values are: dataset-viz
        archived : bool, optional
            Whether the template has been archived.
        provide_api_key : bool, optional
            Whether reports based on this template request an API Key from the report
            viewer.
        hidden : bool, optional
            The hidden status of the item.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - name : str
                The name of the template.
            - category : str
                The category of this report template.  Can be left blank.  Acceptable
                values are: dataset-viz
            - created_at : str (time)
            - updated_at : str (time)
            - use_count : int
                The number of uses of this template.
            - archived : bool
                Whether the template has been archived.
            - tech_reviewed : bool
                Whether this template has been audited by Civis for security
                vulnerability and correctness.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auth_code_url : str
                A URL to the template's stored code body.
            - provide_api_key : bool
                Whether reports based on this template request an API Key from the
                report viewer.
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def get_reports(
        self,
        id: int,
    ) -> Response:
        """Get a Report Template

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - name : str
                The name of the template.
            - category : str
                The category of this report template.  Can be left blank.  Acceptable
                values are: dataset-viz
            - created_at : str (time)
            - updated_at : str (time)
            - use_count : int
                The number of uses of this template.
            - archived : bool
                Whether the template has been archived.
            - tech_reviewed : bool
                Whether this template has been audited by Civis for security
                vulnerability and correctness.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auth_code_url : str
                A URL to the template's stored code body.
            - provide_api_key : bool
                Whether reports based on this template request an API Key from the
                report viewer.
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def put_reports(
        self,
        id: int,
        name: str,
        code_body: str,
        category: str | None = ...,
        archived: bool | None = ...,
        provide_api_key: bool | None = ...,
    ) -> Response:
        """Replace all attributes of this Report Template

        Parameters
        ----------
        id : int
        name : str
            The name of the template.
        code_body : str
            The code for the Template body.
        category : str, optional
            The category of this report template.  Can be left blank.  Acceptable
            values are: dataset-viz
        archived : bool, optional
            Whether the template has been archived.
        provide_api_key : bool, optional
            Whether reports based on this template request an API Key from the report
            viewer.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - name : str
                The name of the template.
            - category : str
                The category of this report template.  Can be left blank.  Acceptable
                values are: dataset-viz
            - created_at : str (time)
            - updated_at : str (time)
            - use_count : int
                The number of uses of this template.
            - archived : bool
                Whether the template has been archived.
            - tech_reviewed : bool
                Whether this template has been audited by Civis for security
                vulnerability and correctness.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auth_code_url : str
                A URL to the template's stored code body.
            - provide_api_key : bool
                Whether reports based on this template request an API Key from the
                report viewer.
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def patch_reports(
        self,
        id: int,
        name: str | None = ...,
        category: str | None = ...,
        archived: bool | None = ...,
        code_body: str | None = ...,
        provide_api_key: bool | None = ...,
    ) -> Response:
        """Update some attributes of this Report Template

        Parameters
        ----------
        id : int
        name : str, optional
            The name of the template.
        category : str, optional
            The category of this report template.  Can be left blank.  Acceptable
            values are: dataset-viz
        archived : bool, optional
            Whether the template has been archived.
        code_body : str, optional
            The code for the Template body.
        provide_api_key : bool, optional
            Whether reports based on this template request an API Key from the report
            viewer.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - name : str
                The name of the template.
            - category : str
                The category of this report template.  Can be left blank.  Acceptable
                values are: dataset-viz
            - created_at : str (time)
            - updated_at : str (time)
            - use_count : int
                The number of uses of this template.
            - archived : bool
                Whether the template has been archived.
            - tech_reviewed : bool
                Whether this template has been audited by Civis for security
                vulnerability and correctness.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auth_code_url : str
                A URL to the template's stored code body.
            - provide_api_key : bool
                Whether reports based on this template request an API Key from the
                report viewer.
            - hidden : bool
                The hidden status of the item.
        """
        ...

    def list_scripts_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_scripts_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_scripts_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_scripts_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_scripts_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_scripts_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_scripts_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def list_scripts_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a Script Template belongs to

        Parameters
        ----------
        id : int
            The ID of the Script Template.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_scripts_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a Script Template to a project

        Parameters
        ----------
        id : int
            The ID of the Script Template.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_scripts_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a Script Template from a project

        Parameters
        ----------
        id : int
            The ID of the Script Template.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_scripts(
        self,
        hidden: bool | None = ...,
        author: str | None = ...,
        category: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Script Templates

        Parameters
        ----------
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.
        author : str, optional
            If specified, return items from any of these authors. It accepts a comma-
            separated list of user IDs.
        category : str, optional
            A category to filter results by, one of: import, export, enhancement,
            model, and script
        limit : int, optional
            Number of results to return. Defaults to 50. Maximum allowed is 1000.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to name. Must be one
            of: name, updated_at, created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to asc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
            - public : bool
                If the template is public or not.
            - script_id : int
                The id of the script that this template uses.
            - user_context : str
                The user context of the script that this template uses.
            - name : str
                The name of the template.
            - category : str
                The category of this template.
            - created_at : str (time)
            - updated_at : str (time)
            - use_count : int
                The number of uses of this template.
            - ui_report_id : int
                The id of the report that this template uses.
            - tech_reviewed : bool
                Whether this template has been audited by Civis for security
                vulnerability and correctness.
            - archived : bool
                Whether the template has been archived.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
        """
        ...

    def post_scripts(
        self,
        script_id: int,
        name: str,
        note: str | None = ...,
        ui_report_id: int | None = ...,
        archived: bool | None = ...,
        hidden: bool | None = ...,
    ) -> Response:
        """Create a Script Template

        Parameters
        ----------
        script_id : int
            The id of the script that this template uses.
        name : str
            The name of the template.
        note : str, optional
            A note describing what this template is used for; custom scripts created
            off this template will display this description.
        ui_report_id : int, optional
            The id of the report that this template uses.
        archived : bool, optional
            Whether the template has been archived.
        hidden : bool, optional
            The hidden status of the item.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - public : bool
                If the template is public or not.
            - script_id : int
                The id of the script that this template uses.
            - script_type : str
                The type of the template's backing script (e.g SQL, Container, Python,
                R, JavaScript)
            - user_context : str
                The user context of the script that this template uses.
            - params : list[dict]
                A definition of the parameters that this template's backing script
                accepts in the arguments field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - name : str
                The name of the template.
            - category : str
                The category of this template.
            - note : str
                A note describing what this template is used for; custom scripts
                created off this template will display this description.
            - created_at : str (time)
            - updated_at : str (time)
            - use_count : int
                The number of uses of this template.
            - ui_report_id : int
                The id of the report that this template uses.
            - tech_reviewed : bool
                Whether this template has been audited by Civis for security
                vulnerability and correctness.
            - archived : bool
                Whether the template has been archived.
            - hidden : bool
                The hidden status of the item.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def get_scripts(
        self,
        id: int,
    ) -> Response:
        """Get a Script Template

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - public : bool
                If the template is public or not.
            - script_id : int
                The id of the script that this template uses.
            - script_type : str
                The type of the template's backing script (e.g SQL, Container, Python,
                R, JavaScript)
            - user_context : str
                The user context of the script that this template uses.
            - params : list[dict]
                A definition of the parameters that this template's backing script
                accepts in the arguments field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - name : str
                The name of the template.
            - category : str
                The category of this template.
            - note : str
                A note describing what this template is used for; custom scripts
                created off this template will display this description.
            - created_at : str (time)
            - updated_at : str (time)
            - use_count : int
                The number of uses of this template.
            - ui_report_id : int
                The id of the report that this template uses.
            - tech_reviewed : bool
                Whether this template has been audited by Civis for security
                vulnerability and correctness.
            - archived : bool
                Whether the template has been archived.
            - hidden : bool
                The hidden status of the item.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def put_scripts(
        self,
        id: int,
        name: str,
        note: str | None = ...,
        ui_report_id: int | None = ...,
        archived: bool | None = ...,
    ) -> Response:
        """Replace all attributes of this Script Template

        Parameters
        ----------
        id : int
        name : str
            The name of the template.
        note : str, optional
            A note describing what this template is used for; custom scripts created
            off this template will display this description.
        ui_report_id : int, optional
            The id of the report that this template uses.
        archived : bool, optional
            Whether the template has been archived.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - public : bool
                If the template is public or not.
            - script_id : int
                The id of the script that this template uses.
            - script_type : str
                The type of the template's backing script (e.g SQL, Container, Python,
                R, JavaScript)
            - user_context : str
                The user context of the script that this template uses.
            - params : list[dict]
                A definition of the parameters that this template's backing script
                accepts in the arguments field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - name : str
                The name of the template.
            - category : str
                The category of this template.
            - note : str
                A note describing what this template is used for; custom scripts
                created off this template will display this description.
            - created_at : str (time)
            - updated_at : str (time)
            - use_count : int
                The number of uses of this template.
            - ui_report_id : int
                The id of the report that this template uses.
            - tech_reviewed : bool
                Whether this template has been audited by Civis for security
                vulnerability and correctness.
            - archived : bool
                Whether the template has been archived.
            - hidden : bool
                The hidden status of the item.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

    def patch_scripts(
        self,
        id: int,
        name: str | None = ...,
        note: str | None = ...,
        ui_report_id: int | None = ...,
        archived: bool | None = ...,
    ) -> Response:
        """Update some attributes of this Script Template

        Parameters
        ----------
        id : int
        name : str, optional
            The name of the template.
        note : str, optional
            A note describing what this template is used for; custom scripts created
            off this template will display this description.
        ui_report_id : int, optional
            The id of the report that this template uses.
        archived : bool, optional
            Whether the template has been archived.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
            - public : bool
                If the template is public or not.
            - script_id : int
                The id of the script that this template uses.
            - script_type : str
                The type of the template's backing script (e.g SQL, Container, Python,
                R, JavaScript)
            - user_context : str
                The user context of the script that this template uses.
            - params : list[dict]
                A definition of the parameters that this template's backing script
                accepts in the arguments field.

                - name : str
                    The variable's name as used within your code.
                - label : str
                    The label to present to users when asking them for the value.
                - description : str
                    A short sentence or fragment describing this parameter to the end
                    user.
                - type : str
                    The type of parameter. Valid options: string, multi_line_string,
                    integer, float, bool, file, table, database, credential_aws,
                    credential_redshift, or credential_custom
                - required : bool
                    Whether this param is required.
                - value : str
                    The value you would like to set this param to. Setting this value
                    makes this parameter a fixed param.
                - default : str
                    If an argument for this parameter is not defined, it will use this
                    default value. Use true, True, t, y, yes, or 1 for true bool's or
                    false, False, f, n, no, or 0 for false bool's. Cannot be used for
                    parameters that are required or a credential type.
                - allowed_values : list[dict]
                    The possible values this parameter can take, effectively making
                    this an enumerable parameter. Allowed values is an array of hashes
                    of the following format: `{label: 'Import', 'value': 'import'}`
            - name : str
                The name of the template.
            - category : str
                The category of this template.
            - note : str
                A note describing what this template is used for; custom scripts
                created off this template will display this description.
            - created_at : str (time)
            - updated_at : str (time)
            - use_count : int
                The number of uses of this template.
            - ui_report_id : int
                The id of the report that this template uses.
            - tech_reviewed : bool
                Whether this template has been audited by Civis for security
                vulnerability and correctness.
            - archived : bool
                Whether the template has been archived.
            - hidden : bool
                The hidden status of the item.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
        """
        ...

class _Usage:
    def list_matching(
        self,
        org_id: int | None = ...,
        task: str | None = ...,
        start_date: str | None = ...,
        end_date: str | None = ...,
    ) -> Response:
        """Get usage statistics for a given organization

        Parameters
        ----------
        org_id : int, optional
            The ID of the organization to get usage statistics for.
        task : str, optional
            The type of matching job contributing to this usage. One of ["IDR", "CDM"].
        start_date : str, optional
            The start date of the range to get usage statistics for.
        end_date : str, optional
            The end date of the range to get usage statistics for.

        Returns
        -------
        :class:`civis.response.Response`
            - run_id : int
                The ID of the run which contributed this usage.
            - job_id : int
                The ID of the job which contributed this usage.
            - user_id : int
                The ID of the user who started the run.
            - organization_id : int
                The organization of the user who started the run.
            - run_created_at : str (date-time)
                When the run was created at.
            - run_time : int
                The duration of the run in seconds.
            - num_records : int
                The number of records matched by the run.
            - task : str
                The type of matching job contributing to this usage. One of ["IDR",
                "CDM"].
        """
        ...

    def list_llm(
        self,
        org_id: int | None = ...,
        start_date: str | None = ...,
        end_date: str | None = ...,
    ) -> Response:
        """Get a list of usage statistics for a given organization

        Parameters
        ----------
        org_id : int, optional
            The ID of the organization to get usage statistics for.
        start_date : str, optional
            The start date of the range to get usage statistics for."\
            "Defaults to the start of the current month if neither start_date nor
            end_date is specified.
        end_date : str, optional
            The end date of the range to get usage statistics for."\
            "Defaults to the end of the current day if neither start_date nor end_date
            is specified.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the usage statistic to get.
            - run_id : int
                The ID of the run which contributed this usage.
            - job_id : int
                The ID of the job which contributed this usage.
            - user_id : int
                The ID of the user who started the run.
            - organization_id : int
                The organization of the user who started the run.
            - run_created_at : str (date-time)
                When the run was created at.
            - run_time : int
                The duration of the run in seconds.
            - credits : float (float)
                The number of credits used.
            - input_tokens : int
                The number of tokens input to the run.
            - output_tokens : int
                The number of tokens output from the run.
            - model_id : str
                The ID of the LLM model used.
        """
        ...

    def get_llm(
        self,
        id: int,
    ) -> Response:
        """Get an individual usage statistic for a given organization

        Parameters
        ----------
        id : int
            The ID of the usage statistic to get.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the usage statistic to get.
            - run_id : int
                The ID of the run which contributed this usage.
            - job_id : int
                The ID of the job which contributed this usage.
            - user_id : int
                The ID of the user who started the run.
            - organization_id : int
                The organization of the user who started the run.
            - run_created_at : str (date-time)
                When the run was created at.
            - run_time : int
                The duration of the run in seconds.
            - credits : float (float)
                The number of credits used.
            - input_tokens : int
                The number of tokens input to the run.
            - output_tokens : int
                The number of tokens output from the run.
            - model_id : str
                The ID of the LLM model used.
        """
        ...

    def list_llm_organization_summary(
        self,
        org_id: int,
        start_date: str | None = ...,
        end_date: str | None = ...,
    ) -> Response:
        """Get summarized usage statistics for a given organization

        Parameters
        ----------
        org_id : int
            The ID of the organization to get usage statistics for.
        start_date : str, optional
            The start date of the range to get usage statistics for."\
            "Defaults to the start of the current month if neither start_date nor
            end_date is specified.
        end_date : str, optional
            The end date of the range to get usage statistics for."\
            "Defaults to the end of the current day if neither start_date nor end_date
            is specified.

        Returns
        -------
        :class:`civis.response.Response`
            - credits : float (float)
                The number of credits used.
            - organization_id : int
                The organization for which LLM usage statistics are summarized.
        """
        ...

class _Usage_Limits:
    def list_matching(
        self,
        task: str | None = ...,
    ) -> Response:
        """List Matching Usage Limits

        Parameters
        ----------
        task : str, optional
            If specified, return limits for this task type only. One of 'IDR' or 'CDM'.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the limit.
            - organization_id : int
                The ID of the organization to which this limit belongs.
            - created_at : str (time)
                The time this limit was created.
            - updated_at : str (time)
                The time the limit was last updated.
            - hard_limit : int
                The limit value. One of 50000000, 200000000, 500000000, 1000000000, and
                2000000000.
            - notification_emails : list[str]
                Addresses to notify by e-mail when the limit is reached.
            - task : str
                The category of this limit. One of 'IDR' or 'CDM'.
        """
        ...

    def get_matching(
        self,
        id: int,
    ) -> Response:
        """Get a Matching Usage Limit

        Parameters
        ----------
        id : int
            The ID for the limit.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the limit.
            - organization_id : int
                The ID of the organization to which this limit belongs.
            - created_at : str (time)
                The time this limit was created.
            - updated_at : str (time)
                The time the limit was last updated.
            - hard_limit : int
                The limit value. One of 50000000, 200000000, 500000000, 1000000000, and
                2000000000.
            - notification_emails : list[str]
                Addresses to notify by e-mail when the limit is reached.
            - task : str
                The category of this limit. One of 'IDR' or 'CDM'.
        """
        ...

    def list_llm(
        self,
        organization_id: int | None = ...,
    ) -> Response:
        """List LLM Usage Limits

        Parameters
        ----------
        organization_id : int, optional
            If specified, return limits for this organization only.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the limit.
            - organization_id : int
                The ID of the organization to which this limit belongs.
            - created_at : str (time)
                The time this limit was created.
            - updated_at : str (time)
                The time the limit was last updated.
            - hard_limit : int
                The limit value. One of 50000000, 200000000, 500000000, 1000000000, and
                2000000000.
        """
        ...

    def get_llm(
        self,
        id: int,
    ) -> Response:
        """Get a LLM Usage Limit

        Parameters
        ----------
        id : int
            The ID for the limit.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for the limit.
            - organization_id : int
                The ID of the organization to which this limit belongs.
            - created_at : str (time)
                The time this limit was created.
            - updated_at : str (time)
                The time the limit was last updated.
            - hard_limit : int
                The limit value. One of 50000000, 200000000, 500000000, 1000000000, and
                2000000000.
        """
        ...

class _Users:
    def list(
        self,
        feature_flag: str | None = ...,
        account_status: str | None = ...,
        query: str | None = ...,
        group_id: int | None = ...,
        group_ids: list[int] | None = ...,
        organization_id: int | None = ...,
        exclude_groups: bool | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List users

        Parameters
        ----------
        feature_flag : str, optional
            Return users that have a feature flag enabled.
        account_status : str, optional
            The account status by which to filter users. May be one of "active",
            "inactive", or "all". Defaults to active.
        query : str, optional
            Return users who match the given query, based on name, user, email, and id.
        group_id : int, optional
            The ID of the group by which to filter users. Cannot be present if
            group_ids is.
        group_ids : list[int], optional
            The IDs of the groups by which to filter users. Cannot be present if
            group_id is.
        organization_id : int, optional
            The ID of the organization by which to filter users.
        exclude_groups : bool, optional
            Whether or to exclude users' groups. Default: false.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 10000.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to name. Must be one
            of: name, user.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to asc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of this user.
            - user : str
                The username of this user.
            - name : str
                The name of this user.
            - email : str
                The email of this user.
            - active : bool
                Whether this user account is active or deactivated.
            - primary_group_id : int
                The ID of the primary group of this user.
            - groups : list[dict]
                An array of all the groups this user is in.

                - id : int
                    The ID of this group.
                - name : str
                    The name of this group.
                - slug : str
                    The slug of this group.
                - organization_id : int
                    The ID of the organization associated with this group.
                - organization_name : str
                    The name of the organization associated with this group.
            - created_at : str (date-time)
                The date and time when the user was created.
            - current_sign_in_at : str (date-time)
                The date and time when the user's current session began.
            - updated_at : str (date-time)
                The date and time when the user was last updated.
            - last_seen_at : str (date-time)
                The date and time when the user last visited Platform.
            - suspended : bool
                Whether the user is suspended due to inactivity.
            - created_by_id : int
                The ID of the user who created this user.
            - last_updated_by_id : int
                The ID of the user who last updated this user.
        """
        ...

    def post(
        self,
        name: str,
        email: str,
        primary_group_id: int,
        user: str,
        active: bool | None = ...,
        city: str | None = ...,
        state: str | None = ...,
        time_zone: str | None = ...,
        initials: str | None = ...,
        department: str | None = ...,
        title: str | None = ...,
        prefers_sms_otp: bool | None = ...,
        group_ids: list[int] | None = ...,
        vpn_enabled: bool | None = ...,
        sso_disabled: bool | None = ...,
        otp_required_for_login: bool | None = ...,
        exempt_from_org_sms_otp_disabled: bool | None = ...,
        robot: bool | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Create a new user (must be a team or org admin)

        Parameters
        ----------
        name : str
            The name of this user.
        email : str
            The email of this user.
        primary_group_id : int
            The ID of the primary group of this user.
        user : str
            The username of this user.
        active : bool, optional
            Whether this user account is active or deactivated.
        city : str, optional
            The city of this user.
        state : str, optional
            The state of this user.
        time_zone : str, optional
            The time zone of this user.
        initials : str, optional
            The initials of this user.
        department : str, optional
            The department of this user.
        title : str, optional
            The title of this user.
        prefers_sms_otp : bool, optional
            The preference for phone authorization of this user
        group_ids : list[int], optional
            An array of ids of all the groups this user is in.
        vpn_enabled : bool, optional
            The availability of vpn for this user.
        sso_disabled : bool, optional
            The availability of SSO for this user.
        otp_required_for_login : bool, optional
            The two factor authentication requirement for this user.
        exempt_from_org_sms_otp_disabled : bool, optional
            Whether the user has SMS OTP enabled on an individual level. This field
            does not matter if the org does not have SMS OTP disabled.
        robot : bool, optional
            Whether the user is a robot.
        send_email : bool, optional
            Whether the user will receive a welcome email.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this user.
            - user : str
                The username of this user.
            - name : str
                The name of this user.
            - email : str
                The email of this user.
            - active : bool
                Whether this user account is active or deactivated.
            - primary_group_id : int
                The ID of the primary group of this user.
            - groups : list[dict]
                An array of all the groups this user is in.

                - id : int
                    The ID of this group.
                - name : str
                    The name of this group.
                - slug : str
                    The slug of this group.
                - organization_id : int
                    The ID of the organization associated with this group.
                - organization_name : str
                    The name of the organization associated with this group.
            - city : str
                The city of this user.
            - state : str
                The state of this user.
            - time_zone : str
                The time zone of this user.
            - initials : str
                The initials of this user.
            - department : str
                The department of this user.
            - title : str
                The title of this user.
            - github_username : str
                The GitHub username of this user.
            - prefers_sms_otp : bool
                The preference for phone authorization of this user
            - vpn_enabled : bool
                The availability of vpn for this user.
            - sso_disabled : bool
                The availability of SSO for this user.
            - otp_required_for_login : bool
                The two factor authentication requirement for this user.
            - exempt_from_org_sms_otp_disabled : bool
                Whether the user has SMS OTP enabled on an individual level. This field
                does not matter if the org does not have SMS OTP disabled.
            - sms_otp_allowed : bool
                Whether the user is allowed to receive two factor authentication codes
                via SMS.
            - robot : bool
                Whether the user is a robot.
            - phone : str
                The phone number of this user.
            - organization_slug : str
                The slug of the organization the user belongs to.
            - organization_sso_disable_capable : bool
                The user's organization's ability to disable sso for their users.
            - organization_login_type : str
                The user's organization's login type.
            - organization_sms_otp_disabled : bool
                Whether the user's organization has SMS OTP disabled.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - created_at : str (date-time)
                The date and time when the user was created.
            - updated_at : str (date-time)
                The date and time when the user was last updated.
            - last_seen_at : str (date-time)
                The date and time when the user last visited Platform.
            - suspended : bool
                Whether the user is suspended due to inactivity.
            - created_by_id : int
                The ID of the user who created this user.
            - last_updated_by_id : int
                The ID of the user who last updated this user.
            - unconfirmed_email : str
                The new email address awaiting confirmation from the user.
            - account_status : str
                Account status of this user. One of: "Active", "Deactivated",
                "Suspended", "Unsuspended"
        """
        ...

    def list_me(
        self,
    ) -> Response:
        """Show info about the logged-in user

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this user.
            - name : str
                This user's name.
            - email : str
                This user's email address.
            - username : str
                This user's username.
            - initials : str
                This user's initials.
            - last_checked_announcements : str (date-time)
                The date and time at which the user last checked their announcements.
            - feature_flags : dict
                The feature flag settings for this user.
            - roles : list[str]
                The roles this user has, listed by slug.
            - preferences : dict
                This user's preferences.
            - custom_branding : str
                The branding of Platform for this user.
            - primary_group_id : int
                The ID of the primary group of this user.
            - groups : list[dict]
                An array of all the groups this user is in.

                - id : int
                    The ID of this group.
                - name : str
                    The name of this group.
                - slug : str
                    The slug of this group.
                - organization_id : int
                    The ID of the organization associated with this group.
                - organization_name : str
                    The name of the organization associated with this group.
            - organization_name : str
                The name of the organization the user belongs to.
            - organization_slug : str
                The slug of the organization the user belongs to.
            - organization_default_theme_id : int
                The ID of the organizations's default theme.
            - created_at : str (date-time)
                The date and time when the user was created.
            - sign_in_count : int
                The number of times the user has signed in.
            - assuming_role : bool
                Whether the user is assuming a role or not.
            - assuming_admin : bool
                Whether the user is assuming admin.
            - assuming_admin_expiration : str (date-time)
                When the user's admin role is set to expire.
            - superadmin_mode_expiration : str (date-time)
                The user is in superadmin mode when set to a DateTime. The user is not
                in superadmin mode when set to null.
            - disable_non_compliant_fedramp_features : bool
                Whether to disable non-compliant fedramp features.
            - persona_role : str
                The high-level role representing the current user's main permissions.
            - created_by_id : int
                The ID of the user who created this user.
            - last_updated_by_id : int
                The ID of the user who last updated this user.
        """
        ...

    def patch_me(
        self,
        preferences: dict | None = ...,
        last_checked_announcements: str | None = ...,
    ) -> Response:
        """Update info about the logged-in user

        Parameters
        ----------
        preferences : dict, optional
            - app_index_order_field : str
                This attribute is deprecated
            - app_index_order_dir : str
                This attribute is deprecated
            - result_index_order_field : str
                Order field for the reports index page.
            - result_index_order_dir : str
                Order direction for the reports index page.
            - result_index_type_filter : str
                Type filter for the reports index page.
            - result_index_author_filter : str
                Author filter for the reports index page.
            - result_index_archived_filter : str
                Archived filter for the reports index page.
            - import_index_order_field : str
                Order field for the imports index page.
            - import_index_order_dir : str
                Order direction for the imports index page.
            - import_index_type_filter : str
                Type filter for the imports index page.
            - import_index_author_filter : str
                Author filter for the imports index page.
            - import_index_dest_filter : str
                Destination filter for the imports index page.
            - import_index_status_filter : str
                Status filter for the imports index page.
            - import_index_archived_filter : str
                Archived filter for the imports index page.
            - export_index_order_field : str
                Order field for the exports index page.
            - export_index_order_dir : str
                Order direction for the exports index page.
            - export_index_type_filter : str
                Type filter for the exports index page.
            - export_index_author_filter : str
                Author filter for the exports index page.
            - export_index_status_filter : str
                Status filter for the exports index page.
            - model_index_order_field : str
                Order field for the models index page.
            - model_index_order_dir : str
                Order direction for the models index page.
            - model_index_author_filter : str
                Author filter for the models index page.
            - model_index_status_filter : str
                Status filter for the models index page.
            - model_index_archived_filter : str
                Archived filter for the models index page.
            - model_index_thumbnail_view : str
                Thumbnail view for the models index page.
            - script_index_order_field : str
                Order field for the scripts index page.
            - script_index_order_dir : str
                Order direction for the scripts index page.
            - script_index_type_filter : str
                Type filter for the scripts index page.
            - script_index_author_filter : str
                Author filter for the scripts index page.
            - script_index_status_filter : str
                Status filter for the scripts index page.
            - script_index_archived_filter : str
                Archived filter for the scripts index page.
            - project_index_order_field : str
                Order field for the projects index page.
            - project_index_order_dir : str
                Order direction for the projects index page.
            - project_index_author_filter : str
                Author filter for the projects index page.
            - project_index_archived_filter : str
                Archived filter for the projects index page.
            - report_index_thumbnail_view : str
                Thumbnail view for the reports index page.
            - project_detail_order_field : str
                Order field for projects detail pages.
            - project_detail_order_dir : str
                Order direction for projects detail pages.
            - project_detail_author_filter : str
                Author filter for projects detail pages.
            - project_detail_type_filter : str
                Type filter for projects detail pages.
            - project_detail_archived_filter : str
                Archived filter for the projects detail pages.
            - enhancement_index_order_field : str
                Order field for the enhancements index page.
            - enhancement_index_order_dir : str
                Order direction for the enhancements index page.
            - enhancement_index_author_filter : str
                Author filter for the enhancements index page.
            - enhancement_index_archived_filter : str
                Archived filter for the enhancements index page.
            - preferred_server_id : int
                ID of preferred server.
            - civis_explore_skip_intro : bool
                Whether the user is shown steps for each exploration.
            - registration_index_order_field : str
                Order field for the registrations index page.
            - registration_index_order_dir : str
                Order direction for the registrations index page.
            - registration_index_status_filter : str
                Status filter for the registrations index page.
            - upgrade_requested : str
                Whether a free trial upgrade has been requested.
            - welcome_order_field : str
                Order direction for the welcome page.
            - welcome_order_dir : str
                Order direction for the welcome page.
            - welcome_author_filter : str
                Status filter for the welcome page.
            - welcome_status_filter : str
                Status filter for the welcome page.
            - welcome_archived_filter : str
                Status filter for the welcome page.
            - data_pane_width : str
                Width of the data pane when expanded.
            - data_pane_collapsed : str
                Whether the data pane is collapsed.
            - notebook_order_field : str
                Order field for the notebooks page.
            - notebook_order_dir : str
                Order direction for the notebooks page.
            - notebook_author_filter : str
                Author filter for the notebooks page.
            - notebook_archived_filter : str
                Archived filter for the notebooks page.
            - notebook_status_filter : str
                Status filter for the notebooks page.
            - workflow_index_order_field : str
                Order field for the workflows page.
            - workflow_index_order_dir : str
                Order direction for the workflows page.
            - workflow_index_author_filter : str
                Author filter for the workflows page.
            - workflow_index_archived_filter : str
                Archived filter for the workflows page.
            - service_order_field : str
                Order field for the services page.
            - service_order_dir : str
                Order direction for the services page.
            - service_author_filter : str
                Author filter for the services page.
            - service_archived_filter : str
                Archived filter for the services page.
            - assume_role_history : str
                JSON string of previously assumed roles.
            - default_success_notifications_on : bool
                Whether email notifications for the success of all applicable jobs are
                on by default.
            - default_failure_notifications_on : bool
                Whether email notifications for the failure of all applicable jobs are
                on by default.
            - my_activity_metrics : bool
                Whether the activity metrics are filtered to the current user.
        last_checked_announcements : str (date-time), optional
            The date and time at which the user last checked their announcements.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this user.
            - name : str
                This user's name.
            - email : str
                This user's email address.
            - username : str
                This user's username.
            - initials : str
                This user's initials.
            - last_checked_announcements : str (date-time)
                The date and time at which the user last checked their announcements.
            - feature_flags : dict
                The feature flag settings for this user.
            - roles : list[str]
                The roles this user has, listed by slug.
            - preferences : dict
                This user's preferences.
            - custom_branding : str
                The branding of Platform for this user.
            - primary_group_id : int
                The ID of the primary group of this user.
            - groups : list[dict]
                An array of all the groups this user is in.

                - id : int
                    The ID of this group.
                - name : str
                    The name of this group.
                - slug : str
                    The slug of this group.
                - organization_id : int
                    The ID of the organization associated with this group.
                - organization_name : str
                    The name of the organization associated with this group.
            - organization_name : str
                The name of the organization the user belongs to.
            - organization_slug : str
                The slug of the organization the user belongs to.
            - organization_default_theme_id : int
                The ID of the organizations's default theme.
            - created_at : str (date-time)
                The date and time when the user was created.
            - sign_in_count : int
                The number of times the user has signed in.
            - assuming_role : bool
                Whether the user is assuming a role or not.
            - assuming_admin : bool
                Whether the user is assuming admin.
            - assuming_admin_expiration : str (date-time)
                When the user's admin role is set to expire.
            - superadmin_mode_expiration : str (date-time)
                The user is in superadmin mode when set to a DateTime. The user is not
                in superadmin mode when set to null.
            - disable_non_compliant_fedramp_features : bool
                Whether to disable non-compliant fedramp features.
            - persona_role : str
                The high-level role representing the current user's main permissions.
            - created_by_id : int
                The ID of the user who created this user.
            - last_updated_by_id : int
                The ID of the user who last updated this user.
        """
        ...

    def list_me_activity(
        self,
        status: str | None = ...,
        author: str | None = ...,
        order: str | None = ...,
    ) -> Response:
        """Get recent activity for logged-in user

        Parameters
        ----------
        status : str, optional
            The status to filter objects by. One of "all", "succeeded", "failed", or
            "running".
        author : str, optional
            A comma separated list of author IDs to filter objects by.
        order : str, optional
            The order of the jobs. If set to "name", the order is DESC alphabetically.
            If set to "newest", the order is DESC by most recently updated.

        Returns
        -------
        :class:`civis.response.Response`
            - id : str
                The ID of the object.
            - name : str
                The name of the object.
            - type : str
                The type of the object.
            - user : str
                The user associated with the object.
            - category : str
                The job category, if the object is a job.
            - state : str
                The state of the object. One of "succeeded", "failed", or "running".
            - updated_at : str (date-time)
                When the object was last updated.
            - next_run_at : str (date-time)
                When the job is next scheduled to run, if the object is a job.
            - last_run_id : str
                The ID of the last run, if the object is a job.
            - last_run_state : str
                The state of the last run, if the object is a job. One of "succeeded",
                "failed", or "running".
        """
        ...

    def list_me_organization_admins(
        self,
    ) -> Response:
        """Get list of organization admins for logged-in user

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this user.
            - name : str
                This user's name.
            - username : str
                This user's username.
            - initials : str
                This user's initials.
            - online : bool
                Whether this user is online.
            - email : str
                This user's email address.
        """
        ...

    def list_me_themes(
        self,
    ) -> Response:
        """List themes

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this theme.
            - name : str
                The name of this theme.
            - created_at : str (date-time)
            - updated_at : str (date-time)
        """
        ...

    def get_me_themes(
        self,
        id: int,
    ) -> Response:
        """Show a theme

        Parameters
        ----------
        id : int
            The ID of this theme.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this theme.
            - name : str
                The name of this theme.
            - organization_ids : list[int]
                List of organization ID's allowed to use this theme.
            - settings : str
                The theme configuration object.
            - logo_file : dict
                - id : int
                    The ID of the logo image file.
                - download_url : str
                    The URL of the logo image file.
            - created_at : str (date-time)
            - updated_at : str (date-time)
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Show info about a user

        Parameters
        ----------
        id : int
            The ID of this user.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this user.
            - user : str
                The username of this user.
            - name : str
                The name of this user.
            - email : str
                The email of this user.
            - active : bool
                Whether this user account is active or deactivated.
            - primary_group_id : int
                The ID of the primary group of this user.
            - groups : list[dict]
                An array of all the groups this user is in.

                - id : int
                    The ID of this group.
                - name : str
                    The name of this group.
                - slug : str
                    The slug of this group.
                - organization_id : int
                    The ID of the organization associated with this group.
                - organization_name : str
                    The name of the organization associated with this group.
            - city : str
                The city of this user.
            - state : str
                The state of this user.
            - time_zone : str
                The time zone of this user.
            - initials : str
                The initials of this user.
            - department : str
                The department of this user.
            - title : str
                The title of this user.
            - github_username : str
                The GitHub username of this user.
            - prefers_sms_otp : bool
                The preference for phone authorization of this user
            - vpn_enabled : bool
                The availability of vpn for this user.
            - sso_disabled : bool
                The availability of SSO for this user.
            - otp_required_for_login : bool
                The two factor authentication requirement for this user.
            - exempt_from_org_sms_otp_disabled : bool
                Whether the user has SMS OTP enabled on an individual level. This field
                does not matter if the org does not have SMS OTP disabled.
            - sms_otp_allowed : bool
                Whether the user is allowed to receive two factor authentication codes
                via SMS.
            - robot : bool
                Whether the user is a robot.
            - phone : str
                The phone number of this user.
            - organization_slug : str
                The slug of the organization the user belongs to.
            - organization_sso_disable_capable : bool
                The user's organization's ability to disable sso for their users.
            - organization_login_type : str
                The user's organization's login type.
            - organization_sms_otp_disabled : bool
                Whether the user's organization has SMS OTP disabled.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - created_at : str (date-time)
                The date and time when the user was created.
            - updated_at : str (date-time)
                The date and time when the user was last updated.
            - last_seen_at : str (date-time)
                The date and time when the user last visited Platform.
            - suspended : bool
                Whether the user is suspended due to inactivity.
            - created_by_id : int
                The ID of the user who created this user.
            - last_updated_by_id : int
                The ID of the user who last updated this user.
            - unconfirmed_email : str
                The new email address awaiting confirmation from the user.
            - account_status : str
                Account status of this user. One of: "Active", "Deactivated",
                "Suspended", "Unsuspended"
        """
        ...

    def patch(
        self,
        id: int,
        name: str | None = ...,
        email: str | None = ...,
        active: bool | None = ...,
        primary_group_id: int | None = ...,
        city: str | None = ...,
        state: str | None = ...,
        time_zone: str | None = ...,
        initials: str | None = ...,
        department: str | None = ...,
        title: str | None = ...,
        prefers_sms_otp: bool | None = ...,
        group_ids: list[int] | None = ...,
        vpn_enabled: bool | None = ...,
        sso_disabled: bool | None = ...,
        otp_required_for_login: bool | None = ...,
        exempt_from_org_sms_otp_disabled: bool | None = ...,
        robot: bool | None = ...,
        phone: str | None = ...,
        password: str | None = ...,
        account_status: str | None = ...,
    ) -> Response:
        """Update info about a user (must be a team or org admin)

        Parameters
        ----------
        id : int
            The ID of this user.
        name : str, optional
            The name of this user.
        email : str, optional
            The email of this user.
        active : bool, optional
            Whether this user account is active or deactivated.
        primary_group_id : int, optional
            The ID of the primary group of this user.
        city : str, optional
            The city of this user.
        state : str, optional
            The state of this user.
        time_zone : str, optional
            The time zone of this user.
        initials : str, optional
            The initials of this user.
        department : str, optional
            The department of this user.
        title : str, optional
            The title of this user.
        prefers_sms_otp : bool, optional
            The preference for phone authorization of this user
        group_ids : list[int], optional
            An array of ids of all the groups this user is in.
        vpn_enabled : bool, optional
            The availability of vpn for this user.
        sso_disabled : bool, optional
            The availability of SSO for this user.
        otp_required_for_login : bool, optional
            The two factor authentication requirement for this user.
        exempt_from_org_sms_otp_disabled : bool, optional
            Whether the user has SMS OTP enabled on an individual level. This field
            does not matter if the org does not have SMS OTP disabled.
        robot : bool, optional
            Whether the user is a robot.
        phone : str, optional
            The phone number of this user.
        password : str, optional
            The password of this user.
        account_status : str, optional
            Account status of this user. One of: "Active", "Deactivated", "Suspended",
            "Unsuspended"

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this user.
            - user : str
                The username of this user.
            - name : str
                The name of this user.
            - email : str
                The email of this user.
            - active : bool
                Whether this user account is active or deactivated.
            - primary_group_id : int
                The ID of the primary group of this user.
            - groups : list[dict]
                An array of all the groups this user is in.

                - id : int
                    The ID of this group.
                - name : str
                    The name of this group.
                - slug : str
                    The slug of this group.
                - organization_id : int
                    The ID of the organization associated with this group.
                - organization_name : str
                    The name of the organization associated with this group.
            - city : str
                The city of this user.
            - state : str
                The state of this user.
            - time_zone : str
                The time zone of this user.
            - initials : str
                The initials of this user.
            - department : str
                The department of this user.
            - title : str
                The title of this user.
            - github_username : str
                The GitHub username of this user.
            - prefers_sms_otp : bool
                The preference for phone authorization of this user
            - vpn_enabled : bool
                The availability of vpn for this user.
            - sso_disabled : bool
                The availability of SSO for this user.
            - otp_required_for_login : bool
                The two factor authentication requirement for this user.
            - exempt_from_org_sms_otp_disabled : bool
                Whether the user has SMS OTP enabled on an individual level. This field
                does not matter if the org does not have SMS OTP disabled.
            - sms_otp_allowed : bool
                Whether the user is allowed to receive two factor authentication codes
                via SMS.
            - robot : bool
                Whether the user is a robot.
            - phone : str
                The phone number of this user.
            - organization_slug : str
                The slug of the organization the user belongs to.
            - organization_sso_disable_capable : bool
                The user's organization's ability to disable sso for their users.
            - organization_login_type : str
                The user's organization's login type.
            - organization_sms_otp_disabled : bool
                Whether the user's organization has SMS OTP disabled.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - created_at : str (date-time)
                The date and time when the user was created.
            - updated_at : str (date-time)
                The date and time when the user was last updated.
            - last_seen_at : str (date-time)
                The date and time when the user last visited Platform.
            - suspended : bool
                Whether the user is suspended due to inactivity.
            - created_by_id : int
                The ID of the user who created this user.
            - last_updated_by_id : int
                The ID of the user who last updated this user.
            - unconfirmed_email : str
                The new email address awaiting confirmation from the user.
            - account_status : str
                Account status of this user. One of: "Active", "Deactivated",
                "Suspended", "Unsuspended"
        """
        ...

    def list_api_keys(
        self,
        id: str,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """Show API keys belonging to the specified user

        Parameters
        ----------
        id : str
            The ID of the user or 'me'.
        limit : int, optional
            Number of results to return. Defaults to its maximum of 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID of the API key.
            - name : str
                The name of the API key.
            - expires_at : str (date-time)
                The date and time when the key expired.
            - created_at : str (date-time)
                The date and time when the key was created.
            - revoked_at : str (date-time)
                The date and time when the key was revoked.
            - last_used_at : str (date-time)
                The date and time when the key was last used.
            - scopes : list[str]
                The scopes which the key is permissioned on.
            - use_count : int
                The number of times the key has been used.
            - expired : bool
                True if the key has expired.
            - active : bool
                True if the key has neither expired nor been revoked.
            - constraint_count : int
                The number of constraints on the created key
        """
        ...

    def post_api_keys(
        self,
        id: str,
        expires_in: int,
        name: str,
        constraints: list[dict] | None = ...,
    ) -> Response:
        """Create a new API key belonging to the logged-in user

        Parameters
        ----------
        id : str
            The ID of the user or 'me'.
        expires_in : int
            The number of seconds the key should last for.
        name : str
            The name of the API key.
        constraints : list[dict], optional
            Constraints on the abilities of the created key.

            - constraint : str
                The path matcher of the constraint.
            - constraint_type : str
                The type of constraint (exact/prefix/regex/verb).
            - get_allowed : bool
                Whether the constraint allows GET requests.
            - head_allowed : bool
                Whether the constraint allows HEAD requests.
            - post_allowed : bool
                Whether the constraint allows POST requests.
            - put_allowed : bool
                Whether the constraint allows PUT requests.
            - patch_allowed : bool
                Whether the constraint allows PATCH requests.
            - delete_allowed : bool
                Whether the constraint allows DELETE requests.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the API key.
            - name : str
                The name of the API key.
            - expires_at : str (date-time)
                The date and time when the key expired.
            - created_at : str (date-time)
                The date and time when the key was created.
            - revoked_at : str (date-time)
                The date and time when the key was revoked.
            - last_used_at : str (date-time)
                The date and time when the key was last used.
            - scopes : list[str]
                The scopes which the key is permissioned on.
            - use_count : int
                The number of times the key has been used.
            - expired : bool
                True if the key has expired.
            - active : bool
                True if the key has neither expired nor been revoked.
            - constraints : list[dict]
                Constraints on the abilities of the created key

                - constraint : str
                    The path matcher of the constraint.
                - constraint_type : str
                    The type of constraint (exact/prefix/regex/verb).
                - get_allowed : bool
                    Whether the constraint allows GET requests.
                - head_allowed : bool
                    Whether the constraint allows HEAD requests.
                - post_allowed : bool
                    Whether the constraint allows POST requests.
                - put_allowed : bool
                    Whether the constraint allows PUT requests.
                - patch_allowed : bool
                    Whether the constraint allows PATCH requests.
                - delete_allowed : bool
                    Whether the constraint allows DELETE requests.
            - token : str
                The API key.
        """
        ...

    def get_api_keys(
        self,
        id: str,
        key_id: int,
    ) -> Response:
        """Show the specified API key

        Parameters
        ----------
        id : str
            The ID of the user or 'me'.
        key_id : int
            The ID of the API key.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the API key.
            - name : str
                The name of the API key.
            - expires_at : str (date-time)
                The date and time when the key expired.
            - created_at : str (date-time)
                The date and time when the key was created.
            - revoked_at : str (date-time)
                The date and time when the key was revoked.
            - last_used_at : str (date-time)
                The date and time when the key was last used.
            - scopes : list[str]
                The scopes which the key is permissioned on.
            - use_count : int
                The number of times the key has been used.
            - expired : bool
                True if the key has expired.
            - active : bool
                True if the key has neither expired nor been revoked.
            - constraints : list[dict]
                Constraints on the abilities of the created key

                - constraint : str
                    The path matcher of the constraint.
                - constraint_type : str
                    The type of constraint (exact/prefix/regex/verb).
                - get_allowed : bool
                    Whether the constraint allows GET requests.
                - head_allowed : bool
                    Whether the constraint allows HEAD requests.
                - post_allowed : bool
                    Whether the constraint allows POST requests.
                - put_allowed : bool
                    Whether the constraint allows PUT requests.
                - patch_allowed : bool
                    Whether the constraint allows PATCH requests.
                - delete_allowed : bool
                    Whether the constraint allows DELETE requests.
        """
        ...

    def delete_api_keys(
        self,
        id: str,
        key_id: int,
    ) -> Response:
        """Revoke the specified API key

        Parameters
        ----------
        id : str
            The ID of the user or 'me'.
        key_id : int
            The ID of the API key.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of the API key.
            - name : str
                The name of the API key.
            - expires_at : str (date-time)
                The date and time when the key expired.
            - created_at : str (date-time)
                The date and time when the key was created.
            - revoked_at : str (date-time)
                The date and time when the key was revoked.
            - last_used_at : str (date-time)
                The date and time when the key was last used.
            - scopes : list[str]
                The scopes which the key is permissioned on.
            - use_count : int
                The number of times the key has been used.
            - expired : bool
                True if the key has expired.
            - active : bool
                True if the key has neither expired nor been revoked.
            - constraints : list[dict]
                Constraints on the abilities of the created key

                - constraint : str
                    The path matcher of the constraint.
                - constraint_type : str
                    The type of constraint (exact/prefix/regex/verb).
                - get_allowed : bool
                    Whether the constraint allows GET requests.
                - head_allowed : bool
                    Whether the constraint allows HEAD requests.
                - post_allowed : bool
                    Whether the constraint allows POST requests.
                - put_allowed : bool
                    Whether the constraint allows PUT requests.
                - patch_allowed : bool
                    Whether the constraint allows PATCH requests.
                - delete_allowed : bool
                    Whether the constraint allows DELETE requests.
        """
        ...

    def delete_sessions(
        self,
        id: int,
    ) -> Response:
        """Terminate all of the user's active sessions (must be a team or org admin)

        Parameters
        ----------
        id : int
            The ID of this user.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this user.
            - user : str
                The username of this user.
            - name : str
                The name of this user.
            - email : str
                The email of this user.
            - active : bool
                Whether this user account is active or deactivated.
            - primary_group_id : int
                The ID of the primary group of this user.
            - groups : list[dict]
                An array of all the groups this user is in.

                - id : int
                    The ID of this group.
                - name : str
                    The name of this group.
                - slug : str
                    The slug of this group.
                - organization_id : int
                    The ID of the organization associated with this group.
                - organization_name : str
                    The name of the organization associated with this group.
            - city : str
                The city of this user.
            - state : str
                The state of this user.
            - time_zone : str
                The time zone of this user.
            - initials : str
                The initials of this user.
            - department : str
                The department of this user.
            - title : str
                The title of this user.
            - github_username : str
                The GitHub username of this user.
            - prefers_sms_otp : bool
                The preference for phone authorization of this user
            - vpn_enabled : bool
                The availability of vpn for this user.
            - sso_disabled : bool
                The availability of SSO for this user.
            - otp_required_for_login : bool
                The two factor authentication requirement for this user.
            - exempt_from_org_sms_otp_disabled : bool
                Whether the user has SMS OTP enabled on an individual level. This field
                does not matter if the org does not have SMS OTP disabled.
            - sms_otp_allowed : bool
                Whether the user is allowed to receive two factor authentication codes
                via SMS.
            - robot : bool
                Whether the user is a robot.
            - phone : str
                The phone number of this user.
            - organization_slug : str
                The slug of the organization the user belongs to.
            - organization_sso_disable_capable : bool
                The user's organization's ability to disable sso for their users.
            - organization_login_type : str
                The user's organization's login type.
            - organization_sms_otp_disabled : bool
                Whether the user's organization has SMS OTP disabled.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - created_at : str (date-time)
                The date and time when the user was created.
            - updated_at : str (date-time)
                The date and time when the user was last updated.
            - last_seen_at : str (date-time)
                The date and time when the user last visited Platform.
            - suspended : bool
                Whether the user is suspended due to inactivity.
            - created_by_id : int
                The ID of the user who created this user.
            - last_updated_by_id : int
                The ID of the user who last updated this user.
            - unconfirmed_email : str
                The new email address awaiting confirmation from the user.
            - account_status : str
                Account status of this user. One of: "Active", "Deactivated",
                "Suspended", "Unsuspended"
        """
        ...

    def list_me_favorites(
        self,
        object_id: int | None = ...,
        object_type: str | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Favorites

        Parameters
        ----------
        object_id : int, optional
            The id of the object. If specified as a query parameter, must also specify
            object_type parameter.
        object_type : str, optional
            The type of the object that is favorited. Valid options: Container Script,
            Identity Resolution, Import, Python Script, R Script, dbt Script,
            JavaScript Script, SQL Script, Project, Workflow, Tableau Report, Service
            Report, HTML Report, SQL Report
        limit : int, optional
            Number of results to return. Defaults to 50. Maximum allowed is 1000.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to position. Must be
            one of: position, created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to asc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The id of the favorite.
            - object_id : int
                The id of the object. If specified as a query parameter, must also
                specify object_type parameter.
            - object_type : str
                The type of the object that is favorited. Valid options: Container
                Script, Identity Resolution, Import, Python Script, R Script, dbt
                Script, JavaScript Script, SQL Script, Project, Workflow, Tableau
                Report, Service Report, HTML Report, SQL Report
            - object_name : str
                The name of the object that is favorited.
            - created_at : str (time)
                The time this favorite was created.
            - object_updated_at : str (time)
                The time the object that is favorited was last updated
            - object_author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - position : int
                The rank position of this favorite. Use the patch
                users/me/favorites/:id/ranking/ endpoints to update.
        """
        ...

    def post_me_favorites(
        self,
        object_id: int,
        object_type: str,
    ) -> Response:
        """Favorite an item

        Parameters
        ----------
        object_id : int
            The id of the object. If specified as a query parameter, must also specify
            object_type parameter.
        object_type : str
            The type of the object that is favorited. Valid options: Container Script,
            Identity Resolution, Import, Python Script, R Script, dbt Script,
            JavaScript Script, SQL Script, Project, Workflow, Tableau Report, Service
            Report, HTML Report, SQL Report

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The id of the favorite.
            - object_id : int
                The id of the object. If specified as a query parameter, must also
                specify object_type parameter.
            - object_type : str
                The type of the object that is favorited. Valid options: Container
                Script, Identity Resolution, Import, Python Script, R Script, dbt
                Script, JavaScript Script, SQL Script, Project, Workflow, Tableau
                Report, Service Report, HTML Report, SQL Report
            - object_name : str
                The name of the object that is favorited.
            - created_at : str (time)
                The time this favorite was created.
            - object_updated_at : str (time)
                The time the object that is favorited was last updated
            - object_author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
        """
        ...

    def delete_me_favorites(
        self,
        id: int,
    ) -> Response:
        """Unfavorite an item

        Parameters
        ----------
        id : int
            The id of the favorite.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def post_unsuspend(
        self,
        id: int,
    ) -> Response:
        """Unsuspends user

        Parameters
        ----------
        id : int
            The ID of this user.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this user.
            - user : str
                The username of this user.
            - unlocked_at : str (date-time)
                The time the user's account was unsuspended
        """
        ...

    def delete_2fa(
        self,
        id: int,
    ) -> Response:
        """Wipes the user's current 2FA settings so that they must reset them upon next
        login

        Parameters
        ----------
        id : int
            The ID of this user.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID of this user.
            - user : str
                The username of this user.
            - name : str
                The name of this user.
            - email : str
                The email of this user.
            - active : bool
                Whether this user account is active or deactivated.
            - primary_group_id : int
                The ID of the primary group of this user.
            - groups : list[dict]
                An array of all the groups this user is in.

                - id : int
                    The ID of this group.
                - name : str
                    The name of this group.
                - slug : str
                    The slug of this group.
                - organization_id : int
                    The ID of the organization associated with this group.
                - organization_name : str
                    The name of the organization associated with this group.
            - city : str
                The city of this user.
            - state : str
                The state of this user.
            - time_zone : str
                The time zone of this user.
            - initials : str
                The initials of this user.
            - department : str
                The department of this user.
            - title : str
                The title of this user.
            - github_username : str
                The GitHub username of this user.
            - prefers_sms_otp : bool
                The preference for phone authorization of this user
            - vpn_enabled : bool
                The availability of vpn for this user.
            - sso_disabled : bool
                The availability of SSO for this user.
            - otp_required_for_login : bool
                The two factor authentication requirement for this user.
            - exempt_from_org_sms_otp_disabled : bool
                Whether the user has SMS OTP enabled on an individual level. This field
                does not matter if the org does not have SMS OTP disabled.
            - sms_otp_allowed : bool
                Whether the user is allowed to receive two factor authentication codes
                via SMS.
            - robot : bool
                Whether the user is a robot.
            - phone : str
                The phone number of this user.
            - organization_slug : str
                The slug of the organization the user belongs to.
            - organization_sso_disable_capable : bool
                The user's organization's ability to disable sso for their users.
            - organization_login_type : str
                The user's organization's login type.
            - organization_sms_otp_disabled : bool
                Whether the user's organization has SMS OTP disabled.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - created_at : str (date-time)
                The date and time when the user was created.
            - updated_at : str (date-time)
                The date and time when the user was last updated.
            - last_seen_at : str (date-time)
                The date and time when the user last visited Platform.
            - suspended : bool
                Whether the user is suspended due to inactivity.
            - created_by_id : int
                The ID of the user who created this user.
            - last_updated_by_id : int
                The ID of the user who last updated this user.
            - unconfirmed_email : str
                The new email address awaiting confirmation from the user.
            - account_status : str
                Account status of this user. One of: "Active", "Deactivated",
                "Suspended", "Unsuspended"
        """
        ...

    def post_access_email(
        self,
        id: int,
    ) -> Response:
        """Sends the target user a 'Reset Password' or 'Welcome to Platform' email
        depending on the their status - Only available to Org and Team Admins

        Parameters
        ----------
        id : int
            The ID of this user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

class _Workflows:
    def list(
        self,
        hidden: bool | None = ...,
        archived: str | None = ...,
        author: str | None = ...,
        state: list[str] | None = ...,
        scheduled: bool | None = ...,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List Workflows

        Parameters
        ----------
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.
        archived : str, optional
            The archival status of the requested item(s).
        author : str, optional
            If specified, return items from any of these authors. It accepts a comma-
            separated list of user IDs.
        state : list[str], optional
            State of the most recent execution.One or more of queued, running,
            succeeded, failed, cancelled, idle, and scheduled.
        scheduled : bool, optional
            If the workflow is scheduled.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to updated_at. Must be
            one of: updated_at, name, created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID for this workflow.
            - name : str
                The name of this workflow.
            - description : str
                A description of the workflow.
            - valid : bool
                The validity of the workflow definition.
            - file_id : str
                The file id for the s3 file containing the workflow configuration.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The state of the workflow. State is "running" if any execution is
                running, otherwise reflects most recent execution state.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - allow_concurrent_executions : bool
                Whether the workflow can execute when already running.
            - time_zone : str
                The time zone of this workflow.
            - next_execution_at : str (time)
                The time of the next scheduled execution.
            - archived : str
                The archival status of the requested item(s).
            - created_at : str (time)
            - updated_at : str (time)
        """
        ...

    def post(
        self,
        name: str,
        description: str | None = ...,
        from_job_chain: int | None = ...,
        definition: str | None = ...,
        schedule: dict | None = ...,
        allow_concurrent_executions: bool | None = ...,
        time_zone: str | None = ...,
        notifications: dict | None = ...,
        hidden: bool | None = ...,
    ) -> Response:
        """Create a Workflow

        Parameters
        ----------
        name : str
            The name of this workflow.
        description : str, optional
            A description of the workflow.
        from_job_chain : int, optional
            If specified, create a workflow from the job chain this job is in, and
            inherit the schedule from the root of the chain.
        definition : str, optional
            The definition of the workflow in YAML format. Must not be specified if
            `fromJobChain` is specified.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        allow_concurrent_executions : bool, optional
            Whether the workflow can execute when already running.
        time_zone : str, optional
            The time zone of this workflow.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on
            - failure_on : bool
                If failure email notifications are on
        hidden : bool, optional
            The hidden status of the item.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this workflow.
            - name : str
                The name of this workflow.
            - description : str
                A description of the workflow.
            - definition : str
                The definition of the workflow in YAML format. Must not be specified if
                `fromJobChain` is specified.
            - valid : bool
                The validity of the workflow definition.
            - validation_errors : str
                The errors encountered when validating the workflow definition.
            - file_id : str
                The file id for the s3 file containing the workflow configuration.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The state of the workflow. State is "running" if any execution is
                running, otherwise reflects most recent execution state.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - allow_concurrent_executions : bool
                Whether the workflow can execute when already running.
            - time_zone : str
                The time zone of this workflow.
            - next_execution_at : str (time)
                The time of the next scheduled execution.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on
                - failure_on : bool
                    If failure email notifications are on
            - archived : str
                The archival status of the requested item(s).
            - hidden : bool
                The hidden status of the item.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - created_at : str (time)
            - updated_at : str (time)
        """
        ...

    def get(
        self,
        id: int,
    ) -> Response:
        """Get a Workflow

        Parameters
        ----------
        id : int

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this workflow.
            - name : str
                The name of this workflow.
            - description : str
                A description of the workflow.
            - definition : str
                The definition of the workflow in YAML format. Must not be specified if
                `fromJobChain` is specified.
            - valid : bool
                The validity of the workflow definition.
            - validation_errors : str
                The errors encountered when validating the workflow definition.
            - file_id : str
                The file id for the s3 file containing the workflow configuration.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The state of the workflow. State is "running" if any execution is
                running, otherwise reflects most recent execution state.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - allow_concurrent_executions : bool
                Whether the workflow can execute when already running.
            - time_zone : str
                The time zone of this workflow.
            - next_execution_at : str (time)
                The time of the next scheduled execution.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on
                - failure_on : bool
                    If failure email notifications are on
            - archived : str
                The archival status of the requested item(s).
            - hidden : bool
                The hidden status of the item.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - created_at : str (time)
            - updated_at : str (time)
        """
        ...

    def put(
        self,
        id: int,
        name: str,
        description: str | None = ...,
        definition: str | None = ...,
        schedule: dict | None = ...,
        allow_concurrent_executions: bool | None = ...,
        time_zone: str | None = ...,
        notifications: dict | None = ...,
    ) -> Response:
        """Replace all attributes of this Workflow

        Parameters
        ----------
        id : int
            The ID for this workflow.
        name : str
            The name of this workflow.
        description : str, optional
            A description of the workflow.
        definition : str, optional
            The definition of the workflow in YAML format. Must not be specified if
            `fromJobChain` is specified.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        allow_concurrent_executions : bool, optional
            Whether the workflow can execute when already running.
        time_zone : str, optional
            The time zone of this workflow.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on
            - failure_on : bool
                If failure email notifications are on

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this workflow.
            - name : str
                The name of this workflow.
            - description : str
                A description of the workflow.
            - definition : str
                The definition of the workflow in YAML format. Must not be specified if
                `fromJobChain` is specified.
            - valid : bool
                The validity of the workflow definition.
            - validation_errors : str
                The errors encountered when validating the workflow definition.
            - file_id : str
                The file id for the s3 file containing the workflow configuration.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The state of the workflow. State is "running" if any execution is
                running, otherwise reflects most recent execution state.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - allow_concurrent_executions : bool
                Whether the workflow can execute when already running.
            - time_zone : str
                The time zone of this workflow.
            - next_execution_at : str (time)
                The time of the next scheduled execution.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on
                - failure_on : bool
                    If failure email notifications are on
            - archived : str
                The archival status of the requested item(s).
            - hidden : bool
                The hidden status of the item.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - created_at : str (time)
            - updated_at : str (time)
        """
        ...

    def patch(
        self,
        id: int,
        name: str | None = ...,
        description: str | None = ...,
        definition: str | None = ...,
        schedule: dict | None = ...,
        allow_concurrent_executions: bool | None = ...,
        time_zone: str | None = ...,
        notifications: dict | None = ...,
    ) -> Response:
        """Update some attributes of this Workflow

        Parameters
        ----------
        id : int
            The ID for this workflow.
        name : str, optional
            The name of this workflow.
        description : str, optional
            A description of the workflow.
        definition : str, optional
            The definition of the workflow in YAML format. Must not be specified if
            `fromJobChain` is specified.
        schedule : dict, optional
            - scheduled : bool
                If the item is scheduled.
            - scheduled_days : list[int]
                Days of the week, based on numeric value starting at 0 for Sunday.
                Mutually exclusive with scheduledDaysOfMonth
            - scheduled_hours : list[int]
                Hours of the day it is scheduled on.
            - scheduled_minutes : list[int]
                Minutes of the day it is scheduled on.
            - scheduled_runs_per_hour : int
                Deprecated in favor of scheduled minutes.
            - scheduled_days_of_month : list[int]
                Days of the month it is scheduled on, mutually exclusive with
                scheduledDays.
        allow_concurrent_executions : bool, optional
            Whether the workflow can execute when already running.
        time_zone : str, optional
            The time zone of this workflow.
        notifications : dict, optional
            - urls : list[str]
                URLs to receive a POST request at job completion
            - success_email_subject : str
                Custom subject line for success e-mail.
            - success_email_body : str
                Custom body text for success e-mail, written in Markdown.
            - success_email_addresses : list[str]
                Addresses to notify by e-mail when the job completes successfully.
            - failure_email_addresses : list[str]
                Addresses to notify by e-mail when the job fails.
            - stall_warning_minutes : int
                Stall warning emails will be sent after this amount of minutes.
            - success_on : bool
                If success email notifications are on
            - failure_on : bool
                If failure email notifications are on

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this workflow.
            - name : str
                The name of this workflow.
            - description : str
                A description of the workflow.
            - definition : str
                The definition of the workflow in YAML format. Must not be specified if
                `fromJobChain` is specified.
            - valid : bool
                The validity of the workflow definition.
            - validation_errors : str
                The errors encountered when validating the workflow definition.
            - file_id : str
                The file id for the s3 file containing the workflow configuration.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The state of the workflow. State is "running" if any execution is
                running, otherwise reflects most recent execution state.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - allow_concurrent_executions : bool
                Whether the workflow can execute when already running.
            - time_zone : str
                The time zone of this workflow.
            - next_execution_at : str (time)
                The time of the next scheduled execution.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on
                - failure_on : bool
                    If failure email notifications are on
            - archived : str
                The archival status of the requested item(s).
            - hidden : bool
                The hidden status of the item.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - created_at : str (time)
            - updated_at : str (time)
        """
        ...

    def list_shares(
        self,
        id: int,
    ) -> Response:
        """List users and groups permissioned on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def put_shares_users(
        self,
        id: int,
        user_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions users have on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_ids : list[int]
            An array of one or more user IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_users(
        self,
        id: int,
        user_id: int,
    ) -> Response:
        """Revoke the permissions a user has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            The ID of the user.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def put_shares_groups(
        self,
        id: int,
        group_ids: list[int],
        permission_level: str,
        share_email_body: str | None = ...,
        send_shared_email: bool | None = ...,
    ) -> Response:
        """Set the permissions groups has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_ids : list[int]
            An array of one or more group IDs.
        permission_level : str
            Options are: "read", "write", or "manage".
        share_email_body : str, optional
            Custom body text for e-mail sent on a share.
        send_shared_email : bool, optional
            Send email to the recipients of a share.

        Returns
        -------
        :class:`civis.response.Response`
            - readers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - writers : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - owners : dict
                - users : list[dict]
                    - id : int
                    - name : str
                - groups : list[dict]
                    - id : int
                    - name : str
            - total_user_shares : int
                For owners, the number of total users shared. For writers and readers,
                the number of visible users shared.
            - total_group_shares : int
                For owners, the number of total groups shared. For writers and readers,
                the number of visible groups shared.
        """
        ...

    def delete_shares_groups(
        self,
        id: int,
        group_id: int,
    ) -> Response:
        """Revoke the permissions a group has on this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        group_id : int
            The ID of the group.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_dependencies(
        self,
        id: int,
        user_id: int | None = ...,
    ) -> Response:
        """List dependent objects for this object

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int, optional
            ID of target user

        Returns
        -------
        :class:`civis.response.Response`
            - object_type : str
                Dependent object type
            - fco_type : str
                Human readable dependent object type
            - id : int
                Dependent object ID
            - name : str
                Dependent object name, or nil if the requesting user cannot read this
                object
            - permission_level : str
                Permission level of target user (not user's groups) for dependent
                object. Null if no target user or not shareable (e.g. a database
                table).
            - description : str
                Additional information about the dependency, if relevant
            - shareable : bool
                Whether or not the requesting user can share this object.
        """
        ...

    def put_transfer(
        self,
        id: int,
        user_id: int,
        include_dependencies: bool,
        email_body: str | None = ...,
        send_email: bool | None = ...,
    ) -> Response:
        """Transfer ownership of this object to another user

        Parameters
        ----------
        id : int
            The ID of the resource that is shared.
        user_id : int
            ID of target user
        include_dependencies : bool
            Whether or not to give manage permissions on all dependencies
        email_body : str, optional
            Custom body text for e-mail sent on transfer.
        send_email : bool, optional
            Send email to the target user of the transfer?

        Returns
        -------
        :class:`civis.response.Response`
            - dependencies : list[dict]
                Dependent objects for this object

                - object_type : str
                    Dependent object type
                - fco_type : str
                    Human readable dependent object type
                - id : int
                    Dependent object ID
                - name : str
                    Dependent object name, or nil if the requesting user cannot read
                    this object
                - permission_level : str
                    Permission level of target user (not user's groups) for dependent
                    object. Null if no target user or not shareable (e.g. a database
                    table).
                - description : str
                    Additional information about the dependency, if relevant
                - shared : bool
                    Whether dependent object was successfully shared with target user
        """
        ...

    def put_archive(
        self,
        id: int,
        status: bool,
    ) -> Response:
        """Update the archive status of this object

        Parameters
        ----------
        id : int
            The ID of the object.
        status : bool
            The desired archived status of the object.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this workflow.
            - name : str
                The name of this workflow.
            - description : str
                A description of the workflow.
            - definition : str
                The definition of the workflow in YAML format. Must not be specified if
                `fromJobChain` is specified.
            - valid : bool
                The validity of the workflow definition.
            - validation_errors : str
                The errors encountered when validating the workflow definition.
            - file_id : str
                The file id for the s3 file containing the workflow configuration.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The state of the workflow. State is "running" if any execution is
                running, otherwise reflects most recent execution state.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - allow_concurrent_executions : bool
                Whether the workflow can execute when already running.
            - time_zone : str
                The time zone of this workflow.
            - next_execution_at : str (time)
                The time of the next scheduled execution.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on
                - failure_on : bool
                    If failure email notifications are on
            - archived : str
                The archival status of the requested item(s).
            - hidden : bool
                The hidden status of the item.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - created_at : str (time)
            - updated_at : str (time)
        """
        ...

    def list_projects(
        self,
        id: int,
        hidden: bool | None = ...,
    ) -> Response:
        """List the projects a Workflow belongs to

        Parameters
        ----------
        id : int
            The ID of the Workflow.
        hidden : bool, optional
            If specified to be true, returns hidden items. Defaults to false, returning
            non-hidden items.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this project.
            - author : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - name : str
                The name of this project.
            - description : str
                A description of the project.
            - users : list[dict]
                Users who can see the project.

                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - auto_share : bool
            - created_at : str (time)
            - updated_at : str (time)
            - archived : str
                The archival status of the requested item(s).
        """
        ...

    def put_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Add a Workflow to a project

        Parameters
        ----------
        id : int
            The ID of the Workflow.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def delete_projects(
        self,
        id: int,
        project_id: int,
    ) -> Response:
        """Remove a Workflow from a project

        Parameters
        ----------
        id : int
            The ID of the Workflow.
        project_id : int
            The ID of the project.

        Returns
        -------
        None
            Response code 204: success
        """
        ...

    def list_git(
        self,
        id: int,
    ) -> Response:
        """Get the git metadata attached to an item

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def put_git(
        self,
        id: int,
        git_ref: str | None = ...,
        git_branch: str | None = ...,
        git_path: str | None = ...,
        git_repo_url: str | None = ...,
        git_ref_type: str | None = ...,
        pull_from_git: bool | None = ...,
    ) -> Response:
        """Attach an item to a file in a git repo

        Parameters
        ----------
        id : int
            The ID of the file.
        git_ref : str, optional
            A git reference specifying an unambiguous version of the file. Can be a
            branch name, or the full or shortened SHA of a commit.
        git_branch : str, optional
            The git branch that the file is on.
        git_path : str, optional
            The path of the file in the repository.
        git_repo_url : str, optional
            The URL of the git repository.
        git_ref_type : str, optional
            Specifies if the file is versioned by branch or tag.
        pull_from_git : bool, optional
            Automatically pull latest commit from git. Only works for scripts.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def patch_git(
        self,
        id: int,
        git_ref: str | None = ...,
        git_branch: str | None = ...,
        git_path: str | None = ...,
        git_repo_url: str | None = ...,
        git_ref_type: str | None = ...,
        pull_from_git: bool | None = ...,
    ) -> Response:
        """Update an attached git file

        Parameters
        ----------
        id : int
            The ID of the file.
        git_ref : str, optional
            A git reference specifying an unambiguous version of the file. Can be a
            branch name, or the full or shortened SHA of a commit.
        git_branch : str, optional
            The git branch that the file is on.
        git_path : str, optional
            The path of the file in the repository.
        git_repo_url : str, optional
            The URL of the git repository.
        git_ref_type : str, optional
            Specifies if the file is versioned by branch or tag.
        pull_from_git : bool, optional
            Automatically pull latest commit from git. Only works for scripts.

        Returns
        -------
        :class:`civis.response.Response`
            - git_ref : str
                A git reference specifying an unambiguous version of the file. Can be a
                branch name, tag or the full or shortened SHA of a commit.
            - git_branch : str
                The git branch that the file is on.
            - git_path : str
                The path of the file in the repository.
            - git_repo : dict
                - id : int
                    The ID for this git repository.
                - repo_url : str
                    The URL for this git repository.
                - created_at : str (time)
                - updated_at : str (time)
            - git_ref_type : str
                Specifies if the file is versioned by branch or tag.
            - pull_from_git : bool
                Automatically pull latest commit from git. Only works for scripts and
                workflows (assuming you have the feature enabled)
        """
        ...

    def list_git_commits(
        self,
        id: int,
    ) -> Response:
        """Get the git commits for an item on the current branch

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - commit_hash : str
                The SHA of the commit.
            - author_name : str
                The name of the commit's author.
            - date : str (time)
                The commit's timestamp.
            - message : str
                The commit message.
        """
        ...

    def post_git_commits(
        self,
        id: int,
        content: str,
        message: str,
        file_hash: str,
    ) -> Response:
        """Commit and push a new version of the file

        Parameters
        ----------
        id : int
            The ID of the file.
        content : str
            The contents to commit to the file.
        message : str
            A commit message describing the changes being made.
        file_hash : str
            The full SHA of the file being replaced.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def get_git_commits(
        self,
        id: int,
        commit_hash: str,
    ) -> Response:
        """Get file contents at git ref

        Parameters
        ----------
        id : int
            The ID of the file.
        commit_hash : str
            The SHA (full or shortened) of the desired git commit.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def post_git_checkout_latest(
        self,
        id: int,
    ) -> Response:
        """Checkout latest commit on the current branch of a script or workflow

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def post_git_checkout(
        self,
        id: int,
    ) -> Response:
        """Checkout content that the existing git_ref points to and save to the object

        Parameters
        ----------
        id : int
            The ID of the file.

        Returns
        -------
        :class:`civis.response.Response`
            - content : str
                The file's contents.
            - type : str
                The file's type.
            - size : int
                The file's size.
            - file_hash : str
                The SHA of the file.
        """
        ...

    def post_clone(
        self,
        id: int,
        clone_schedule: bool | None = ...,
        clone_notifications: bool | None = ...,
    ) -> Response:
        """Clone this Workflow

        Parameters
        ----------
        id : int
            The ID for the workflow.
        clone_schedule : bool, optional
            If true, also copy the schedule to the new workflow.
        clone_notifications : bool, optional
            If true, also copy the notifications to the new workflow.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this workflow.
            - name : str
                The name of this workflow.
            - description : str
                A description of the workflow.
            - definition : str
                The definition of the workflow in YAML format. Must not be specified if
                `fromJobChain` is specified.
            - valid : bool
                The validity of the workflow definition.
            - validation_errors : str
                The errors encountered when validating the workflow definition.
            - file_id : str
                The file id for the s3 file containing the workflow configuration.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - state : str
                The state of the workflow. State is "running" if any execution is
                running, otherwise reflects most recent execution state.
            - schedule : dict
                - scheduled : bool
                    If the item is scheduled.
                - scheduled_days : list[int]
                    Days of the week, based on numeric value starting at 0 for Sunday.
                    Mutually exclusive with scheduledDaysOfMonth
                - scheduled_hours : list[int]
                    Hours of the day it is scheduled on.
                - scheduled_minutes : list[int]
                    Minutes of the day it is scheduled on.
                - scheduled_runs_per_hour : int
                    Deprecated in favor of scheduled minutes.
                - scheduled_days_of_month : list[int]
                    Days of the month it is scheduled on, mutually exclusive with
                    scheduledDays.
            - allow_concurrent_executions : bool
                Whether the workflow can execute when already running.
            - time_zone : str
                The time zone of this workflow.
            - next_execution_at : str (time)
                The time of the next scheduled execution.
            - notifications : dict
                - urls : list[str]
                    URLs to receive a POST request at job completion
                - success_email_subject : str
                    Custom subject line for success e-mail.
                - success_email_body : str
                    Custom body text for success e-mail, written in Markdown.
                - success_email_addresses : list[str]
                    Addresses to notify by e-mail when the job completes successfully.
                - failure_email_addresses : list[str]
                    Addresses to notify by e-mail when the job fails.
                - stall_warning_minutes : int
                    Stall warning emails will be sent after this amount of minutes.
                - success_on : bool
                    If success email notifications are on
                - failure_on : bool
                    If failure email notifications are on
            - archived : str
                The archival status of the requested item(s).
            - hidden : bool
                The hidden status of the item.
            - my_permission_level : str
                Your permission level on the object. One of "read", "write", or
                "manage".
            - created_at : str (time)
            - updated_at : str (time)
        """
        ...

    def list_executions(
        self,
        id: int,
        limit: int | None = ...,
        page_num: int | None = ...,
        order: str | None = ...,
        order_dir: str | None = ...,
        iterator: bool | None = ...,
    ) -> PaginatedResponse:
        """List workflow executions

        Parameters
        ----------
        id : int
            The ID for this workflow.
        limit : int, optional
            Number of results to return. Defaults to 20. Maximum allowed is 50.
        page_num : int, optional
            Page number of the results to return. Defaults to the first page, 1.
        order : str, optional
            The field on which to order the result set. Defaults to id. Must be one of:
            id, updated_at, created_at.
        order_dir : str, optional
            Direction in which to sort, either asc (ascending) or desc (descending)
            defaulting to desc.
        iterator : bool, optional
            If True, return a generator to iterate over all responses. Use when
            more results than the maximum allowed by limit are needed. When
            True, limit and page_num are ignored. Defaults to False.

        Returns
        -------
        :class:`civis.response.PaginatedResponse`
            - id : int
                The ID for this workflow execution.
            - state : str
                The state of this workflow execution.
            - mistral_state : str
                The state of this workflow as reported by mistral. One of running,
                paused, success, error, or cancelled
            - mistral_state_info : str
                The state info of this workflow as reported by mistral.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - started_at : str (time)
                The time this execution started.
            - finished_at : str (time)
                The time this execution finished.
            - created_at : str (time)
                The time this execution was created.
            - updated_at : str (time)
                The time this execution was last updated.
        """
        ...

    def post_executions(
        self,
        id: int,
        target_task: str | None = ...,
        input: dict | None = ...,
        included_tasks: list[str] | None = ...,
    ) -> Response:
        """Execute a workflow

        Parameters
        ----------
        id : int
            The ID for the workflow.
        target_task : str, optional
            For a reverse workflow, the name of the task to target.
        input : dict, optional
            Key-value pairs to send to this execution as inputs.
        included_tasks : list[str], optional
            If specified, executes only the subset of workflow tasks included as
            specified by task name.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this workflow execution.
            - state : str
                The state of this workflow execution.
            - mistral_state : str
                The state of this workflow as reported by mistral. One of running,
                paused, success, error, or cancelled
            - mistral_state_info : str
                The state info of this workflow as reported by mistral.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - definition : str
                The definition of the workflow for this execution.
            - input : dict
                Key-value pairs defined for this execution.
            - included_tasks : list[str]
                The subset of workflow tasks selected to execute.
            - tasks : list[dict]
                The tasks associated with this execution.

                - name : str
                    The name of the task.
                - mistral_state : str
                    The state of this task. One of idle, waiting, running, delayed,
                    success, error, or cancelled
                - mistral_state_info : str
                    Extra info associated with the state of the task.
                - runs : list[dict]
                    The runs associated with this task, in descending order by id.

                    - id : int
                        The ID of the run.
                    - job_id : int
                        The ID of the job associated with the run.
                    - my_permission_level : str
                        Your permission level on the job. One of "read", "write",
                        "manage", or "nil".
                    - state : str
                        The state of the run.
                    - created_at : str (time)
                        The time that the run was queued.
                    - started_at : str (time)
                        The time that the run started.
                    - finished_at : str (time)
                        The time that the run completed.
                - executions : list[dict]
                    The executions run by this task, in descending order by id.

                    - id : int
                        The ID of the execution.
                    - workflow_id : int
                        The ID of the workflow associated with the execution.
                    - my_permission_level : str
                        Your permission level on the workflow. One of "read", "write",
                        "manage", or "nil".
                    - state : str
                        The state of this workflow execution.
                    - created_at : str (time)
                        The time this execution was created.
                    - started_at : str (time)
                        The time this execution started.
                    - finished_at : str (time)
                        The time this execution finished.
            - started_at : str (time)
                The time this execution started.
            - finished_at : str (time)
                The time this execution finished.
            - created_at : str (time)
                The time this execution was created.
            - updated_at : str (time)
                The time this execution was last updated.
        """
        ...

    def get_executions(
        self,
        id: int,
        execution_id: int,
    ) -> Response:
        """Get a workflow execution

        Parameters
        ----------
        id : int
            The ID for the workflow.
        execution_id : int
            The ID for the workflow execution.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this workflow execution.
            - state : str
                The state of this workflow execution.
            - mistral_state : str
                The state of this workflow as reported by mistral. One of running,
                paused, success, error, or cancelled
            - mistral_state_info : str
                The state info of this workflow as reported by mistral.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - definition : str
                The definition of the workflow for this execution.
            - input : dict
                Key-value pairs defined for this execution.
            - included_tasks : list[str]
                The subset of workflow tasks selected to execute.
            - tasks : list[dict]
                The tasks associated with this execution.

                - name : str
                    The name of the task.
                - mistral_state : str
                    The state of this task. One of idle, waiting, running, delayed,
                    success, error, or cancelled
                - mistral_state_info : str
                    Extra info associated with the state of the task.
                - runs : list[dict]
                    The runs associated with this task, in descending order by id.

                    - id : int
                        The ID of the run.
                    - job_id : int
                        The ID of the job associated with the run.
                    - my_permission_level : str
                        Your permission level on the job. One of "read", "write",
                        "manage", or "nil".
                    - state : str
                        The state of the run.
                    - created_at : str (time)
                        The time that the run was queued.
                    - started_at : str (time)
                        The time that the run started.
                    - finished_at : str (time)
                        The time that the run completed.
                - executions : list[dict]
                    The executions run by this task, in descending order by id.

                    - id : int
                        The ID of the execution.
                    - workflow_id : int
                        The ID of the workflow associated with the execution.
                    - my_permission_level : str
                        Your permission level on the workflow. One of "read", "write",
                        "manage", or "nil".
                    - state : str
                        The state of this workflow execution.
                    - created_at : str (time)
                        The time this execution was created.
                    - started_at : str (time)
                        The time this execution started.
                    - finished_at : str (time)
                        The time this execution finished.
            - started_at : str (time)
                The time this execution started.
            - finished_at : str (time)
                The time this execution finished.
            - created_at : str (time)
                The time this execution was created.
            - updated_at : str (time)
                The time this execution was last updated.
        """
        ...

    def post_executions_cancel(
        self,
        id: int,
        execution_id: int,
    ) -> Response:
        """Cancel a workflow execution

        Parameters
        ----------
        id : int
            The ID for the workflow.
        execution_id : int
            The ID for the workflow execution.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this workflow execution.
            - state : str
                The state of this workflow execution.
            - mistral_state : str
                The state of this workflow as reported by mistral. One of running,
                paused, success, error, or cancelled
            - mistral_state_info : str
                The state info of this workflow as reported by mistral.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - definition : str
                The definition of the workflow for this execution.
            - input : dict
                Key-value pairs defined for this execution.
            - included_tasks : list[str]
                The subset of workflow tasks selected to execute.
            - tasks : list[dict]
                The tasks associated with this execution.

                - name : str
                    The name of the task.
                - mistral_state : str
                    The state of this task. One of idle, waiting, running, delayed,
                    success, error, or cancelled
                - mistral_state_info : str
                    Extra info associated with the state of the task.
                - runs : list[dict]
                    The runs associated with this task, in descending order by id.

                    - id : int
                        The ID of the run.
                    - job_id : int
                        The ID of the job associated with the run.
                    - my_permission_level : str
                        Your permission level on the job. One of "read", "write",
                        "manage", or "nil".
                    - state : str
                        The state of the run.
                    - created_at : str (time)
                        The time that the run was queued.
                    - started_at : str (time)
                        The time that the run started.
                    - finished_at : str (time)
                        The time that the run completed.
                - executions : list[dict]
                    The executions run by this task, in descending order by id.

                    - id : int
                        The ID of the execution.
                    - workflow_id : int
                        The ID of the workflow associated with the execution.
                    - my_permission_level : str
                        Your permission level on the workflow. One of "read", "write",
                        "manage", or "nil".
                    - state : str
                        The state of this workflow execution.
                    - created_at : str (time)
                        The time this execution was created.
                    - started_at : str (time)
                        The time this execution started.
                    - finished_at : str (time)
                        The time this execution finished.
            - started_at : str (time)
                The time this execution started.
            - finished_at : str (time)
                The time this execution finished.
            - created_at : str (time)
                The time this execution was created.
            - updated_at : str (time)
                The time this execution was last updated.
        """
        ...

    def post_executions_resume(
        self,
        id: int,
        execution_id: int,
    ) -> Response:
        """Resume a paused workflow execution

        Parameters
        ----------
        id : int
            The ID for the workflow.
        execution_id : int
            The ID for the workflow execution.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this workflow execution.
            - state : str
                The state of this workflow execution.
            - mistral_state : str
                The state of this workflow as reported by mistral. One of running,
                paused, success, error, or cancelled
            - mistral_state_info : str
                The state info of this workflow as reported by mistral.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - definition : str
                The definition of the workflow for this execution.
            - input : dict
                Key-value pairs defined for this execution.
            - included_tasks : list[str]
                The subset of workflow tasks selected to execute.
            - tasks : list[dict]
                The tasks associated with this execution.

                - name : str
                    The name of the task.
                - mistral_state : str
                    The state of this task. One of idle, waiting, running, delayed,
                    success, error, or cancelled
                - mistral_state_info : str
                    Extra info associated with the state of the task.
                - runs : list[dict]
                    The runs associated with this task, in descending order by id.

                    - id : int
                        The ID of the run.
                    - job_id : int
                        The ID of the job associated with the run.
                    - my_permission_level : str
                        Your permission level on the job. One of "read", "write",
                        "manage", or "nil".
                    - state : str
                        The state of the run.
                    - created_at : str (time)
                        The time that the run was queued.
                    - started_at : str (time)
                        The time that the run started.
                    - finished_at : str (time)
                        The time that the run completed.
                - executions : list[dict]
                    The executions run by this task, in descending order by id.

                    - id : int
                        The ID of the execution.
                    - workflow_id : int
                        The ID of the workflow associated with the execution.
                    - my_permission_level : str
                        Your permission level on the workflow. One of "read", "write",
                        "manage", or "nil".
                    - state : str
                        The state of this workflow execution.
                    - created_at : str (time)
                        The time this execution was created.
                    - started_at : str (time)
                        The time this execution started.
                    - finished_at : str (time)
                        The time this execution finished.
            - started_at : str (time)
                The time this execution started.
            - finished_at : str (time)
                The time this execution finished.
            - created_at : str (time)
                The time this execution was created.
            - updated_at : str (time)
                The time this execution was last updated.
        """
        ...

    def post_executions_retry(
        self,
        id: int,
        execution_id: int,
        task_name: str | None = ...,
    ) -> Response:
        """Retry a failed task, or all failed tasks in an execution

        Parameters
        ----------
        id : int
            The ID for the workflow.
        execution_id : int
            The ID for the workflow execution.
        task_name : str, optional
            If specified, the name of the task to be retried. If not specified, all
            failed tasks in the execution will be retried.

        Returns
        -------
        :class:`civis.response.Response`
            - id : int
                The ID for this workflow execution.
            - state : str
                The state of this workflow execution.
            - mistral_state : str
                The state of this workflow as reported by mistral. One of running,
                paused, success, error, or cancelled
            - mistral_state_info : str
                The state info of this workflow as reported by mistral.
            - user : dict
                - id : int
                    The ID of this user.
                - name : str
                    This user's name.
                - username : str
                    This user's username.
                - initials : str
                    This user's initials.
                - online : bool
                    Whether this user is online.
            - definition : str
                The definition of the workflow for this execution.
            - input : dict
                Key-value pairs defined for this execution.
            - included_tasks : list[str]
                The subset of workflow tasks selected to execute.
            - tasks : list[dict]
                The tasks associated with this execution.

                - name : str
                    The name of the task.
                - mistral_state : str
                    The state of this task. One of idle, waiting, running, delayed,
                    success, error, or cancelled
                - mistral_state_info : str
                    Extra info associated with the state of the task.
                - runs : list[dict]
                    The runs associated with this task, in descending order by id.

                    - id : int
                        The ID of the run.
                    - job_id : int
                        The ID of the job associated with the run.
                    - my_permission_level : str
                        Your permission level on the job. One of "read", "write",
                        "manage", or "nil".
                    - state : str
                        The state of the run.
                    - created_at : str (time)
                        The time that the run was queued.
                    - started_at : str (time)
                        The time that the run started.
                    - finished_at : str (time)
                        The time that the run completed.
                - executions : list[dict]
                    The executions run by this task, in descending order by id.

                    - id : int
                        The ID of the execution.
                    - workflow_id : int
                        The ID of the workflow associated with the execution.
                    - my_permission_level : str
                        Your permission level on the workflow. One of "read", "write",
                        "manage", or "nil".
                    - state : str
                        The state of this workflow execution.
                    - created_at : str (time)
                        The time this execution was created.
                    - started_at : str (time)
                        The time this execution started.
                    - finished_at : str (time)
                        The time this execution finished.
            - started_at : str (time)
                The time this execution started.
            - finished_at : str (time)
                The time this execution finished.
            - created_at : str (time)
                The time this execution was created.
            - updated_at : str (time)
                The time this execution was last updated.
        """
        ...

    def get_executions_tasks(
        self,
        id: int,
        execution_id: int,
        task_name: str,
    ) -> Response:
        """Get a task of a workflow execution

        Parameters
        ----------
        id : int
            The ID for the workflow.
        execution_id : int
            The ID for the workflow execution.
        task_name : str
            The URL-encoded name of the task.

        Returns
        -------
        :class:`civis.response.Response`
            - name : str
                The name of the task.
            - mistral_state : str
                The state of this task. One of idle, waiting, running, delayed,
                success, error, or cancelled
            - mistral_state_info : str
                Extra info associated with the state of the task.
            - runs : list[dict]
                The runs associated with this task, in descending order by id.

                - id : int
                    The ID of the run.
                - job_id : int
                    The ID of the job associated with the run.
                - my_permission_level : str
                    Your permission level on the job. One of "read", "write", "manage",
                    or "nil".
                - state : str
                    The state of the run.
                - created_at : str (time)
                    The time that the run was queued.
                - started_at : str (time)
                    The time that the run started.
                - finished_at : str (time)
                    The time that the run completed.
            - executions : list[dict]
                The executions run by this task, in descending order by id.

                - id : int
                    The ID of the execution.
                - workflow_id : int
                    The ID of the workflow associated with the execution.
                - my_permission_level : str
                    Your permission level on the workflow. One of "read", "write",
                    "manage", or "nil".
                - state : str
                    The state of this workflow execution.
                - created_at : str (time)
                    The time this execution was created.
                - started_at : str (time)
                    The time this execution started.
                - finished_at : str (time)
                    The time this execution finished.
        """
        ...

# Need the individual endpoint classes defined first as above,
# before we can define APIClient to use them.
class APIClient:
    default_credential: int | None
    username: str
    feature_flags: tuple[str]
    last_response: APIClient | None
    def __init__(
        self,
        api_key: str | None = ...,
        return_type: str = ...,
        api_version: str = ...,
        local_api_spec: OrderedDict | str | None = ...,
    ): ...
    def get_aws_credential_id(
        self,
        cred_name: str | int,
        owner: str | None = None,
    ) -> int: ...
    def get_database_credential_id(
        self,
        username: str | int,
        database_name: str | int,
    ) -> int: ...
    def get_database_id(
        self,
        database: str | int,
    ) -> int: ...
    def get_storage_host_id(
        self,
        storage_host: str | int,
    ) -> int: ...
    def get_table_id(
        self,
        table: str,
        database: str | int,
    ) -> int: ...
    admin = _Admin()
    aliases = _Aliases()
    announcements = _Announcements()
    clusters = _Clusters()
    credentials = _Credentials()
    databases = _Databases()
    endpoints = _Endpoints()
    enhancements = _Enhancements()
    exports = _Exports()
    files = _Files()
    git_repos = _Git_Repos()
    groups = _Groups()
    imports = _Imports()
    jobs = _Jobs()
    json_values = _Json_Values()
    match_targets = _Match_Targets()
    media = _Media()
    models = _Models()
    notebooks = _Notebooks()
    notifications = _Notifications()
    ontology = _Ontology()
    permission_sets = _Permission_Sets()
    predictions = _Predictions()
    projects = _Projects()
    queries = _Queries()
    remote_hosts = _Remote_Hosts()
    reports = _Reports()
    roles = _Roles()
    scripts = _Scripts()
    search = _Search()
    services = _Services()
    storage_hosts = _Storage_Hosts()
    table_tags = _Table_Tags()
    tables = _Tables()
    templates = _Templates()
    usage = _Usage()
    usage_limits = _Usage_Limits()
    users = _Users()
    workflows = _Workflows()
